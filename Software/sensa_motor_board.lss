
sensa_motor_board.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000098  00800100  0000128a  0000131e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000128a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000220  00800198  00800198  000013b6  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000013b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  00001408  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d8f  00000000  00000000  00001630  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000018fd  00000000  00000000  000043bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002ab5  00000000  00000000  00005cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000430  00000000  00000000  00008774  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009b1  00000000  00000000  00008ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001739  00000000  00000000  00009555  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  0000ac8e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      30:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_12>
      34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      48:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__vector_18>
      4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      80:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      88:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      8c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	ea e8       	ldi	r30, 0x8A	; 138
      a8:	f2 e1       	ldi	r31, 0x12	; 18
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	a8 39       	cpi	r26, 0x98	; 152
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	23 e0       	ldi	r18, 0x03	; 3
      bc:	a8 e9       	ldi	r26, 0x98	; 152
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a8 3b       	cpi	r26, 0xB8	; 184
      c6:	b2 07       	cpc	r27, r18
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	0e 94 a5 06 	call	0xd4a	; 0xd4a <main>
      ce:	0c 94 43 09 	jmp	0x1286	; 0x1286 <_exit>

000000d2 <__bad_interrupt>:
      d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <timer_register_callback>:
 * Function:        void timer_register_callback(void (*callback)(void))
 * Description:     assign function to timer callback
 */
void timer_register_callback(void (*callback)(void))
{
    timer_callback = callback;
      d6:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <__data_end+0x1>
      da:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <__data_end>
} // end of timer_register_callback()
      de:	08 95       	ret

000000e0 <__vector_12>:

	SREG |= 0x80;
} // end of timer_init()

ISR(TIMER1_COMPA_vect)
{
      e0:	1f 92       	push	r1
      e2:	0f 92       	push	r0
      e4:	0f b6       	in	r0, 0x3f	; 63
      e6:	0f 92       	push	r0
      e8:	11 24       	eor	r1, r1
      ea:	0b b6       	in	r0, 0x3b	; 59
      ec:	0f 92       	push	r0
      ee:	2f 93       	push	r18
      f0:	3f 93       	push	r19
      f2:	4f 93       	push	r20
      f4:	5f 93       	push	r21
      f6:	6f 93       	push	r22
      f8:	7f 93       	push	r23
      fa:	8f 93       	push	r24
      fc:	9f 93       	push	r25
      fe:	af 93       	push	r26
     100:	bf 93       	push	r27
     102:	ef 93       	push	r30
     104:	ff 93       	push	r31
    // if timer_callback function is set, execute it
    if(timer_callback != NULL)
     106:	e0 91 98 01 	lds	r30, 0x0198	; 0x800198 <__data_end>
     10a:	f0 91 99 01 	lds	r31, 0x0199	; 0x800199 <__data_end+0x1>
     10e:	30 97       	sbiw	r30, 0x00	; 0
     110:	09 f0       	breq	.+2      	; 0x114 <__vector_12+0x34>
        timer_callback();
     112:	09 95       	icall

    // increment sys_time
    sys_time++;
     114:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <sys_time>
     118:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <sys_time+0x1>
     11c:	a0 91 9c 01 	lds	r26, 0x019C	; 0x80019c <sys_time+0x2>
     120:	b0 91 9d 01 	lds	r27, 0x019D	; 0x80019d <sys_time+0x3>
     124:	01 96       	adiw	r24, 0x01	; 1
     126:	a1 1d       	adc	r26, r1
     128:	b1 1d       	adc	r27, r1
     12a:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <sys_time>
     12e:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <sys_time+0x1>
     132:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <sys_time+0x2>
     136:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <sys_time+0x3>

}
     13a:	ff 91       	pop	r31
     13c:	ef 91       	pop	r30
     13e:	bf 91       	pop	r27
     140:	af 91       	pop	r26
     142:	9f 91       	pop	r25
     144:	8f 91       	pop	r24
     146:	7f 91       	pop	r23
     148:	6f 91       	pop	r22
     14a:	5f 91       	pop	r21
     14c:	4f 91       	pop	r20
     14e:	3f 91       	pop	r19
     150:	2f 91       	pop	r18
     152:	0f 90       	pop	r0
     154:	0b be       	out	0x3b, r0	; 59
     156:	0f 90       	pop	r0
     158:	0f be       	out	0x3f, r0	; 63
     15a:	0f 90       	pop	r0
     15c:	1f 90       	pop	r1
     15e:	18 95       	reti

00000160 <system_init>:

/*
 * Function:        void system_init(void)
 * Description:     init everything that is needed
 */
void system_init(void) {
     160:	cf 93       	push	r28
     162:	df 93       	push	r29

    #ifdef DEBUG
        USART0_init(9600);
     164:	60 e8       	ldi	r22, 0x80	; 128
     166:	75 e2       	ldi	r23, 0x25	; 37
     168:	80 e0       	ldi	r24, 0x00	; 0
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <USART0_init>
    #endif
    debug_printf("SENSA - Motor control board - DEBUG \n\n");
     170:	8e e1       	ldi	r24, 0x1E	; 30
     172:	91 e0       	ldi	r25, 0x01	; 1
     174:	0e 94 54 02 	call	0x4a8	; 0x4a8 <debug_printf>
    debug_printf("Starting init... ");
     178:	85 e4       	ldi	r24, 0x45	; 69
     17a:	91 e0       	ldi	r25, 0x01	; 1
     17c:	0e 94 54 02 	call	0x4a8	; 0x4a8 <debug_printf>
 * Function:   void init_led(void)
 * Parameter:  init the pins for the LEDs
 */
static void init_led(void) {

    gpio_register_pin(PIN_LED1, GPIO_DIRECTION_OUTPUT, true);      // set led1 as output
     180:	41 e0       	ldi	r20, 0x01	; 1
     182:	61 e0       	ldi	r22, 0x01	; 1
     184:	80 e3       	ldi	r24, 0x30	; 48
     186:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <gpio_register_pin>
    gpio_register_pin(PIN_LED2, GPIO_DIRECTION_OUTPUT, true);      // set led2 as output
     18a:	41 e0       	ldi	r20, 0x01	; 1
     18c:	61 e0       	ldi	r22, 0x01	; 1
     18e:	81 e3       	ldi	r24, 0x31	; 49
     190:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <gpio_register_pin>

    gpio_write_pin(PIN_LED1, LOW);                                  // set led1 low
     194:	60 e0       	ldi	r22, 0x00	; 0
     196:	80 e3       	ldi	r24, 0x30	; 48
     198:	0e 94 4f 04 	call	0x89e	; 0x89e <gpio_write_pin>
    gpio_write_pin(PIN_LED2, LOW);                                  // set led2 low
     19c:	60 e0       	ldi	r22, 0x00	; 0
     19e:	81 e3       	ldi	r24, 0x31	; 49
     1a0:	0e 94 4f 04 	call	0x89e	; 0x89e <gpio_write_pin>
    gpio_write_pin(PIN_LED1, HIGH);                       
     1a4:	61 e0       	ldi	r22, 0x01	; 1
     1a6:	80 e3       	ldi	r24, 0x30	; 48
     1a8:	0e 94 4f 04 	call	0x89e	; 0x89e <gpio_write_pin>
    CAN_Init();
     1ac:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <CAN_Init>
	CAN_InitRxMob(MOTOR_CONTROL_CAN_ID);
     1b0:	84 ed       	ldi	r24, 0xD4	; 212
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	0e 94 17 03 	call	0x62e	; 0x62e <CAN_InitRxMob>
    timer_callback = callback;
     1b8:	87 ea       	ldi	r24, 0xA7	; 167
     1ba:	94 e0       	ldi	r25, 0x04	; 4
     1bc:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <__data_end+0x1>
     1c0:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <__data_end>
    TCCR1A = 0;
     1c4:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = (1 << WGM12) | (1 << CS10);
     1c8:	89 e0       	ldi	r24, 0x09	; 9
     1ca:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	OCR1A = (double)F_CPU / (double)freq + 0.5;
     1ce:	80 e8       	ldi	r24, 0x80	; 128
     1d0:	9e e3       	ldi	r25, 0x3E	; 62
     1d2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     1d6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TIMSK1 = 1 << OCIE1A;
     1da:	82 e0       	ldi	r24, 0x02	; 2
     1dc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	SREG |= 0x80;
     1e0:	8f b7       	in	r24, 0x3f	; 63
     1e2:	80 68       	ori	r24, 0x80	; 128
     1e4:	8f bf       	out	0x3f, r24	; 63
    init_stepper();
     1e6:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <init_stepper>
    init_hbridge();
     1ea:	0e 94 79 05 	call	0xaf2	; 0xaf2 <init_hbridge>

/*
 * Function:   static void init_switches()
 * Parameter:  init pins for switches (switches_pin)
 */
static void init_switches(void) {
     1ee:	c0 e0       	ldi	r28, 0x00	; 0
     1f0:	d1 e0       	ldi	r29, 0x01	; 1
    for(int i=0; i < 8; i++) {
        gpio_register_pin(switches_pin[i], GPIO_DIRECTION_INPUT, false);
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	60 e0       	ldi	r22, 0x00	; 0
     1f6:	89 91       	ld	r24, Y+
     1f8:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <gpio_register_pin>
    for(int i=0; i < 8; i++) {
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	c8 30       	cpi	r28, 0x08	; 8
     200:	d8 07       	cpc	r29, r24
     202:	b9 f7       	brne	.-18     	; 0x1f2 <system_init+0x92>
    gpio_write_pin(PIN_LED1, LOW); 
     204:	60 e0       	ldi	r22, 0x00	; 0
     206:	80 e3       	ldi	r24, 0x30	; 48
     208:	0e 94 4f 04 	call	0x89e	; 0x89e <gpio_write_pin>
    debug_printf("finished... \n\n");
     20c:	87 e5       	ldi	r24, 0x57	; 87
     20e:	91 e0       	ldi	r25, 0x01	; 1
}
     210:	df 91       	pop	r29
     212:	cf 91       	pop	r28
    debug_printf("finished... \n\n");
     214:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <debug_printf>

00000218 <delay>:
  while (0 < ms)
     218:	18 16       	cp	r1, r24
     21a:	19 06       	cpc	r1, r25
     21c:	0c f0       	brlt	.+2      	; 0x220 <delay+0x8>
} // end of delay(int ms)
     21e:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     220:	ef e9       	ldi	r30, 0x9F	; 159
     222:	ff e0       	ldi	r31, 0x0F	; 15
     224:	31 97       	sbiw	r30, 0x01	; 1
     226:	f1 f7       	brne	.-4      	; 0x224 <delay+0xc>
     228:	00 c0       	rjmp	.+0      	; 0x22a <delay+0x12>
     22a:	00 00       	nop
    --ms;
     22c:	01 97       	sbiw	r24, 0x01	; 1
     22e:	f4 cf       	rjmp	.-24     	; 0x218 <delay>

00000230 <read_switch>:
 * Function:   uint8_t read_switch(uint8_t num)
 * Parameter:  read `num` switch
 */
uint8_t read_switch(uint8_t num) {

    return gpio_read_pin(switches_pin[num] - 1);
     230:	e8 2f       	mov	r30, r24
     232:	f0 e0       	ldi	r31, 0x00	; 0
     234:	e0 50       	subi	r30, 0x00	; 0
     236:	ff 4f       	sbci	r31, 0xFF	; 255
     238:	80 81       	ld	r24, Z
     23a:	81 50       	subi	r24, 0x01	; 1
     23c:	0c 94 7e 04 	jmp	0x8fc	; 0x8fc <gpio_read_pin>

00000240 <can_send_done>:
canMsg snd_message;

unsigned char dummy_data[8] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
unsigned char first_byte, second_byte;

static void can_send_done(void) {
     240:	0f 93       	push	r16
     242:	1f 93       	push	r17
     244:	cf 93       	push	r28
     246:	df 93       	push	r29
     248:	cd b7       	in	r28, 0x3d	; 61
     24a:	de b7       	in	r29, 0x3e	; 62
     24c:	28 97       	sbiw	r28, 0x08	; 8
     24e:	0f b6       	in	r0, 0x3f	; 63
     250:	f8 94       	cli
     252:	de bf       	out	0x3e, r29	; 62
     254:	0f be       	out	0x3f, r0	; 63
     256:	cd bf       	out	0x3d, r28	; 61
	
	unsigned char ready_data[8];

	ready_data[0] = 1;
			 
	memcpy(snd_message.data, ready_data, 8);
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	89 83       	std	Y+1, r24	; 0x01
     25c:	88 e0       	ldi	r24, 0x08	; 8
     25e:	fe 01       	movw	r30, r28
     260:	31 96       	adiw	r30, 0x01	; 1
     262:	a1 ea       	ldi	r26, 0xA1	; 161
     264:	b3 e0       	ldi	r27, 0x03	; 3
     266:	01 90       	ld	r0, Z+
     268:	0d 92       	st	X+, r0
     26a:	8a 95       	dec	r24
     26c:	e1 f7       	brne	.-8      	; 0x266 <can_send_done+0x26>
	snd_message.msgIde = MAIN_BOARD_CAN_ID;
     26e:	84 e0       	ldi	r24, 0x04	; 4
     270:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <snd_message+0x8>
     274:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <snd_message+0x9>

	if(CAN_write(snd_message) == 1) {
     278:	00 91 a1 03 	lds	r16, 0x03A1	; 0x8003a1 <snd_message>
     27c:	10 91 a2 03 	lds	r17, 0x03A2	; 0x8003a2 <snd_message+0x1>
     280:	20 91 a3 03 	lds	r18, 0x03A3	; 0x8003a3 <snd_message+0x2>
     284:	30 91 a4 03 	lds	r19, 0x03A4	; 0x8003a4 <snd_message+0x3>
     288:	40 91 a5 03 	lds	r20, 0x03A5	; 0x8003a5 <snd_message+0x4>
     28c:	50 91 a6 03 	lds	r21, 0x03A6	; 0x8003a6 <snd_message+0x5>
     290:	60 91 a7 03 	lds	r22, 0x03A7	; 0x8003a7 <snd_message+0x6>
     294:	70 91 a8 03 	lds	r23, 0x03A8	; 0x8003a8 <snd_message+0x7>
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	0e 94 95 03 	call	0x72a	; 0x72a <CAN_write>
		// success
	}
} 
     29e:	28 96       	adiw	r28, 0x08	; 8
     2a0:	0f b6       	in	r0, 0x3f	; 63
     2a2:	f8 94       	cli
     2a4:	de bf       	out	0x3e, r29	; 62
     2a6:	0f be       	out	0x3f, r0	; 63
     2a8:	cd bf       	out	0x3d, r28	; 61
     2aa:	df 91       	pop	r29
     2ac:	cf 91       	pop	r28
     2ae:	1f 91       	pop	r17
     2b0:	0f 91       	pop	r16
     2b2:	08 95       	ret

000002b4 <init_stepper>:
 * Function:    unsigned char init_stepper()
 * Description: init the stepper pins
 */
unsigned char init_stepper(void) {
    
    gpio_register_pin(PIN_STEPPER1_DIR, GPIO_DIRECTION_OUTPUT, false);
     2b4:	40 e0       	ldi	r20, 0x00	; 0
     2b6:	61 e0       	ldi	r22, 0x01	; 1
     2b8:	80 e1       	ldi	r24, 0x10	; 16
     2ba:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <gpio_register_pin>
    gpio_register_pin(PIN_STEPPER1_STEP, GPIO_DIRECTION_OUTPUT, false);
     2be:	40 e0       	ldi	r20, 0x00	; 0
     2c0:	61 e0       	ldi	r22, 0x01	; 1
     2c2:	81 e1       	ldi	r24, 0x11	; 17
     2c4:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <gpio_register_pin>
    gpio_register_pin(PIN_STEPPER1_EN, GPIO_DIRECTION_OUTPUT, false);
     2c8:	40 e0       	ldi	r20, 0x00	; 0
     2ca:	61 e0       	ldi	r22, 0x01	; 1
     2cc:	82 e1       	ldi	r24, 0x12	; 18
     2ce:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <gpio_register_pin>

    gpio_register_pin(PIN_STEPPER2_DIR, GPIO_DIRECTION_OUTPUT, false);
     2d2:	40 e0       	ldi	r20, 0x00	; 0
     2d4:	61 e0       	ldi	r22, 0x01	; 1
     2d6:	83 e1       	ldi	r24, 0x13	; 19
     2d8:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <gpio_register_pin>
    gpio_register_pin(PIN_STEPPER2_STEP, GPIO_DIRECTION_OUTPUT, false);
     2dc:	40 e0       	ldi	r20, 0x00	; 0
     2de:	61 e0       	ldi	r22, 0x01	; 1
     2e0:	84 e1       	ldi	r24, 0x14	; 20
     2e2:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <gpio_register_pin>
    gpio_register_pin(PIN_STEPPER2_EN, GPIO_DIRECTION_OUTPUT, false);
     2e6:	40 e0       	ldi	r20, 0x00	; 0
     2e8:	61 e0       	ldi	r22, 0x01	; 1
     2ea:	85 e1       	ldi	r24, 0x15	; 21
     2ec:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <gpio_register_pin>
    /*enable_stepper(HIGH, 1);
    enable_stepper(HIGH, 2);*/

    return 1;

} // end of init_stepper()
     2f0:	81 e0       	ldi	r24, 0x01	; 1
     2f2:	08 95       	ret

000002f4 <enable_stepper>:
 *  Function:       void enable_stepper(uint8_t state, uint8_t num)
 *  Description:    enable or disable the stepper driver
 */
void enable_stepper(uint8_t state, uint8_t num) {

    gpio_write_pin(rtn_en(num), state);
     2f4:	91 e0       	ldi	r25, 0x01	; 1
     2f6:	81 11       	cpse	r24, r1
     2f8:	01 c0       	rjmp	.+2      	; 0x2fc <enable_stepper+0x8>
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	85 e1       	ldi	r24, 0x15	; 21
     2fe:	61 30       	cpi	r22, 0x01	; 1
     300:	09 f4       	brne	.+2      	; 0x304 <enable_stepper+0x10>
     302:	82 e1       	ldi	r24, 0x12	; 18
     304:	69 2f       	mov	r22, r25
     306:	0c 94 4f 04 	jmp	0x89e	; 0x89e <gpio_write_pin>

0000030a <set_rpm_stepper>:
 * Function:        void set_rpm_stepper(unsigned int rpm, uint8_t num)
 * Description:     set the rpm of the stepper
 */
void set_rpm_stepper(int rpm, uint8_t num) {

    stepper_rpm[num-1] = rpm;
     30a:	26 2f       	mov	r18, r22
     30c:	21 50       	subi	r18, 0x01	; 1
     30e:	33 0b       	sbc	r19, r19
     310:	f9 01       	movw	r30, r18
     312:	ee 0f       	add	r30, r30
     314:	ff 1f       	adc	r31, r31
     316:	e0 5f       	subi	r30, 0xF0	; 240
     318:	fe 4f       	sbci	r31, 0xFE	; 254
     31a:	91 83       	std	Z+1, r25	; 0x01
     31c:	80 83       	st	Z, r24

} // end of set_rpm_stepper()
     31e:	08 95       	ret

00000320 <move_stepper>:

/*
 * Function:        void move_stepper(unsigned int steps, unsigned char dir, uint8_t num)
 * Description:     move the stepper for steps at a certain direction 
 */
void move_stepper(unsigned int steps, unsigned char dir, uint8_t num) {
     320:	8f 92       	push	r8
     322:	9f 92       	push	r9
     324:	af 92       	push	r10
     326:	bf 92       	push	r11
     328:	df 92       	push	r13
     32a:	ef 92       	push	r14
     32c:	ff 92       	push	r15
     32e:	0f 93       	push	r16
     330:	1f 93       	push	r17
     332:	cf 93       	push	r28
     334:	df 93       	push	r29
     336:	8c 01       	movw	r16, r24
     338:	d6 2f       	mov	r29, r22
     33a:	c4 2f       	mov	r28, r20

    Delay between each step for the rpm and step:
    60000/(RPM*STEP) = x, where x is the time between each step

    */
    int time_calculate = 60000 / (stepper_rpm[num-1] * steps);
     33c:	84 2f       	mov	r24, r20
     33e:	81 50       	subi	r24, 0x01	; 1
     340:	99 0b       	sbc	r25, r25
     342:	fc 01       	movw	r30, r24
     344:	ee 0f       	add	r30, r30
     346:	ff 1f       	adc	r31, r31
     348:	e0 5f       	subi	r30, 0xF0	; 240
     34a:	fe 4f       	sbci	r31, 0xFE	; 254
     34c:	80 81       	ld	r24, Z
     34e:	91 81       	ldd	r25, Z+1	; 0x01
     350:	08 9f       	mul	r16, r24
     352:	90 01       	movw	r18, r0
     354:	09 9f       	mul	r16, r25
     356:	30 0d       	add	r19, r0
     358:	18 9f       	mul	r17, r24
     35a:	30 0d       	add	r19, r0
     35c:	11 24       	eor	r1, r1
     35e:	50 e0       	ldi	r21, 0x00	; 0
     360:	40 e0       	ldi	r20, 0x00	; 0
     362:	60 e6       	ldi	r22, 0x60	; 96
     364:	7a ee       	ldi	r23, 0xEA	; 234
     366:	80 e0       	ldi	r24, 0x00	; 0
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__divmodsi4>
     36e:	49 01       	movw	r8, r18

    gpio_write_pin(rtn_dir(num), dir);
     370:	61 e0       	ldi	r22, 0x01	; 1
     372:	d1 11       	cpse	r29, r1
     374:	01 c0       	rjmp	.+2      	; 0x378 <move_stepper+0x58>
     376:	60 e0       	ldi	r22, 0x00	; 0
     378:	83 e1       	ldi	r24, 0x13	; 19
     37a:	c1 30       	cpi	r28, 0x01	; 1
     37c:	09 f4       	brne	.+2      	; 0x380 <move_stepper+0x60>
     37e:	80 e1       	ldi	r24, 0x10	; 16
     380:	0e 94 4f 04 	call	0x89e	; 0x89e <gpio_write_pin>

    for(unsigned int i=0; i<steps; i++) {
     384:	21 e1       	ldi	r18, 0x11	; 17
     386:	d2 2e       	mov	r13, r18
     388:	c1 30       	cpi	r28, 0x01	; 1
     38a:	11 f0       	breq	.+4      	; 0x390 <move_stepper+0x70>
     38c:	94 e1       	ldi	r25, 0x14	; 20
     38e:	d9 2e       	mov	r13, r25
        gpio_write_pin(rtn_step(num), ON);
        delay(time_calculate/2);
     390:	e4 01       	movw	r28, r8
     392:	97 fc       	sbrc	r9, 7
     394:	21 96       	adiw	r28, 0x01	; 1
     396:	d5 95       	asr	r29
     398:	c7 95       	ror	r28
    for(unsigned int i=0; i<steps; i++) {
     39a:	f1 2c       	mov	r15, r1
     39c:	e1 2c       	mov	r14, r1
     39e:	e0 16       	cp	r14, r16
     3a0:	f1 06       	cpc	r15, r17
     3a2:	61 f4       	brne	.+24     	; 0x3bc <move_stepper+0x9c>
        gpio_write_pin(rtn_step(num), OFF);
        delay(time_calculate/2);
    }
} // end of move_stepper()
     3a4:	df 91       	pop	r29
     3a6:	cf 91       	pop	r28
     3a8:	1f 91       	pop	r17
     3aa:	0f 91       	pop	r16
     3ac:	ff 90       	pop	r15
     3ae:	ef 90       	pop	r14
     3b0:	df 90       	pop	r13
     3b2:	bf 90       	pop	r11
     3b4:	af 90       	pop	r10
     3b6:	9f 90       	pop	r9
     3b8:	8f 90       	pop	r8
     3ba:	08 95       	ret
        gpio_write_pin(rtn_step(num), ON);
     3bc:	61 e0       	ldi	r22, 0x01	; 1
     3be:	8d 2d       	mov	r24, r13
     3c0:	0e 94 4f 04 	call	0x89e	; 0x89e <gpio_write_pin>
        delay(time_calculate/2);
     3c4:	ce 01       	movw	r24, r28
     3c6:	0e 94 0c 01 	call	0x218	; 0x218 <delay>
        gpio_write_pin(rtn_step(num), OFF);
     3ca:	60 e0       	ldi	r22, 0x00	; 0
     3cc:	8d 2d       	mov	r24, r13
     3ce:	0e 94 4f 04 	call	0x89e	; 0x89e <gpio_write_pin>
        delay(time_calculate/2);
     3d2:	ce 01       	movw	r24, r28
     3d4:	0e 94 0c 01 	call	0x218	; 0x218 <delay>
    for(unsigned int i=0; i<steps; i++) {
     3d8:	9f ef       	ldi	r25, 0xFF	; 255
     3da:	e9 1a       	sub	r14, r25
     3dc:	f9 0a       	sbc	r15, r25
     3de:	df cf       	rjmp	.-66     	; 0x39e <move_stepper+0x7e>

000003e0 <USART0_init>:
 */
void USART0_init(uint32_t baud)
{
	uint32_t temp_baud = 0;

	temp_baud = (F_CPU / (8 * baud)) - 1;
     3e0:	9b 01       	movw	r18, r22
     3e2:	ac 01       	movw	r20, r24
     3e4:	83 e0       	ldi	r24, 0x03	; 3
     3e6:	22 0f       	add	r18, r18
     3e8:	33 1f       	adc	r19, r19
     3ea:	44 1f       	adc	r20, r20
     3ec:	55 1f       	adc	r21, r21
     3ee:	8a 95       	dec	r24
     3f0:	d1 f7       	brne	.-12     	; 0x3e6 <USART0_init+0x6>
     3f2:	60 e0       	ldi	r22, 0x00	; 0
     3f4:	74 e2       	ldi	r23, 0x24	; 36
     3f6:	84 ef       	ldi	r24, 0xF4	; 244
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__udivmodsi4>
     3fe:	ba 01       	movw	r22, r20
     400:	a9 01       	movw	r20, r18
     402:	41 50       	subi	r20, 0x01	; 1
     404:	51 09       	sbc	r21, r1
     406:	61 09       	sbc	r22, r1
     408:	71 09       	sbc	r23, r1

	//Set baud rate
	UBRR0H = (unsigned char) (temp_baud >> 8);
     40a:	bb 27       	eor	r27, r27
     40c:	a7 2f       	mov	r26, r23
     40e:	96 2f       	mov	r25, r22
     410:	85 2f       	mov	r24, r21
     412:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char) temp_baud;
     416:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	UCSR0A |= (1 << U2X0);
     41a:	e0 ec       	ldi	r30, 0xC0	; 192
     41c:	f0 e0       	ldi	r31, 0x00	; 0
     41e:	80 81       	ld	r24, Z
     420:	82 60       	ori	r24, 0x02	; 2
     422:	80 83       	st	Z, r24

	UCSR0B |= (1 << RXEN0);							// Disable RX
     424:	e1 ec       	ldi	r30, 0xC1	; 193
     426:	f0 e0       	ldi	r31, 0x00	; 0
     428:	80 81       	ld	r24, Z
     42a:	80 61       	ori	r24, 0x10	; 16
     42c:	80 83       	st	Z, r24

	DDRE |= (1 << PE1);								// Set TX as output
     42e:	69 9a       	sbi	0x0d, 1	; 13
	DDRE &= ~(1 << PE0);							// Set RX as input
     430:	68 98       	cbi	0x0d, 0	; 13

	UCSR0B |= (1 << TXEN0);							//Enable TX
     432:	80 81       	ld	r24, Z
     434:	88 60       	ori	r24, 0x08	; 8
     436:	80 83       	st	Z, r24
	UCSR0B &= ~(1 << UCSZ02);						//Data size
     438:	80 81       	ld	r24, Z
     43a:	8b 7f       	andi	r24, 0xFB	; 251
     43c:	80 83       	st	Z, r24

	// async, no parity, 1 stop bit, 8 bit data size
	UCSR0C &= ~(1 << 7);
     43e:	e2 ec       	ldi	r30, 0xC2	; 194
     440:	f0 e0       	ldi	r31, 0x00	; 0
     442:	80 81       	ld	r24, Z
     444:	8f 77       	andi	r24, 0x7F	; 127
     446:	80 83       	st	Z, r24
	UCSR0C &= ~(1 << UMSEL0);
     448:	80 81       	ld	r24, Z
     44a:	8f 7b       	andi	r24, 0xBF	; 191
     44c:	80 83       	st	Z, r24
	UCSR0C &= ~(1 << UPM01) ;
     44e:	80 81       	ld	r24, Z
     450:	8f 7d       	andi	r24, 0xDF	; 223
     452:	80 83       	st	Z, r24
	UCSR0C &= ~(1 << UPM00);
     454:	80 81       	ld	r24, Z
     456:	8f 7e       	andi	r24, 0xEF	; 239
     458:	80 83       	st	Z, r24
	UCSR0C &= ~(1 << USBS0);
     45a:	80 81       	ld	r24, Z
     45c:	87 7f       	andi	r24, 0xF7	; 247
     45e:	80 83       	st	Z, r24
	UCSR0C &= ~(1 << USBS0);
     460:	80 81       	ld	r24, Z
     462:	87 7f       	andi	r24, 0xF7	; 247
     464:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ01);
     466:	80 81       	ld	r24, Z
     468:	84 60       	ori	r24, 0x04	; 4
     46a:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ00);
     46c:	80 81       	ld	r24, Z
     46e:	82 60       	ori	r24, 0x02	; 2
     470:	80 83       	st	Z, r24

} // end of USART0_init()
     472:	08 95       	ret

00000474 <USART0_transmit>:
 *	Function: 		void USART0_transmit(unsigned char data)
 *  Description: 	transmit unsigned char through USART0
 */
void USART0_transmit(unsigned char data)
{
	while ( ! ( UCSR0A & (1<<UDRE0))); 				// Wait for empty transmit buffer
     474:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     478:	95 ff       	sbrs	r25, 5
     47a:	fc cf       	rjmp	.-8      	; 0x474 <USART0_transmit>

	UDR0 = data; 									// Put data into buffer, sends the data
     47c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

} // end of USART0_transmit()
     480:	08 95       	ret

00000482 <USART0_receive>:
 *	Function: 		unsigned char USART0_receive(void)
 *  Description: 	receive data through USART0
 */
unsigned char USART0_receive(void)
{
	while ( ! (UCSR0A & (1<<RXC0)));				// Wait for data to be received
     482:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     486:	87 ff       	sbrs	r24, 7
     488:	fc cf       	rjmp	.-8      	; 0x482 <USART0_receive>

	return UDR0;									// return it
     48a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
} // end of USART0_receive()
     48e:	08 95       	ret

00000490 <USART0_string>:
/*
 *	Function: 		void USART0_string(char *s)
 *  Description: 	transmit a string through USART0
 */
void USART0_string(char *s)
{
     490:	cf 93       	push	r28
     492:	df 93       	push	r29
     494:	ec 01       	movw	r28, r24
   	while (*s != 0x00)
     496:	89 91       	ld	r24, Y+
     498:	81 11       	cpse	r24, r1
     49a:	03 c0       	rjmp	.+6      	; 0x4a2 <USART0_string+0x12>
   	{
		USART0_transmit(*s);
      	s++;
   	}
} // end of USART0_string()
     49c:	df 91       	pop	r29
     49e:	cf 91       	pop	r28
     4a0:	08 95       	ret
		USART0_transmit(*s);
     4a2:	0e 94 3a 02 	call	0x474	; 0x474 <USART0_transmit>
      	s++;
     4a6:	f7 cf       	rjmp	.-18     	; 0x496 <USART0_string+0x6>

000004a8 <debug_printf>:
 */
void debug_printf(char *s) {
	#ifdef DEBUG
		USART0_string(*s);
	#endif
} // end of debug_printf()
     4a8:	08 95       	ret

000004aa <debug_printf_num>:
	#ifdef DEBUG
		char converted[30];
		itoa(num, msg, 10);
		USART0_string(converted);
	#endif
     4aa:	08 95       	ret

000004ac <__vector_18>:
static volatile unsigned char rxWrIndex = 0;
static volatile unsigned char rxCounter = 0;

// Interrupt Service Routine
ISR(CANIT_vect)
{
     4ac:	0f 92       	push	r0
     4ae:	0f b6       	in	r0, 0x3f	; 63
     4b0:	0f 92       	push	r0
     4b2:	1f 92       	push	r1
     4b4:	11 24       	eor	r1, r1
     4b6:	2f 93       	push	r18
     4b8:	2b b7       	in	r18, 0x3b	; 59
     4ba:	2f 93       	push	r18
     4bc:	3f 93       	push	r19
     4be:	4f 93       	push	r20
     4c0:	5f 93       	push	r21
     4c2:	8f 93       	push	r24
     4c4:	9f 93       	push	r25
     4c6:	af 93       	push	r26
     4c8:	bf 93       	push	r27
     4ca:	ef 93       	push	r30
     4cc:	ff 93       	push	r31
	unsigned char tempPage = CANPAGE;
     4ce:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     4d2:	80 e0       	ldi	r24, 0x00	; 0
	unsigned char ch;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
	{
		CANPAGE = ch << 4;
     4d4:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

		// proveravam da li je uspesno primljen podatak (ako je MOb bio podesen kao prijemnik)
		// PRIJEMNI MOb- ovi uvek ostaju prijemni!
		if( (CANSTMOB >> RXOK) & 0x01)	//receive interrupt
     4d8:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     4dc:	95 ff       	sbrs	r25, 5
     4de:	51 c0       	rjmp	.+162    	; 0x582 <__vector_18+0xd6>
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
     4e0:	80 e8       	ldi	r24, 0x80	; 128
     4e2:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
			CANSTMOB &= ~(1 << RXOK); // resetujem flag
     4e6:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     4ea:	8f 7d       	andi	r24, 0xDF	; 223
     4ec:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	80 e0       	ldi	r24, 0x00	; 0

			for(unsigned char i = 0; i < 8; i++)
				rxBuffer[rxWrIndex].data[i] = CANMSG;
     4f4:	ea e0       	ldi	r30, 0x0A	; 10
     4f6:	40 91 9f 01 	lds	r20, 0x019F	; 0x80019f <rxWrIndex>
     4fa:	20 91 fa 00 	lds	r18, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
     4fe:	dc 01       	movw	r26, r24
     500:	e4 9f       	mul	r30, r20
     502:	a0 0d       	add	r26, r0
     504:	b1 1d       	adc	r27, r1
     506:	11 24       	eor	r1, r1
     508:	af 55       	subi	r26, 0x5F	; 95
     50a:	be 4f       	sbci	r27, 0xFE	; 254
     50c:	2c 93       	st	X, r18
     50e:	01 96       	adiw	r24, 0x01	; 1
			for(unsigned char i = 0; i < 8; i++)
     510:	88 30       	cpi	r24, 0x08	; 8
     512:	91 05       	cpc	r25, r1
     514:	81 f7       	brne	.-32     	; 0x4f6 <__vector_18+0x4a>
			//altUart1Write(rxBuffer[rxWrIndex].data[0]);

			rxBuffer[rxWrIndex].msgIde = (CANIDT2 >> 5) | (CANIDT1 << 3);
     516:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     51a:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     51e:	40 91 9f 01 	lds	r20, 0x019F	; 0x80019f <rxWrIndex>
     522:	22 95       	swap	r18
     524:	26 95       	lsr	r18
     526:	27 70       	andi	r18, 0x07	; 7
     528:	58 e0       	ldi	r21, 0x08	; 8
     52a:	85 9f       	mul	r24, r21
     52c:	c0 01       	movw	r24, r0
     52e:	11 24       	eor	r1, r1
     530:	82 2b       	or	r24, r18
     532:	e4 9f       	mul	r30, r20
     534:	f0 01       	movw	r30, r0
     536:	11 24       	eor	r1, r1
     538:	ef 55       	subi	r30, 0x5F	; 95
     53a:	fe 4f       	sbci	r31, 0xFE	; 254
     53c:	91 87       	std	Z+9, r25	; 0x09
     53e:	80 87       	std	Z+8, r24	; 0x08

			if(++rxWrIndex == RX_BUFFER_SIZE)
     540:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <rxWrIndex>
     544:	8f 5f       	subi	r24, 0xFF	; 255
     546:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <rxWrIndex>
     54a:	82 33       	cpi	r24, 0x32	; 50
     54c:	11 f4       	brne	.+4      	; 0x552 <__vector_18+0xa6>
				rxWrIndex = 0;
     54e:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <rxWrIndex>

			rxCounter++;
     552:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <rxCounter>
     556:	8f 5f       	subi	r24, 0xFF	; 255
     558:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <rxCounter>

			break;
		}
	}

	CANPAGE = tempPage;
     55c:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	//CANGIT = CANGIT; // jako retardirano
}
     560:	ff 91       	pop	r31
     562:	ef 91       	pop	r30
     564:	bf 91       	pop	r27
     566:	af 91       	pop	r26
     568:	9f 91       	pop	r25
     56a:	8f 91       	pop	r24
     56c:	5f 91       	pop	r21
     56e:	4f 91       	pop	r20
     570:	3f 91       	pop	r19
     572:	2f 91       	pop	r18
     574:	2b bf       	out	0x3b, r18	; 59
     576:	2f 91       	pop	r18
     578:	1f 90       	pop	r1
     57a:	0f 90       	pop	r0
     57c:	0f be       	out	0x3f, r0	; 63
     57e:	0f 90       	pop	r0
     580:	18 95       	reti
		if( (CANSTMOB >> TXOK) & 0x01)	//transmit interrupt
     582:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     586:	96 ff       	sbrs	r25, 6
     588:	08 c0       	rjmp	.+16     	; 0x59a <__vector_18+0xee>
			CANCDMOB = 0; // disable mob
     58a:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
			CANSTMOB &= ~(1 << TXOK); // resetujem flag
     58e:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     592:	8f 7b       	andi	r24, 0xBF	; 191
     594:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
			break;
     598:	e1 cf       	rjmp	.-62     	; 0x55c <__vector_18+0xb0>
     59a:	80 5f       	subi	r24, 0xF0	; 240
	for(ch = 0; ch < 15; ch++)
     59c:	80 3f       	cpi	r24, 0xF0	; 240
     59e:	09 f0       	breq	.+2      	; 0x5a2 <__vector_18+0xf6>
     5a0:	99 cf       	rjmp	.-206    	; 0x4d4 <__vector_18+0x28>
     5a2:	dc cf       	rjmp	.-72     	; 0x55c <__vector_18+0xb0>

000005a4 <CAN_Init>:
{
	unsigned char ch;
	unsigned char data;

	// Reset the CAN controller
	CANGCON = 0x01;
     5a4:	81 e0       	ldi	r24, 0x01	; 1
     5a6:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     5aa:	80 e0       	ldi	r24, 0x00	; 0

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
	{
		CANPAGE = ch << 4;
     5ac:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

		CANSTMOB = 0;
     5b0:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
		CANCDMOB = 0;
     5b4:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

		CANIDT1 = 0;
     5b8:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		CANIDT2 = 0;
     5bc:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT3 = 0;
     5c0:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		CANIDT4 = 0;
     5c4:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		CANIDM1 = 0;
     5c8:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
		CANIDM2 = 0;
     5cc:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
		CANIDM3 = 0;
     5d0:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
		CANIDM4 = 0;
     5d4:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for (data = 0; data < 8; data++)
			CANMSG = 0;
     5d8:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
     5dc:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
     5e0:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
     5e4:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
     5e8:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
     5ec:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
     5f0:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
     5f4:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
     5f8:	80 5f       	subi	r24, 0xF0	; 240
	for(ch = 0; ch < 15; ch++)
     5fa:	80 3f       	cpi	r24, 0xF0	; 240
     5fc:	b9 f6       	brne	.-82     	; 0x5ac <CAN_Init+0x8>
	}


	// Enable the CAN controller
	CANGCON = 0x02;
     5fe:	82 e0       	ldi	r24, 0x02	; 2
     600:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
        {0x06, 0x0C, 0x37},                //< -- 250Kb/s, 16x Tscl, sampling at 75%
        {0x06, 0x04, 0x13},                //< -- 500Kb/s,  8x Tscl, sampling at 75%
        {0x02, 0x04, 0x13}                 //< --  1 Mb/s,  8x Tscl, sampling at 75% 
	*/

	CANBT1 = 0x12;
     604:	82 e1       	ldi	r24, 0x12	; 18
     606:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2 = 0x0C;
     60a:	8c e0       	ldi	r24, 0x0C	; 12
     60c:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3 = 0x37;
     610:	87 e3       	ldi	r24, 0x37	; 55
     612:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>

	/// Sjw je podesen na 1... 1 + 5 + 6 + 8 = 20
	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 100kbps  **********************************/

	CANTCON = 0; // preskaler za CAN timer-> ne koristimo ga pa ova vrednost nije vazna
     616:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

	// ukljucujem interrupte- ENIT-> Enable All Interrupts
	// ENRX-> Enable RX interrupt
	// ENTX-> Enable TX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);
     61a:	80 eb       	ldi	r24, 0xB0	; 176
     61c:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
	// interrupti svih MOb- ova su ukljuceni
	CANIE1 = 0xFF >> 1; // glupo govno trazi da MSB mora biti nula prilikom upisivanja u registar
     620:	8f e7       	ldi	r24, 0x7F	; 127
     622:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	CANIE2 = 0xFF;
     626:	8f ef       	ldi	r24, 0xFF	; 255
     628:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>

	//sei();
}
     62c:	08 95       	ret

0000062e <CAN_InitRxMob>:
* Return Value      : char info da li je inicijalizacija uspela
*********************************************************************************/
char CAN_InitRxMob(unsigned int ide)
{
	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     62e:	50 91 ed 00 	lds	r21, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     632:	20 91 d9 00 	lds	r18, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
     636:	24 fd       	sbrc	r18, 4
     638:	fc cf       	rjmp	.-8      	; 0x632 <CAN_InitRxMob+0x4>
     63a:	20 91 d9 00 	lds	r18, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
     63e:	42 2f       	mov	r20, r18
     640:	48 70       	andi	r20, 0x08	; 8
     642:	23 fd       	sbrc	r18, 3
     644:	f6 cf       	rjmp	.-20     	; 0x632 <CAN_InitRxMob+0x4>
     646:	20 e0       	ldi	r18, 0x00	; 0

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	// uzimam ga
	for(ch = 0; ch < 15; ch++)
	{
		CANPAGE = ch << 4;
     648:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
     64c:	30 91 ef 00 	lds	r19, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     650:	32 95       	swap	r19
     652:	36 95       	lsr	r19
     654:	36 95       	lsr	r19
     656:	33 70       	andi	r19, 0x03	; 3
     658:	31 f0       	breq	.+12     	; 0x666 <CAN_InitRxMob+0x38>
			continue;
     65a:	20 5f       	subi	r18, 0xF0	; 240
	for(ch = 0; ch < 15; ch++)
     65c:	20 3f       	cpi	r18, 0xF0	; 240
     65e:	a1 f7       	brne	.-24     	; 0x648 <CAN_InitRxMob+0x1a>
		CANPAGE = tempPage;

		return 1;
	}

	CANPAGE = tempPage;
     660:	50 93 ed 00 	sts	0x00ED, r21	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

	return 0;
     664:	20 c0       	rjmp	.+64     	; 0x6a6 <CAN_InitRxMob+0x78>
		CANCDMOB = (1 << DLC0) | (1 << DLC1) | (1 << DLC2) | (1 << DLC3);
     666:	2f e0       	ldi	r18, 0x0F	; 15
     668:	20 93 ef 00 	sts	0x00EF, r18	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		CANIDT1 = (0x00FF & ide) >> 3;
     66c:	9c 01       	movw	r18, r24
     66e:	93 e0       	ldi	r25, 0x03	; 3
     670:	36 95       	lsr	r19
     672:	27 95       	ror	r18
     674:	9a 95       	dec	r25
     676:	e1 f7       	brne	.-8      	; 0x670 <CAN_InitRxMob+0x42>
     678:	2f 71       	andi	r18, 0x1F	; 31
     67a:	20 93 f3 00 	sts	0x00F3, r18	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		CANIDT2 = (ide & 0x00FF) << 5;
     67e:	82 95       	swap	r24
     680:	88 0f       	add	r24, r24
     682:	80 7e       	andi	r24, 0xE0	; 224
     684:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDM2 = 0x07 << 5;
     688:	80 ee       	ldi	r24, 0xE0	; 224
     68a:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
		CANIDM1 = 0xFF;
     68e:	8f ef       	ldi	r24, 0xFF	; 255
     690:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
		CANCDMOB |= (1 << CONMOB1);
     694:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     698:	80 68       	ori	r24, 0x80	; 128
     69a:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		sei();
     69e:	78 94       	sei
		CANPAGE = tempPage;
     6a0:	50 93 ed 00 	sts	0x00ED, r21	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		return 1;
     6a4:	41 e0       	ldi	r20, 0x01	; 1
}
     6a6:	84 2f       	mov	r24, r20
     6a8:	08 95       	ret

000006aa <CAN_checkRX>:
* Parameters        : None
* Return Value      : char info da li ima primljenih podataka
*********************************************************************************/
char CAN_checkRX(void)
{
	if(rxCounter)
     6aa:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <rxCounter>
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	91 11       	cpse	r25, r1
     6b2:	01 c0       	rjmp	.+2      	; 0x6b6 <CAN_checkRX+0xc>
     6b4:	80 e0       	ldi	r24, 0x00	; 0
		return 1;

	return 0;
}
     6b6:	08 95       	ret

000006b8 <CAN_read>:
					  na podatak.
* Parameters        : canMsg *rxData
* Return Value      : void
*********************************************************************************/
void CAN_read(canMsg *rxData)
{
     6b8:	cf 93       	push	r28
     6ba:	df 93       	push	r29
	// sve dok ne stigne neki podatak ostajem u funkciji

	// kako je task realizovan ovo je nepotrebno ali neka stoji
	while(rxCounter == 0);
     6bc:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <rxCounter>
     6c0:	22 23       	and	r18, r18
     6c2:	e1 f3       	breq	.-8      	; 0x6bc <CAN_read+0x4>
	cli();
     6c4:	f8 94       	cli
	//nema potrebe da iskljucujemo multitasking zato sto nema opasnosti da cu primiti pogresan podatak-> organizovano je kao FIFO

	// upisujem osam bajtova u prosledjeni bafer( argument funkcije, prenos po adresi)
	for(unsigned char i = 0; i < 8; i++)
     6c6:	ec 01       	movw	r28, r24
	cli();
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	20 e0       	ldi	r18, 0x00	; 0
		rxData->data[i] = rxBuffer[rxRdIndex].data[i];
     6cc:	ea e0       	ldi	r30, 0x0A	; 10
     6ce:	40 91 a0 01 	lds	r20, 0x01A0	; 0x8001a0 <rxRdIndex>
     6d2:	d9 01       	movw	r26, r18
     6d4:	e4 9f       	mul	r30, r20
     6d6:	a0 0d       	add	r26, r0
     6d8:	b1 1d       	adc	r27, r1
     6da:	11 24       	eor	r1, r1
     6dc:	af 55       	subi	r26, 0x5F	; 95
     6de:	be 4f       	sbci	r27, 0xFE	; 254
     6e0:	4c 91       	ld	r20, X
     6e2:	49 93       	st	Y+, r20
     6e4:	2f 5f       	subi	r18, 0xFF	; 255
     6e6:	3f 4f       	sbci	r19, 0xFF	; 255
	for(unsigned char i = 0; i < 8; i++)
     6e8:	28 30       	cpi	r18, 0x08	; 8
     6ea:	31 05       	cpc	r19, r1
     6ec:	81 f7       	brne	.-32     	; 0x6ce <CAN_read+0x16>

	rxData->msgIde = rxBuffer[rxRdIndex].msgIde;
     6ee:	20 91 a0 01 	lds	r18, 0x01A0	; 0x8001a0 <rxRdIndex>
     6f2:	e2 9f       	mul	r30, r18
     6f4:	f0 01       	movw	r30, r0
     6f6:	11 24       	eor	r1, r1
     6f8:	ef 55       	subi	r30, 0x5F	; 95
     6fa:	fe 4f       	sbci	r31, 0xFE	; 254
     6fc:	20 85       	ldd	r18, Z+8	; 0x08
     6fe:	31 85       	ldd	r19, Z+9	; 0x09
     700:	fc 01       	movw	r30, r24
     702:	31 87       	std	Z+9, r19	; 0x09
     704:	20 87       	std	Z+8, r18	; 0x08

	if(++rxRdIndex == RX_BUFFER_SIZE)
     706:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <rxRdIndex>
     70a:	8f 5f       	subi	r24, 0xFF	; 255
     70c:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <rxRdIndex>
     710:	82 33       	cpi	r24, 0x32	; 50
     712:	11 f4       	brne	.+4      	; 0x718 <CAN_read+0x60>
		rxRdIndex = 0;
     714:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <rxRdIndex>


	rxCounter--;
     718:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <rxCounter>
     71c:	81 50       	subi	r24, 0x01	; 1
     71e:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <rxCounter>
	sei();
     722:	78 94       	sei
}
     724:	df 91       	pop	r29
     726:	cf 91       	pop	r28
     728:	08 95       	ret

0000072a <CAN_write>:
					  identifikator messIdentificator.
* Parameters        : canMgs txData
* Return Value      : void
*********************************************************************************/
char CAN_write(canMsg txData)
{
     72a:	0f 93       	push	r16
     72c:	1f 93       	push	r17
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
     732:	cd b7       	in	r28, 0x3d	; 61
     734:	de b7       	in	r29, 0x3e	; 62
     736:	2a 97       	sbiw	r28, 0x0a	; 10
     738:	0f b6       	in	r0, 0x3f	; 63
     73a:	f8 94       	cli
     73c:	de bf       	out	0x3e, r29	; 62
     73e:	0f be       	out	0x3f, r0	; 63
     740:	cd bf       	out	0x3d, r28	; 61
     742:	09 83       	std	Y+1, r16	; 0x01
     744:	1a 83       	std	Y+2, r17	; 0x02
     746:	2b 83       	std	Y+3, r18	; 0x03
     748:	3c 83       	std	Y+4, r19	; 0x04
     74a:	4d 83       	std	Y+5, r20	; 0x05
     74c:	5e 83       	std	Y+6, r21	; 0x06
     74e:	6f 83       	std	Y+7, r22	; 0x07
     750:	78 87       	std	Y+8, r23	; 0x08
     752:	89 87       	std	Y+9, r24	; 0x09
     754:	9a 87       	std	Y+10, r25	; 0x0a
     756:	29 85       	ldd	r18, Y+9	; 0x09
     758:	3a 85       	ldd	r19, Y+10	; 0x0a
	// Cekam sve dok je magistrala zauzeta-> da li je neophodno?
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     75a:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
     75e:	84 fd       	sbrc	r24, 4
     760:	fc cf       	rjmp	.-8      	; 0x75a <CAN_write+0x30>
     762:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
     766:	89 2f       	mov	r24, r25
     768:	88 70       	andi	r24, 0x08	; 8
     76a:	93 fd       	sbrc	r25, 3
     76c:	f6 cf       	rjmp	.-20     	; 0x75a <CAN_write+0x30>
	//taskENTER_CRITICAL();
	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     76e:	50 91 ed 00 	lds	r21, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     772:	90 e0       	ldi	r25, 0x00	; 0
	//taskENTER_CRITICAL();

	// trazim slobodan MOb
	for(ch = 0; ch < 15; ch++)
	{
		CANPAGE = ch << 4;
     774:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

		if(!(CANCDMOB >> 6))
     778:	40 91 ef 00 	lds	r20, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     77c:	42 95       	swap	r20
     77e:	46 95       	lsr	r20
     780:	46 95       	lsr	r20
     782:	43 70       	andi	r20, 0x03	; 3
     784:	71 f0       	breq	.+28     	; 0x7a2 <CAN_write+0x78>
     786:	90 5f       	subi	r25, 0xF0	; 240
	for(ch = 0; ch < 15; ch++)
     788:	90 3f       	cpi	r25, 0xF0	; 240
     78a:	a1 f7       	brne	.-24     	; 0x774 <CAN_write+0x4a>
	CANPAGE = tempPage;

	//taskEXIT_CRITICAL();

	return 1;
     78c:	2a 96       	adiw	r28, 0x0a	; 10
     78e:	0f b6       	in	r0, 0x3f	; 63
     790:	f8 94       	cli
     792:	de bf       	out	0x3e, r29	; 62
     794:	0f be       	out	0x3f, r0	; 63
     796:	cd bf       	out	0x3d, r28	; 61
     798:	df 91       	pop	r29
     79a:	cf 91       	pop	r28
     79c:	1f 91       	pop	r17
     79e:	0f 91       	pop	r16
     7a0:	08 95       	ret
	CANIDT2 = (txData.msgIde & 0x0F) << 5;
     7a2:	82 2f       	mov	r24, r18
     7a4:	82 95       	swap	r24
     7a6:	88 0f       	add	r24, r24
     7a8:	80 7e       	andi	r24, 0xE0	; 224
     7aa:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT1 = (txData.msgIde) >> 3;
     7ae:	83 e0       	ldi	r24, 0x03	; 3
     7b0:	36 95       	lsr	r19
     7b2:	27 95       	ror	r18
     7b4:	8a 95       	dec	r24
     7b6:	e1 f7       	brne	.-8      	; 0x7b0 <CAN_write+0x86>
     7b8:	20 93 f3 00 	sts	0x00F3, r18	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
	CANCDMOB = 8;
     7bc:	88 e0       	ldi	r24, 0x08	; 8
     7be:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
	for(unsigned char i = 0; i < 8; i++)
     7c2:	fe 01       	movw	r30, r28
     7c4:	31 96       	adiw	r30, 0x01	; 1
     7c6:	ce 01       	movw	r24, r28
     7c8:	09 96       	adiw	r24, 0x09	; 9
		CANMSG = txData.data[i];
     7ca:	21 91       	ld	r18, Z+
     7cc:	20 93 fa 00 	sts	0x00FA, r18	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
	for(unsigned char i = 0; i < 8; i++)
     7d0:	e8 17       	cp	r30, r24
     7d2:	f9 07       	cpc	r31, r25
     7d4:	d1 f7       	brne	.-12     	; 0x7ca <CAN_write+0xa0>
	CANCDMOB |= (1 << CONMOB0);
     7d6:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     7da:	80 64       	ori	r24, 0x40	; 64
     7dc:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
	CANPAGE = tempPage;
     7e0:	50 93 ed 00 	sts	0x00ED, r21	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	return 1;
     7e4:	81 e0       	ldi	r24, 0x01	; 1
     7e6:	d2 cf       	rjmp	.-92     	; 0x78c <CAN_write+0x62>

000007e8 <gpio_register_pin>:

/*
 * 	Function:    uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
 * 	Description: register the pin
 */
uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up) {
     7e8:	0f 93       	push	r16
     7ea:	1f 93       	push	r17
     7ec:	cf 93       	push	r28
     7ee:	df 93       	push	r29
     7f0:	18 2f       	mov	r17, r24
     7f2:	04 2f       	mov	r16, r20
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     7f4:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <gpio_inputs+0x2>
     7f8:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <gpio_inputs+0x3>
     7fc:	3d 97       	sbiw	r30, 0x0d	; 13
     7fe:	ef 01       	movw	r28, r30
     800:	2d 96       	adiw	r28, 0x0d	; 13
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	c4 31       	cpi	r28, 0x14	; 20
     806:	d8 07       	cpc	r29, r24
     808:	01 f5       	brne	.+64     	; 0x84a <gpio_register_pin+0x62>
    {
        if(input->pin == pin)
            return 1;
    }

	uint8_t port	= 1 + pin / 8;
     80a:	e1 2f       	mov	r30, r17
     80c:	e6 95       	lsr	r30
     80e:	e6 95       	lsr	r30
     810:	e6 95       	lsr	r30
     812:	ef 5f       	subi	r30, 0xFF	; 255
     814:	e1 50       	subi	r30, 0x01	; 1
     816:	ff 0b       	sbc	r31, r31
     818:	cf 01       	movw	r24, r30
     81a:	88 0f       	add	r24, r24
     81c:	99 1f       	adc	r25, r25
     81e:	e8 0f       	add	r30, r24
     820:	f9 1f       	adc	r31, r25
	uint8_t pin_reg = pin % 8;
     822:	21 2f       	mov	r18, r17
     824:	27 70       	andi	r18, 0x07	; 7
     826:	81 e0       	ldi	r24, 0x01	; 1
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	01 c0       	rjmp	.+2      	; 0x82e <gpio_register_pin+0x46>
     82c:	88 0f       	add	r24, r24
     82e:	2a 95       	dec	r18
     830:	ea f7       	brpl	.-6      	; 0x82c <gpio_register_pin+0x44>
     832:	28 2f       	mov	r18, r24
     834:	20 95       	com	r18
	if(direction == GPIO_DIRECTION_OUTPUT)
     836:	61 30       	cpi	r22, 0x01	; 1
     838:	a9 f4       	brne	.+42     	; 0x864 <gpio_register_pin+0x7c>
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) |= (1 << pin_reg);
     83a:	91 a1       	ldd	r25, Z+33	; 0x21
     83c:	89 2b       	or	r24, r25
     83e:	81 a3       	std	Z+33, r24	; 0x21
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) &= ~(1 << pin_reg);
     840:	82 a1       	ldd	r24, Z+34	; 0x22
     842:	82 23       	and	r24, r18
     844:	82 a3       	std	Z+34, r24	; 0x22

    input->pin       = pin;
    input->pulled_up = pulled_up;
    list_add(&input->list, &gpio_inputs);

    return 0;
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	04 c0       	rjmp	.+8      	; 0x852 <gpio_register_pin+0x6a>
        if(input->pin == pin)
     84a:	80 81       	ld	r24, Z
     84c:	81 13       	cpse	r24, r17
     84e:	06 c0       	rjmp	.+12     	; 0x85c <gpio_register_pin+0x74>
            return 1;
     850:	81 e0       	ldi	r24, 0x01	; 1
}
     852:	df 91       	pop	r29
     854:	cf 91       	pop	r28
     856:	1f 91       	pop	r17
     858:	0f 91       	pop	r16
     85a:	08 95       	ret
    list_for_each_entry(input, &gpio_inputs, list)
     85c:	07 84       	ldd	r0, Z+15	; 0x0f
     85e:	f0 89       	ldd	r31, Z+16	; 0x10
     860:	e0 2d       	mov	r30, r0
     862:	cc cf       	rjmp	.-104    	; 0x7fc <gpio_register_pin+0x14>
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) &= ~(1 << pin_reg);
     864:	81 a1       	ldd	r24, Z+33	; 0x21
     866:	82 23       	and	r24, r18
     868:	81 a3       	std	Z+33, r24	; 0x21
    input = (struct gpio_input*)malloc(sizeof(struct gpio_input));
     86a:	81 e1       	ldi	r24, 0x11	; 17
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	0e 94 18 08 	call	0x1030	; 0x1030 <malloc>
     872:	fc 01       	movw	r30, r24
    if(input == NULL)
     874:	00 97       	sbiw	r24, 0x00	; 0
     876:	61 f3       	breq	.-40     	; 0x850 <gpio_register_pin+0x68>
    input->pin       = pin;
     878:	10 83       	st	Z, r17
    input->pulled_up = pulled_up;
     87a:	01 83       	std	Z+1, r16	; 0x01
    list_add(&input->list, &gpio_inputs);
     87c:	0d 96       	adiw	r24, 0x0d	; 13
    prev->next = new;
}

static inline void list_add(struct list_head* new, struct list_head* head)
{
    __list_add(new, head, head->next);
     87e:	a0 91 16 01 	lds	r26, 0x0116	; 0x800116 <gpio_inputs+0x2>
     882:	b0 91 17 01 	lds	r27, 0x0117	; 0x800117 <gpio_inputs+0x3>
    next->prev = new;
     886:	11 96       	adiw	r26, 0x01	; 1
     888:	9c 93       	st	X, r25
     88a:	8e 93       	st	-X, r24
    new->next = next;
     88c:	b0 8b       	std	Z+16, r27	; 0x10
     88e:	a7 87       	std	Z+15, r26	; 0x0f
    new->prev = prev;
     890:	d6 87       	std	Z+14, r29	; 0x0e
     892:	c5 87       	std	Z+13, r28	; 0x0d
    prev->next = new;
     894:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <gpio_inputs+0x3>
     898:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <gpio_inputs+0x2>
     89c:	d4 cf       	rjmp	.-88     	; 0x846 <gpio_register_pin+0x5e>

0000089e <gpio_write_pin>:

/*
 * 	Function:    uint8_t gpio_write_pin(uint8_t pin, bool value)
 * 	Description: Write to a specific pin and the value of it
 */
uint8_t gpio_write_pin(uint8_t pin, bool value) {
     89e:	96 2f       	mov	r25, r22
	uint8_t port = 1 + pin / 8;
     8a0:	e8 2f       	mov	r30, r24
     8a2:	e6 95       	lsr	r30
     8a4:	e6 95       	lsr	r30
     8a6:	e6 95       	lsr	r30
     8a8:	ef 5f       	subi	r30, 0xFF	; 255
	pin = pin % 8;

	uint8_t temp = *(volatile uint32_t*)(0x22 + 3 * (port - 1));
     8aa:	e1 50       	subi	r30, 0x01	; 1
     8ac:	ff 0b       	sbc	r31, r31
     8ae:	9f 01       	movw	r18, r30
     8b0:	22 0f       	add	r18, r18
     8b2:	33 1f       	adc	r19, r19
     8b4:	e2 0f       	add	r30, r18
     8b6:	f3 1f       	adc	r31, r19
     8b8:	42 a1       	ldd	r20, Z+34	; 0x22
     8ba:	53 a1       	ldd	r21, Z+35	; 0x23
     8bc:	64 a1       	ldd	r22, Z+36	; 0x24
     8be:	75 a1       	ldd	r23, Z+37	; 0x25
	if(value != 0)
     8c0:	50 e0       	ldi	r21, 0x00	; 0
	pin = pin % 8;
     8c2:	87 70       	andi	r24, 0x07	; 7
     8c4:	21 e0       	ldi	r18, 0x01	; 1
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	02 c0       	rjmp	.+4      	; 0x8ce <gpio_write_pin+0x30>
     8ca:	22 0f       	add	r18, r18
     8cc:	33 1f       	adc	r19, r19
     8ce:	8a 95       	dec	r24
     8d0:	e2 f7       	brpl	.-8      	; 0x8ca <gpio_write_pin+0x2c>
	if(value != 0)
     8d2:	99 23       	and	r25, r25
     8d4:	69 f0       	breq	.+26     	; 0x8f0 <gpio_write_pin+0x52>
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp | (1 << pin);
     8d6:	ca 01       	movw	r24, r20
     8d8:	82 2b       	or	r24, r18
     8da:	93 2b       	or	r25, r19
	else
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp & ~(1 << pin);
     8dc:	09 2e       	mov	r0, r25
     8de:	00 0c       	add	r0, r0
     8e0:	aa 0b       	sbc	r26, r26
     8e2:	bb 0b       	sbc	r27, r27
     8e4:	82 a3       	std	Z+34, r24	; 0x22
     8e6:	93 a3       	std	Z+35, r25	; 0x23
     8e8:	a4 a3       	std	Z+36, r26	; 0x24
     8ea:	b5 a3       	std	Z+37, r27	; 0x25
	return 0;
}
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	08 95       	ret
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp & ~(1 << pin);
     8f0:	c9 01       	movw	r24, r18
     8f2:	80 95       	com	r24
     8f4:	90 95       	com	r25
     8f6:	84 23       	and	r24, r20
     8f8:	95 23       	and	r25, r21
     8fa:	f0 cf       	rjmp	.-32     	; 0x8dc <gpio_write_pin+0x3e>

000008fc <gpio_read_pin>:
 * 	Function:    uint8_t gpio_read_pin(uint8_t pin)
 * 	Description: reading the state of a pin
 */
uint8_t gpio_read_pin(uint8_t pin) {
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     8fc:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <gpio_inputs+0x2>
     900:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <gpio_inputs+0x3>
     904:	3d 97       	sbiw	r30, 0x0d	; 13
     906:	91 e0       	ldi	r25, 0x01	; 1
     908:	e7 30       	cpi	r30, 0x07	; 7
     90a:	f9 07       	cpc	r31, r25
     90c:	11 f4       	brne	.+4      	; 0x912 <gpio_read_pin+0x16>

            return state;
        }
    }

    return 1;
     90e:	81 e0       	ldi	r24, 0x01	; 1
}
     910:	08 95       	ret
        if(pin == input->pin)
     912:	90 81       	ld	r25, Z
     914:	98 13       	cpse	r25, r24
     916:	17 c0       	rjmp	.+46     	; 0x946 <gpio_read_pin+0x4a>
     918:	df 01       	movw	r26, r30
     91a:	12 96       	adiw	r26, 0x02	; 2
     91c:	cf 01       	movw	r24, r30
     91e:	0b 96       	adiw	r24, 0x0b	; 11
                if(input->values[i] != input->values[i + 1])
     920:	3d 91       	ld	r19, X+
     922:	2c 91       	ld	r18, X
     924:	32 17       	cp	r19, r18
     926:	11 f0       	breq	.+4      	; 0x92c <gpio_read_pin+0x30>
                    return input->previous_state;
     928:	84 85       	ldd	r24, Z+12	; 0x0c
     92a:	08 95       	ret
            while(i < GPIO_DEBOUNCE_COUNT - 1)
     92c:	a8 17       	cp	r26, r24
     92e:	b9 07       	cpc	r27, r25
     930:	b9 f7       	brne	.-18     	; 0x920 <gpio_read_pin+0x24>
            uint8_t state = input->pulled_up == false ? (input->values[0]) : !(input->values[0]);
     932:	82 81       	ldd	r24, Z+2	; 0x02
     934:	91 81       	ldd	r25, Z+1	; 0x01
     936:	99 23       	and	r25, r25
     938:	21 f0       	breq	.+8      	; 0x942 <gpio_read_pin+0x46>
     93a:	91 e0       	ldi	r25, 0x01	; 1
     93c:	81 11       	cpse	r24, r1
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	89 2f       	mov	r24, r25
            input->previous_state = state;
     942:	84 87       	std	Z+12, r24	; 0x0c
            return state;
     944:	08 95       	ret
    list_for_each_entry(input, &gpio_inputs, list)
     946:	07 84       	ldd	r0, Z+15	; 0x0f
     948:	f0 89       	ldd	r31, Z+16	; 0x10
     94a:	e0 2d       	mov	r30, r0
     94c:	db cf       	rjmp	.-74     	; 0x904 <gpio_read_pin+0x8>

0000094e <gpio_debouncer>:

/*
 * 	Function:    void gpio_debouncer(void)
 * 	Description: debouncer function, used for triggering inputs smoothly
 */
void gpio_debouncer(void) {
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
    static volatile uint8_t count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     952:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <gpio_inputs+0x2>
     956:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <gpio_inputs+0x3>
     95a:	3d 97       	sbiw	r30, 0x0d	; 13
     95c:	d1 e0       	ldi	r29, 0x01	; 1
     95e:	e7 30       	cpi	r30, 0x07	; 7
     960:	fd 07       	cpc	r31, r29
     962:	61 f4       	brne	.+24     	; 0x97c <gpio_debouncer+0x2e>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    }

    if(++count == GPIO_DEBOUNCE_COUNT)
     964:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <count.1994>
     968:	8f 5f       	subi	r24, 0xFF	; 255
     96a:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <count.1994>
     96e:	8a 30       	cpi	r24, 0x0A	; 10
     970:	11 f4       	brne	.+4      	; 0x976 <gpio_debouncer+0x28>
        count = 0;
     972:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <count.1994>

     976:	df 91       	pop	r29
     978:	cf 91       	pop	r28
     97a:	08 95       	ret
        input->values[count] = __gpio_read_pin(input->pin);
     97c:	20 81       	ld	r18, Z
     97e:	a0 91 95 03 	lds	r26, 0x0395	; 0x800395 <count.1994>
    uint8_t port = 1 + pin / 8;
     982:	82 2f       	mov	r24, r18
     984:	86 95       	lsr	r24
     986:	86 95       	lsr	r24
     988:	86 95       	lsr	r24
     98a:	8f 5f       	subi	r24, 0xFF	; 255
	uint8_t temp = (*((volatile uint8_t*)(0x20 + 3 * (port - 1))));
     98c:	81 50       	subi	r24, 0x01	; 1
     98e:	99 0b       	sbc	r25, r25
     990:	ac 01       	movw	r20, r24
     992:	44 0f       	add	r20, r20
     994:	55 1f       	adc	r21, r21
     996:	84 0f       	add	r24, r20
     998:	95 1f       	adc	r25, r21
     99a:	ec 01       	movw	r28, r24
     99c:	88 a1       	ldd	r24, Y+32	; 0x20
        input->values[count] = __gpio_read_pin(input->pin);
     99e:	ae 0f       	add	r26, r30
     9a0:	bf 2f       	mov	r27, r31
     9a2:	b1 1d       	adc	r27, r1
    return ((temp >> pin) & 0x01);
     9a4:	90 e0       	ldi	r25, 0x00	; 0
    pin = pin % 8;
     9a6:	27 70       	andi	r18, 0x07	; 7
    return ((temp >> pin) & 0x01);
     9a8:	02 c0       	rjmp	.+4      	; 0x9ae <gpio_debouncer+0x60>
     9aa:	95 95       	asr	r25
     9ac:	87 95       	ror	r24
     9ae:	2a 95       	dec	r18
     9b0:	e2 f7       	brpl	.-8      	; 0x9aa <gpio_debouncer+0x5c>
     9b2:	81 70       	andi	r24, 0x01	; 1
        input->values[count] = __gpio_read_pin(input->pin);
     9b4:	12 96       	adiw	r26, 0x02	; 2
     9b6:	8c 93       	st	X, r24
    list_for_each_entry(input, &gpio_inputs, list)
     9b8:	07 84       	ldd	r0, Z+15	; 0x0f
     9ba:	f0 89       	ldd	r31, Z+16	; 0x10
     9bc:	e0 2d       	mov	r30, r0
     9be:	cd cf       	rjmp	.-102    	; 0x95a <gpio_debouncer+0xc>

000009c0 <hbridge_move>:

/*
 * Function: void hbridge_move(int A_value, int B_value, uint8_t num);
 * Description: move the hbridge by A_value and B_value. The ID is num
 */
void hbridge_move(int A_value, int B_value, uint8_t num) {
     9c0:	cf 92       	push	r12
     9c2:	df 92       	push	r13
     9c4:	ef 92       	push	r14
     9c6:	ff 92       	push	r15
     9c8:	0f 93       	push	r16
     9ca:	1f 93       	push	r17
     9cc:	cf 93       	push	r28
     9ce:	df 93       	push	r29
     9d0:	8c 01       	movw	r16, r24
     9d2:	eb 01       	movw	r28, r22
     9d4:	f4 2e       	mov	r15, r20
    
   debug_printf("INFO! hbridge_move - [A_value, B_value, num] - ");
     9d6:	86 e6       	ldi	r24, 0x66	; 102
     9d8:	91 e0       	ldi	r25, 0x01	; 1
     9da:	0e 94 54 02 	call	0x4a8	; 0x4a8 <debug_printf>
   debug_printf_num(A_value);
     9de:	c8 01       	movw	r24, r16
     9e0:	0e 94 55 02 	call	0x4aa	; 0x4aa <debug_printf_num>
   debug_printf(",");
     9e4:	86 e9       	ldi	r24, 0x96	; 150
     9e6:	91 e0       	ldi	r25, 0x01	; 1
     9e8:	0e 94 54 02 	call	0x4a8	; 0x4a8 <debug_printf>
   debug_printf_num(B_value);
     9ec:	ce 01       	movw	r24, r28
     9ee:	0e 94 55 02 	call	0x4aa	; 0x4aa <debug_printf_num>
   debug_printf(",");
     9f2:	86 e9       	ldi	r24, 0x96	; 150
     9f4:	91 e0       	ldi	r25, 0x01	; 1
     9f6:	0e 94 54 02 	call	0x4a8	; 0x4a8 <debug_printf>
   debug_printf_num(num);
     9fa:	8f 2d       	mov	r24, r15
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	0e 94 55 02 	call	0x4aa	; 0x4aa <debug_printf_num>
   debug_printf("\n");
     a02:	84 e6       	ldi	r24, 0x64	; 100
     a04:	91 e0       	ldi	r25, 0x01	; 1
     a06:	0e 94 54 02 	call	0x4a8	; 0x4a8 <debug_printf>

    switch(num) {
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	f8 16       	cp	r15, r24
     a0e:	61 f0       	breq	.+24     	; 0xa28 <hbridge_move+0x68>
     a10:	82 e0       	ldi	r24, 0x02	; 2
     a12:	f8 16       	cp	r15, r24
     a14:	c9 f1       	breq	.+114    	; 0xa88 <hbridge_move+0xc8>
            current_A_1 = A_value;
            current_B_1 = B_value;

            break;
    }
} // end of hbridge_move()
     a16:	df 91       	pop	r29
     a18:	cf 91       	pop	r28
     a1a:	1f 91       	pop	r17
     a1c:	0f 91       	pop	r16
     a1e:	ff 90       	pop	r15
     a20:	ef 90       	pop	r14
     a22:	df 90       	pop	r13
     a24:	cf 90       	pop	r12
     a26:	08 95       	ret
            OCR3C = (uint16_t)(conv_to_16(A_value));    // PE5
     a28:	2f ef       	ldi	r18, 0xFF	; 255
     a2a:	3f ef       	ldi	r19, 0xFF	; 255
     a2c:	d8 01       	movw	r26, r16
     a2e:	0e 94 ee 07 	call	0xfdc	; 0xfdc <__usmulhisi3>
     a32:	24 e6       	ldi	r18, 0x64	; 100
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	40 e0       	ldi	r20, 0x00	; 0
     a38:	50 e0       	ldi	r21, 0x00	; 0
     a3a:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__divmodsi4>
     a3e:	30 93 9d 00 	sts	0x009D, r19	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
     a42:	20 93 9c 00 	sts	0x009C, r18	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
            OCR0A = (uint8_t)(conv_to_8(B_value));      // PB7
     a46:	2f ef       	ldi	r18, 0xFF	; 255
     a48:	2c 9f       	mul	r18, r28
     a4a:	c0 01       	movw	r24, r0
     a4c:	2d 9f       	mul	r18, r29
     a4e:	90 0d       	add	r25, r0
     a50:	11 24       	eor	r1, r1
     a52:	64 e6       	ldi	r22, 0x64	; 100
     a54:	70 e0       	ldi	r23, 0x00	; 0
     a56:	0e 94 99 07 	call	0xf32	; 0xf32 <__divmodhi4>
     a5a:	67 bd       	out	0x27, r22	; 39
            if(A_value == 0) {
     a5c:	01 15       	cp	r16, r1
     a5e:	11 05       	cpc	r17, r1
     a60:	21 f4       	brne	.+8      	; 0xa6a <hbridge_move+0xaa>
                gpio_write_pin(PIN_MOTOR2_A, LOW);
     a62:	60 e0       	ldi	r22, 0x00	; 0
     a64:	85 e2       	ldi	r24, 0x25	; 37
     a66:	0e 94 4f 04 	call	0x89e	; 0x89e <gpio_write_pin>
            if(B_value == 0) {
     a6a:	20 97       	sbiw	r28, 0x00	; 0
     a6c:	21 f4       	brne	.+8      	; 0xa76 <hbridge_move+0xb6>
                gpio_write_pin(PIN_MOTOR2_B, LOW);
     a6e:	60 e0       	ldi	r22, 0x00	; 0
     a70:	8f e0       	ldi	r24, 0x0F	; 15
     a72:	0e 94 4f 04 	call	0x89e	; 0x89e <gpio_write_pin>
            current_A_2 = A_value;
     a76:	10 93 b1 03 	sts	0x03B1, r17	; 0x8003b1 <current_A_2+0x1>
     a7a:	00 93 b0 03 	sts	0x03B0, r16	; 0x8003b0 <current_A_2>
            current_B_2 = B_value;
     a7e:	d0 93 af 03 	sts	0x03AF, r29	; 0x8003af <current_B_2+0x1>
     a82:	c0 93 ae 03 	sts	0x03AE, r28	; 0x8003ae <current_B_2>
            break;
     a86:	c7 cf       	rjmp	.-114    	; 0xa16 <hbridge_move+0x56>
            OCR3A = (uint16_t)(conv_to_16(A_value));    // PE3
     a88:	2f ef       	ldi	r18, 0xFF	; 255
     a8a:	3f ef       	ldi	r19, 0xFF	; 255
     a8c:	d8 01       	movw	r26, r16
     a8e:	0e 94 ee 07 	call	0xfdc	; 0xfdc <__usmulhisi3>
     a92:	24 e6       	ldi	r18, 0x64	; 100
     a94:	c2 2e       	mov	r12, r18
     a96:	d1 2c       	mov	r13, r1
     a98:	e1 2c       	mov	r14, r1
     a9a:	f1 2c       	mov	r15, r1
     a9c:	a7 01       	movw	r20, r14
     a9e:	96 01       	movw	r18, r12
     aa0:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__divmodsi4>
     aa4:	30 93 99 00 	sts	0x0099, r19	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     aa8:	20 93 98 00 	sts	0x0098, r18	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
            OCR3B = (uint16_t)(conv_to_16(B_value));    // PE4
     aac:	2f ef       	ldi	r18, 0xFF	; 255
     aae:	3f ef       	ldi	r19, 0xFF	; 255
     ab0:	de 01       	movw	r26, r28
     ab2:	0e 94 ee 07 	call	0xfdc	; 0xfdc <__usmulhisi3>
     ab6:	a7 01       	movw	r20, r14
     ab8:	96 01       	movw	r18, r12
     aba:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__divmodsi4>
     abe:	30 93 9b 00 	sts	0x009B, r19	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     ac2:	20 93 9a 00 	sts	0x009A, r18	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
            if(A_value == 0) {
     ac6:	01 15       	cp	r16, r1
     ac8:	11 05       	cpc	r17, r1
     aca:	21 f4       	brne	.+8      	; 0xad4 <hbridge_move+0x114>
                gpio_write_pin(PIN_MOTOR1_A, LOW);
     acc:	60 e0       	ldi	r22, 0x00	; 0
     ace:	83 e2       	ldi	r24, 0x23	; 35
     ad0:	0e 94 4f 04 	call	0x89e	; 0x89e <gpio_write_pin>
            if(B_value == 0) {
     ad4:	20 97       	sbiw	r28, 0x00	; 0
     ad6:	21 f4       	brne	.+8      	; 0xae0 <hbridge_move+0x120>
                gpio_write_pin(PIN_MOTOR1_B, LOW);
     ad8:	60 e0       	ldi	r22, 0x00	; 0
     ada:	84 e2       	ldi	r24, 0x24	; 36
     adc:	0e 94 4f 04 	call	0x89e	; 0x89e <gpio_write_pin>
            current_A_1 = A_value;
     ae0:	10 93 ad 03 	sts	0x03AD, r17	; 0x8003ad <current_A_1+0x1>
     ae4:	00 93 ac 03 	sts	0x03AC, r16	; 0x8003ac <current_A_1>
            current_B_1 = B_value;
     ae8:	d0 93 b3 03 	sts	0x03B3, r29	; 0x8003b3 <current_B_1+0x1>
     aec:	c0 93 b2 03 	sts	0x03B2, r28	; 0x8003b2 <current_B_1>
} // end of hbridge_move()
     af0:	92 cf       	rjmp	.-220    	; 0xa16 <hbridge_move+0x56>

00000af2 <init_hbridge>:
    gpio_register_pin(PIN_MOTOR1_A, GPIO_DIRECTION_OUTPUT, false);
     af2:	40 e0       	ldi	r20, 0x00	; 0
     af4:	61 e0       	ldi	r22, 0x01	; 1
     af6:	83 e2       	ldi	r24, 0x23	; 35
     af8:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <gpio_register_pin>
    gpio_register_pin(PIN_MOTOR1_B, GPIO_DIRECTION_OUTPUT, false);
     afc:	40 e0       	ldi	r20, 0x00	; 0
     afe:	61 e0       	ldi	r22, 0x01	; 1
     b00:	84 e2       	ldi	r24, 0x24	; 36
     b02:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <gpio_register_pin>
    gpio_register_pin(PIN_MOTOR2_A, GPIO_DIRECTION_OUTPUT, false);
     b06:	40 e0       	ldi	r20, 0x00	; 0
     b08:	61 e0       	ldi	r22, 0x01	; 1
     b0a:	85 e2       	ldi	r24, 0x25	; 37
     b0c:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <gpio_register_pin>
    gpio_register_pin(PIN_MOTOR2_B, GPIO_DIRECTION_OUTPUT, false);			
     b10:	40 e0       	ldi	r20, 0x00	; 0
     b12:	61 e0       	ldi	r22, 0x01	; 1
     b14:	8f e0       	ldi	r24, 0x0F	; 15
     b16:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <gpio_register_pin>
    ICR3 = 5000;
     b1a:	88 e8       	ldi	r24, 0x88	; 136
     b1c:	93 e1       	ldi	r25, 0x13	; 19
     b1e:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x7e0097>
     b22:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x7e0096>
	TCNT3 = 0;
     b26:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     b2a:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
	TCNT0 = 0;
     b2e:	16 bc       	out	0x26, r1	; 38
	OCR3A = 0;
     b30:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     b34:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	OCR3B = 0;
     b38:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     b3c:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	OCR3C = 0;
     b40:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
     b44:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	TCCR3A = (1 << COM3A1)  | (1 << COM3B1) | (1 << COM3C1) | (1 << WGM31);
     b48:	8a ea       	ldi	r24, 0xAA	; 170
     b4a:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	TCCR3B = (1<< CS31) | (1 << WGM32) | (1 << WGM33); 		// PRESKALER = 8
     b4e:	8a e1       	ldi	r24, 0x1A	; 26
     b50:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
    TCCR0A |= (1<<WGM00) | (1<<WGM01) | (1<<COM0A1) | (1<<CS00);
     b54:	84 b5       	in	r24, 0x24	; 36
     b56:	89 66       	ori	r24, 0x69	; 105
     b58:	84 bd       	out	0x24, r24	; 36
    hbridge_move(0,0,1);
     b5a:	41 e0       	ldi	r20, 0x01	; 1
     b5c:	70 e0       	ldi	r23, 0x00	; 0
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <hbridge_move>
    hbridge_move(0,0,2);
     b68:	42 e0       	ldi	r20, 0x02	; 2
     b6a:	70 e0       	ldi	r23, 0x00	; 0
     b6c:	60 e0       	ldi	r22, 0x00	; 0
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <hbridge_move>
} // end of init_hbridge()
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	08 95       	ret

00000b7a <hbridge_break>:
/*
 * Function:    void hbridge_break(uint8_t num)
 * Description: break the `num` hbridge
 */
void hbridge_break(uint8_t num) {
    hbridge_move(100, 100, num);
     b7a:	48 2f       	mov	r20, r24
     b7c:	64 e6       	ldi	r22, 0x64	; 100
     b7e:	70 e0       	ldi	r23, 0x00	; 0
     b80:	84 e6       	ldi	r24, 0x64	; 100
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <hbridge_move>

00000b88 <hbridge_time>:

/*
 * Function:    void hbridge_break(uint8_t num)
 * Description: break the `num` hbridge
 */
void hbridge_time(int num, int dir, int achieve, int time) {
     b88:	ef 92       	push	r14
     b8a:	ff 92       	push	r15
     b8c:	0f 93       	push	r16
     b8e:	1f 93       	push	r17
     b90:	cf 93       	push	r28
     b92:	df 93       	push	r29
     b94:	fc 01       	movw	r30, r24
     b96:	8b 01       	movw	r16, r22
     b98:	ea 01       	movw	r28, r20
     b9a:	c9 01       	movw	r24, r18
    
    // calculate the difference from the current and achieve speed
    int dif = 0;

    // switch between 1 and 2 motor
    switch(num) {
     b9c:	e1 30       	cpi	r30, 0x01	; 1
     b9e:	f1 05       	cpc	r31, r1
     ba0:	51 f0       	breq	.+20     	; 0xbb6 <hbridge_time+0x2e>
     ba2:	32 97       	sbiw	r30, 0x02	; 2
     ba4:	09 f4       	brne	.+2      	; 0xba8 <hbridge_time+0x20>
     ba6:	6b c0       	rjmp	.+214    	; 0xc7e <hbridge_time+0xf6>
                    delay(100);
                }
            }
            break;
    }
     ba8:	df 91       	pop	r29
     baa:	cf 91       	pop	r28
     bac:	1f 91       	pop	r17
     bae:	0f 91       	pop	r16
     bb0:	ff 90       	pop	r15
     bb2:	ef 90       	pop	r14
     bb4:	08 95       	ret
            if(dir == CW) {
     bb6:	61 30       	cpi	r22, 0x01	; 1
     bb8:	71 05       	cpc	r23, r1
     bba:	81 f5       	brne	.+96     	; 0xc1c <hbridge_time+0x94>
                current_A_1 = 0;                                        
     bbc:	10 92 ad 03 	sts	0x03AD, r1	; 0x8003ad <current_A_1+0x1>
     bc0:	10 92 ac 03 	sts	0x03AC, r1	; 0x8003ac <current_A_1>
                dif = achieve - current_B_1;
     bc4:	20 91 b2 03 	lds	r18, 0x03B2	; 0x8003b2 <current_B_1>
     bc8:	30 91 b3 03 	lds	r19, 0x03B3	; 0x8003b3 <current_B_1+0x1>
     bcc:	c2 1b       	sub	r28, r18
     bce:	d3 0b       	sbc	r29, r19
                for(int i=0; i < time/100;i++) {
     bd0:	64 e6       	ldi	r22, 0x64	; 100
     bd2:	70 e0       	ldi	r23, 0x00	; 0
     bd4:	0e 94 99 07 	call	0xf32	; 0xf32 <__divmodhi4>
     bd8:	7b 01       	movw	r14, r22
     bda:	10 e0       	ldi	r17, 0x00	; 0
     bdc:	00 e0       	ldi	r16, 0x00	; 0
     bde:	0e 15       	cp	r16, r14
     be0:	1f 05       	cpc	r17, r15
     be2:	14 f7       	brge	.-60     	; 0xba8 <hbridge_time+0x20>
                    current_B_1 += dif/(time/100);
     be4:	ce 01       	movw	r24, r28
     be6:	b7 01       	movw	r22, r14
     be8:	0e 94 99 07 	call	0xf32	; 0xf32 <__divmodhi4>
     bec:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <current_B_1>
     bf0:	90 91 b3 03 	lds	r25, 0x03B3	; 0x8003b3 <current_B_1+0x1>
     bf4:	68 0f       	add	r22, r24
     bf6:	79 1f       	adc	r23, r25
     bf8:	70 93 b3 03 	sts	0x03B3, r23	; 0x8003b3 <current_B_1+0x1>
     bfc:	60 93 b2 03 	sts	0x03B2, r22	; 0x8003b2 <current_B_1>
                    hbridge_move(current_A_1, current_B_1, num);
     c00:	41 e0       	ldi	r20, 0x01	; 1
     c02:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <current_A_1>
     c06:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <current_A_1+0x1>
     c0a:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <hbridge_move>
                    delay(100);
     c0e:	84 e6       	ldi	r24, 0x64	; 100
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	0e 94 0c 01 	call	0x218	; 0x218 <delay>
                for(int i=0; i < time/100;i++) {
     c16:	0f 5f       	subi	r16, 0xFF	; 255
     c18:	1f 4f       	sbci	r17, 0xFF	; 255
     c1a:	e1 cf       	rjmp	.-62     	; 0xbde <hbridge_time+0x56>
            else if(dir == CCW) {
     c1c:	67 2b       	or	r22, r23
     c1e:	21 f6       	brne	.-120    	; 0xba8 <hbridge_time+0x20>
                current_B_1 = 0;
     c20:	10 92 b3 03 	sts	0x03B3, r1	; 0x8003b3 <current_B_1+0x1>
     c24:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <current_B_1>
                dif = achieve - current_A_1;
     c28:	20 91 ac 03 	lds	r18, 0x03AC	; 0x8003ac <current_A_1>
     c2c:	30 91 ad 03 	lds	r19, 0x03AD	; 0x8003ad <current_A_1+0x1>
     c30:	c2 1b       	sub	r28, r18
     c32:	d3 0b       	sbc	r29, r19
                for(int i=0; i < time/100;i++) {
     c34:	64 e6       	ldi	r22, 0x64	; 100
     c36:	70 e0       	ldi	r23, 0x00	; 0
     c38:	0e 94 99 07 	call	0xf32	; 0xf32 <__divmodhi4>
     c3c:	7b 01       	movw	r14, r22
     c3e:	0e 15       	cp	r16, r14
     c40:	1f 05       	cpc	r17, r15
     c42:	0c f0       	brlt	.+2      	; 0xc46 <hbridge_time+0xbe>
     c44:	b1 cf       	rjmp	.-158    	; 0xba8 <hbridge_time+0x20>
                    current_A_1 += dif/(time/100);
     c46:	ce 01       	movw	r24, r28
     c48:	b7 01       	movw	r22, r14
     c4a:	0e 94 99 07 	call	0xf32	; 0xf32 <__divmodhi4>
     c4e:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <current_A_1>
     c52:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <current_A_1+0x1>
     c56:	86 0f       	add	r24, r22
     c58:	97 1f       	adc	r25, r23
     c5a:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <current_A_1+0x1>
     c5e:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <current_A_1>
                    hbridge_move(current_A_1, current_B_1, num);
     c62:	60 91 b2 03 	lds	r22, 0x03B2	; 0x8003b2 <current_B_1>
     c66:	70 91 b3 03 	lds	r23, 0x03B3	; 0x8003b3 <current_B_1+0x1>
     c6a:	41 e0       	ldi	r20, 0x01	; 1
     c6c:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <hbridge_move>
                    delay(100);
     c70:	84 e6       	ldi	r24, 0x64	; 100
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	0e 94 0c 01 	call	0x218	; 0x218 <delay>
                for(int i=0; i < time/100;i++) {
     c78:	0f 5f       	subi	r16, 0xFF	; 255
     c7a:	1f 4f       	sbci	r17, 0xFF	; 255
     c7c:	e0 cf       	rjmp	.-64     	; 0xc3e <hbridge_time+0xb6>
            if(dir == CW) {
     c7e:	61 30       	cpi	r22, 0x01	; 1
     c80:	71 05       	cpc	r23, r1
     c82:	89 f5       	brne	.+98     	; 0xce6 <hbridge_time+0x15e>
                current_A_2 = 0;
     c84:	10 92 b1 03 	sts	0x03B1, r1	; 0x8003b1 <current_A_2+0x1>
     c88:	10 92 b0 03 	sts	0x03B0, r1	; 0x8003b0 <current_A_2>
                dif = achieve - current_B_2;
     c8c:	20 91 ae 03 	lds	r18, 0x03AE	; 0x8003ae <current_B_2>
     c90:	30 91 af 03 	lds	r19, 0x03AF	; 0x8003af <current_B_2+0x1>
     c94:	c2 1b       	sub	r28, r18
     c96:	d3 0b       	sbc	r29, r19
                for(int i=0; i < time/100;i++) {
     c98:	64 e6       	ldi	r22, 0x64	; 100
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	0e 94 99 07 	call	0xf32	; 0xf32 <__divmodhi4>
     ca0:	7b 01       	movw	r14, r22
     ca2:	10 e0       	ldi	r17, 0x00	; 0
     ca4:	00 e0       	ldi	r16, 0x00	; 0
     ca6:	0e 15       	cp	r16, r14
     ca8:	1f 05       	cpc	r17, r15
     caa:	0c f0       	brlt	.+2      	; 0xcae <hbridge_time+0x126>
     cac:	7d cf       	rjmp	.-262    	; 0xba8 <hbridge_time+0x20>
                    current_B_2 += dif/(time/100);
     cae:	ce 01       	movw	r24, r28
     cb0:	b7 01       	movw	r22, r14
     cb2:	0e 94 99 07 	call	0xf32	; 0xf32 <__divmodhi4>
     cb6:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <current_B_2>
     cba:	90 91 af 03 	lds	r25, 0x03AF	; 0x8003af <current_B_2+0x1>
     cbe:	68 0f       	add	r22, r24
     cc0:	79 1f       	adc	r23, r25
     cc2:	70 93 af 03 	sts	0x03AF, r23	; 0x8003af <current_B_2+0x1>
     cc6:	60 93 ae 03 	sts	0x03AE, r22	; 0x8003ae <current_B_2>
                    hbridge_move(current_A_2, current_B_2, num);
     cca:	42 e0       	ldi	r20, 0x02	; 2
     ccc:	80 91 b0 03 	lds	r24, 0x03B0	; 0x8003b0 <current_A_2>
     cd0:	90 91 b1 03 	lds	r25, 0x03B1	; 0x8003b1 <current_A_2+0x1>
     cd4:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <hbridge_move>
                    delay(100);
     cd8:	84 e6       	ldi	r24, 0x64	; 100
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	0e 94 0c 01 	call	0x218	; 0x218 <delay>
                for(int i=0; i < time/100;i++) {
     ce0:	0f 5f       	subi	r16, 0xFF	; 255
     ce2:	1f 4f       	sbci	r17, 0xFF	; 255
     ce4:	e0 cf       	rjmp	.-64     	; 0xca6 <hbridge_time+0x11e>
            else if(dir == CCW) {
     ce6:	67 2b       	or	r22, r23
     ce8:	09 f0       	breq	.+2      	; 0xcec <hbridge_time+0x164>
     cea:	5e cf       	rjmp	.-324    	; 0xba8 <hbridge_time+0x20>
                current_B_2 = 0;
     cec:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <current_B_2+0x1>
     cf0:	10 92 ae 03 	sts	0x03AE, r1	; 0x8003ae <current_B_2>
                dif = achieve - current_A_2;
     cf4:	20 91 b0 03 	lds	r18, 0x03B0	; 0x8003b0 <current_A_2>
     cf8:	30 91 b1 03 	lds	r19, 0x03B1	; 0x8003b1 <current_A_2+0x1>
     cfc:	c2 1b       	sub	r28, r18
     cfe:	d3 0b       	sbc	r29, r19
                for(int i=0; i < time/100;i++) {
     d00:	64 e6       	ldi	r22, 0x64	; 100
     d02:	70 e0       	ldi	r23, 0x00	; 0
     d04:	0e 94 99 07 	call	0xf32	; 0xf32 <__divmodhi4>
     d08:	7b 01       	movw	r14, r22
     d0a:	0e 15       	cp	r16, r14
     d0c:	1f 05       	cpc	r17, r15
     d0e:	0c f0       	brlt	.+2      	; 0xd12 <hbridge_time+0x18a>
     d10:	4b cf       	rjmp	.-362    	; 0xba8 <hbridge_time+0x20>
                    current_A_2 += dif/(time/100);
     d12:	ce 01       	movw	r24, r28
     d14:	b7 01       	movw	r22, r14
     d16:	0e 94 99 07 	call	0xf32	; 0xf32 <__divmodhi4>
     d1a:	80 91 b0 03 	lds	r24, 0x03B0	; 0x8003b0 <current_A_2>
     d1e:	90 91 b1 03 	lds	r25, 0x03B1	; 0x8003b1 <current_A_2+0x1>
     d22:	86 0f       	add	r24, r22
     d24:	97 1f       	adc	r25, r23
     d26:	90 93 b1 03 	sts	0x03B1, r25	; 0x8003b1 <current_A_2+0x1>
     d2a:	80 93 b0 03 	sts	0x03B0, r24	; 0x8003b0 <current_A_2>
                    hbridge_move(current_A_2, current_B_2, num);
     d2e:	60 91 ae 03 	lds	r22, 0x03AE	; 0x8003ae <current_B_2>
     d32:	70 91 af 03 	lds	r23, 0x03AF	; 0x8003af <current_B_2+0x1>
     d36:	42 e0       	ldi	r20, 0x02	; 2
     d38:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <hbridge_move>
                    delay(100);
     d3c:	84 e6       	ldi	r24, 0x64	; 100
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	0e 94 0c 01 	call	0x218	; 0x218 <delay>
                for(int i=0; i < time/100;i++) {
     d44:	0f 5f       	subi	r16, 0xFF	; 255
     d46:	1f 4f       	sbci	r17, 0xFF	; 255
     d48:	e0 cf       	rjmp	.-64     	; 0xd0a <hbridge_time+0x182>

00000d4a <main>:

int main(void) {
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	28 97       	sbiw	r28, 0x08	; 8
     d50:	0f b6       	in	r0, 0x3f	; 63
     d52:	f8 94       	cli
     d54:	de bf       	out	0x3e, r29	; 62
     d56:	0f be       	out	0x3f, r0	; 63
     d58:	cd bf       	out	0x3d, r28	; 61

	system_init();
     d5a:	0e 94 b0 00 	call	0x160	; 0x160 <system_init>
				unsigned char switch_data[8];

				switch_data[0] = read_switch((uint8_t)(second_byte));
				
				memcpy(snd_message.data, switch_data, 8);
				snd_message.msgIde = MAIN_BOARD_CAN_ID;
     d5e:	84 e0       	ldi	r24, 0x04	; 4
     d60:	f8 2e       	mov	r15, r24
     d62:	e1 2c       	mov	r14, r1
		if(CAN_checkRX() == 1) {
     d64:	0e 94 55 03 	call	0x6aa	; 0x6aa <CAN_checkRX>
     d68:	81 30       	cpi	r24, 0x01	; 1
     d6a:	e1 f7       	brne	.-8      	; 0xd64 <main+0x1a>
			CAN_read(&message);
     d6c:	87 e9       	ldi	r24, 0x97	; 151
     d6e:	93 e0       	ldi	r25, 0x03	; 3
     d70:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <CAN_read>
			first_byte 		= message.data[0];
     d74:	90 91 97 03 	lds	r25, 0x0397	; 0x800397 <message>
     d78:	90 93 ab 03 	sts	0x03AB, r25	; 0x8003ab <first_byte>
			second_byte 	= message.data[1];
     d7c:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <message+0x1>
     d80:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <second_byte>
			if(first_byte == 'P') {
     d84:	90 35       	cpi	r25, 0x50	; 80
     d86:	f1 f5       	brne	.+124    	; 0xe04 <main+0xba>
				if(second_byte == 0) {
     d88:	81 11       	cpse	r24, r1
     d8a:	0d c0       	rjmp	.+26     	; 0xda6 <main+0x5c>
					gpio_write_pin(PIN_LED2, true);
     d8c:	61 e0       	ldi	r22, 0x01	; 1
     d8e:	81 e3       	ldi	r24, 0x31	; 49
     d90:	0e 94 4f 04 	call	0x89e	; 0x89e <gpio_write_pin>
					delay(500);
     d94:	84 ef       	ldi	r24, 0xF4	; 244
     d96:	91 e0       	ldi	r25, 0x01	; 1
     d98:	0e 94 0c 01 	call	0x218	; 0x218 <delay>
						gpio_write_pin(PIN_LED2, false);
     d9c:	60 e0       	ldi	r22, 0x00	; 0
     d9e:	81 e3       	ldi	r24, 0x31	; 49
     da0:	0e 94 4f 04 	call	0x89e	; 0x89e <gpio_write_pin>
     da4:	df cf       	rjmp	.-66     	; 0xd64 <main+0x1a>
				else if(second_byte == 1) {
     da6:	81 30       	cpi	r24, 0x01	; 1
     da8:	e9 f6       	brne	.-70     	; 0xd64 <main+0x1a>
					gpio_write_pin(PIN_LED2, true);
     daa:	61 e0       	ldi	r22, 0x01	; 1
     dac:	81 e3       	ldi	r24, 0x31	; 49
     dae:	0e 94 4f 04 	call	0x89e	; 0x89e <gpio_write_pin>
					delay(500);
     db2:	84 ef       	ldi	r24, 0xF4	; 244
     db4:	91 e0       	ldi	r25, 0x01	; 1
     db6:	0e 94 0c 01 	call	0x218	; 0x218 <delay>
					memcpy(snd_message.data, dummy_data, 8);
     dba:	88 e0       	ldi	r24, 0x08	; 8
     dbc:	e8 e0       	ldi	r30, 0x08	; 8
     dbe:	f1 e0       	ldi	r31, 0x01	; 1
     dc0:	a1 ea       	ldi	r26, 0xA1	; 161
     dc2:	b3 e0       	ldi	r27, 0x03	; 3
     dc4:	01 90       	ld	r0, Z+
     dc6:	0d 92       	st	X+, r0
     dc8:	8a 95       	dec	r24
     dca:	e1 f7       	brne	.-8      	; 0xdc4 <main+0x7a>
					snd_message.msgIde = MAIN_BOARD_CAN_ID;
     dcc:	f0 92 a9 03 	sts	0x03A9, r15	; 0x8003a9 <snd_message+0x8>
     dd0:	e0 92 aa 03 	sts	0x03AA, r14	; 0x8003aa <snd_message+0x9>
					if(CAN_write(snd_message) == 1) {
     dd4:	00 91 a1 03 	lds	r16, 0x03A1	; 0x8003a1 <snd_message>
     dd8:	10 91 a2 03 	lds	r17, 0x03A2	; 0x8003a2 <snd_message+0x1>
     ddc:	20 91 a3 03 	lds	r18, 0x03A3	; 0x8003a3 <snd_message+0x2>
     de0:	30 91 a4 03 	lds	r19, 0x03A4	; 0x8003a4 <snd_message+0x3>
     de4:	40 91 a5 03 	lds	r20, 0x03A5	; 0x8003a5 <snd_message+0x4>
     de8:	50 91 a6 03 	lds	r21, 0x03A6	; 0x8003a6 <snd_message+0x5>
     dec:	60 91 a7 03 	lds	r22, 0x03A7	; 0x8003a7 <snd_message+0x6>
     df0:	70 91 a8 03 	lds	r23, 0x03A8	; 0x8003a8 <snd_message+0x7>
     df4:	8f 2d       	mov	r24, r15
     df6:	9e 2d       	mov	r25, r14
     df8:	0e 94 95 03 	call	0x72a	; 0x72a <CAN_write>
     dfc:	81 30       	cpi	r24, 0x01	; 1
     dfe:	09 f0       	breq	.+2      	; 0xe02 <main+0xb8>
     e00:	b1 cf       	rjmp	.-158    	; 0xd64 <main+0x1a>
     e02:	cc cf       	rjmp	.-104    	; 0xd9c <main+0x52>
			else if(first_byte == 'S') {
     e04:	93 35       	cpi	r25, 0x53	; 83
     e06:	29 f5       	brne	.+74     	; 0xe52 <main+0x108>
				switch_data[0] = read_switch((uint8_t)(second_byte));
     e08:	0e 94 18 01 	call	0x230	; 0x230 <read_switch>
				memcpy(snd_message.data, switch_data, 8);
     e0c:	89 83       	std	Y+1, r24	; 0x01
     e0e:	88 e0       	ldi	r24, 0x08	; 8
     e10:	fe 01       	movw	r30, r28
     e12:	31 96       	adiw	r30, 0x01	; 1
     e14:	a1 ea       	ldi	r26, 0xA1	; 161
     e16:	b3 e0       	ldi	r27, 0x03	; 3
     e18:	01 90       	ld	r0, Z+
     e1a:	0d 92       	st	X+, r0
     e1c:	8a 95       	dec	r24
     e1e:	e1 f7       	brne	.-8      	; 0xe18 <main+0xce>
				snd_message.msgIde = MAIN_BOARD_CAN_ID;
     e20:	f0 92 a9 03 	sts	0x03A9, r15	; 0x8003a9 <snd_message+0x8>
     e24:	e0 92 aa 03 	sts	0x03AA, r14	; 0x8003aa <snd_message+0x9>

				if(CAN_write(snd_message) == 1) {
     e28:	00 91 a1 03 	lds	r16, 0x03A1	; 0x8003a1 <snd_message>
     e2c:	10 91 a2 03 	lds	r17, 0x03A2	; 0x8003a2 <snd_message+0x1>
     e30:	20 91 a3 03 	lds	r18, 0x03A3	; 0x8003a3 <snd_message+0x2>
     e34:	30 91 a4 03 	lds	r19, 0x03A4	; 0x8003a4 <snd_message+0x3>
     e38:	40 91 a5 03 	lds	r20, 0x03A5	; 0x8003a5 <snd_message+0x4>
     e3c:	50 91 a6 03 	lds	r21, 0x03A6	; 0x8003a6 <snd_message+0x5>
     e40:	60 91 a7 03 	lds	r22, 0x03A7	; 0x8003a7 <snd_message+0x6>
     e44:	70 91 a8 03 	lds	r23, 0x03A8	; 0x8003a8 <snd_message+0x7>
     e48:	8f 2d       	mov	r24, r15
     e4a:	9e 2d       	mov	r25, r14
     e4c:	0e 94 95 03 	call	0x72a	; 0x72a <CAN_write>
					// success
				}
     e50:	89 cf       	rjmp	.-238    	; 0xd64 <main+0x1a>

			} // end of switches

			// ACTION: h-bridge
			else if(first_byte == 'H') {
     e52:	98 34       	cpi	r25, 0x48	; 72
     e54:	09 f0       	breq	.+2      	; 0xe58 <main+0x10e>
     e56:	42 c0       	rjmp	.+132    	; 0xedc <main+0x192>

				// SUB-ACTION: move {'H', 'M', a >> 8, a & 0xFF, b >> 8, b & 0xFF, num}
				if(second_byte == 'M') {
     e58:	8d 34       	cpi	r24, 0x4D	; 77
     e5a:	a9 f4       	brne	.+42     	; 0xe86 <main+0x13c>

					_a 	= (message.data[2] << 8) | message.data[3];
					_b 	= (message.data[4] << 8) | message.data[5];
					num = message.data[6];

					hbridge_move(_a, _b, (uint8_t)(num));
     e5c:	60 91 9b 03 	lds	r22, 0x039B	; 0x80039b <message+0x4>
     e60:	70 91 9c 03 	lds	r23, 0x039C	; 0x80039c <message+0x5>
     e64:	76 27       	eor	r23, r22
     e66:	67 27       	eor	r22, r23
     e68:	76 27       	eor	r23, r22
     e6a:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <message+0x2>
     e6e:	90 91 9a 03 	lds	r25, 0x039A	; 0x80039a <message+0x3>
     e72:	40 91 9d 03 	lds	r20, 0x039D	; 0x80039d <message+0x6>
     e76:	98 27       	eor	r25, r24
     e78:	89 27       	eor	r24, r25
     e7a:	98 27       	eor	r25, r24
     e7c:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <hbridge_move>
					dir = message.data[4];
					num = (uint8_t)(message.data[5]);

					move_stepper(steps, dir, num);

					can_send_done();
     e80:	0e 94 20 01 	call	0x240	; 0x240 <can_send_done>
     e84:	6f cf       	rjmp	.-290    	; 0xd64 <main+0x1a>
				else if(second_byte == 'B') {
     e86:	82 34       	cpi	r24, 0x42	; 66
     e88:	29 f4       	brne	.+10     	; 0xe94 <main+0x14a>
					hbridge_break((uint8_t)(message.data[2]));
     e8a:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <message+0x2>
     e8e:	0e 94 bd 05 	call	0xb7a	; 0xb7a <hbridge_break>
					can_send_done();
     e92:	f6 cf       	rjmp	.-20     	; 0xe80 <main+0x136>
				else if(second_byte == 'T' || second_byte == 't') {
     e94:	98 2f       	mov	r25, r24
     e96:	9f 7d       	andi	r25, 0xDF	; 223
     e98:	94 35       	cpi	r25, 0x54	; 84
     e9a:	09 f0       	breq	.+2      	; 0xe9e <main+0x154>
     e9c:	63 cf       	rjmp	.-314    	; 0xd64 <main+0x1a>
					hbridge_time((int)(_num), _dir, _achieve, _time);
     e9e:	20 91 9d 03 	lds	r18, 0x039D	; 0x80039d <message+0x6>
     ea2:	30 91 9e 03 	lds	r19, 0x039E	; 0x80039e <message+0x7>
     ea6:	32 27       	eor	r19, r18
     ea8:	23 27       	eor	r18, r19
     eaa:	32 27       	eor	r19, r18
     eac:	40 91 9b 03 	lds	r20, 0x039B	; 0x80039b <message+0x4>
     eb0:	50 91 9c 03 	lds	r21, 0x039C	; 0x80039c <message+0x5>
     eb4:	54 27       	eor	r21, r20
     eb6:	45 27       	eor	r20, r21
     eb8:	54 27       	eor	r21, r20
     eba:	60 91 99 03 	lds	r22, 0x0399	; 0x800399 <message+0x2>
     ebe:	70 91 9a 03 	lds	r23, 0x039A	; 0x80039a <message+0x3>
     ec2:	76 27       	eor	r23, r22
     ec4:	67 27       	eor	r22, r23
     ec6:	76 27       	eor	r23, r22
					if(second_byte == 'T') {
     ec8:	e1 e0       	ldi	r30, 0x01	; 1
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	84 35       	cpi	r24, 0x54	; 84
     ece:	11 f4       	brne	.+4      	; 0xed4 <main+0x18a>
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	e0 e0       	ldi	r30, 0x00	; 0
					hbridge_time((int)(_num), _dir, _achieve, _time);
     ed4:	cf 01       	movw	r24, r30
     ed6:	0e 94 c4 05 	call	0xb88	; 0xb88 <hbridge_time>
					can_send_done();
     eda:	d2 cf       	rjmp	.-92     	; 0xe80 <main+0x136>
			else if(first_byte == 's') {
     edc:	93 37       	cpi	r25, 0x73	; 115
     ede:	09 f0       	breq	.+2      	; 0xee2 <main+0x198>
     ee0:	41 cf       	rjmp	.-382    	; 0xd64 <main+0x1a>
				if(second_byte == 'E') {
     ee2:	85 34       	cpi	r24, 0x45	; 69
     ee4:	39 f4       	brne	.+14     	; 0xef4 <main+0x1aa>
					enable_stepper(state, num);
     ee6:	60 91 9a 03 	lds	r22, 0x039A	; 0x80039a <message+0x3>
     eea:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <message+0x2>
     eee:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <enable_stepper>
					can_send_done();
     ef2:	c6 cf       	rjmp	.-116    	; 0xe80 <main+0x136>
				else if(second_byte == 'R') {
     ef4:	82 35       	cpi	r24, 0x52	; 82
     ef6:	61 f4       	brne	.+24     	; 0xf10 <main+0x1c6>
					set_rpm_stepper(_rpm, num);
     ef8:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <message+0x2>
     efc:	90 91 9a 03 	lds	r25, 0x039A	; 0x80039a <message+0x3>
     f00:	60 91 9b 03 	lds	r22, 0x039B	; 0x80039b <message+0x4>
     f04:	98 27       	eor	r25, r24
     f06:	89 27       	eor	r24, r25
     f08:	98 27       	eor	r25, r24
     f0a:	0e 94 85 01 	call	0x30a	; 0x30a <set_rpm_stepper>
					can_send_done();
     f0e:	b8 cf       	rjmp	.-144    	; 0xe80 <main+0x136>
				else if(second_byte == 'M') {
     f10:	8d 34       	cpi	r24, 0x4D	; 77
     f12:	09 f0       	breq	.+2      	; 0xf16 <main+0x1cc>
     f14:	27 cf       	rjmp	.-434    	; 0xd64 <main+0x1a>
					move_stepper(steps, dir, num);
     f16:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <message+0x2>
     f1a:	90 91 9a 03 	lds	r25, 0x039A	; 0x80039a <message+0x3>
     f1e:	40 91 9c 03 	lds	r20, 0x039C	; 0x80039c <message+0x5>
     f22:	60 91 9b 03 	lds	r22, 0x039B	; 0x80039b <message+0x4>
     f26:	98 27       	eor	r25, r24
     f28:	89 27       	eor	r24, r25
     f2a:	98 27       	eor	r25, r24
     f2c:	0e 94 90 01 	call	0x320	; 0x320 <move_stepper>
     f30:	a7 cf       	rjmp	.-178    	; 0xe80 <main+0x136>

00000f32 <__divmodhi4>:
     f32:	97 fb       	bst	r25, 7
     f34:	07 2e       	mov	r0, r23
     f36:	16 f4       	brtc	.+4      	; 0xf3c <__divmodhi4+0xa>
     f38:	00 94       	com	r0
     f3a:	07 d0       	rcall	.+14     	; 0xf4a <__divmodhi4_neg1>
     f3c:	77 fd       	sbrc	r23, 7
     f3e:	09 d0       	rcall	.+18     	; 0xf52 <__divmodhi4_neg2>
     f40:	0e 94 f5 07 	call	0xfea	; 0xfea <__udivmodhi4>
     f44:	07 fc       	sbrc	r0, 7
     f46:	05 d0       	rcall	.+10     	; 0xf52 <__divmodhi4_neg2>
     f48:	3e f4       	brtc	.+14     	; 0xf58 <__divmodhi4_exit>

00000f4a <__divmodhi4_neg1>:
     f4a:	90 95       	com	r25
     f4c:	81 95       	neg	r24
     f4e:	9f 4f       	sbci	r25, 0xFF	; 255
     f50:	08 95       	ret

00000f52 <__divmodhi4_neg2>:
     f52:	70 95       	com	r23
     f54:	61 95       	neg	r22
     f56:	7f 4f       	sbci	r23, 0xFF	; 255

00000f58 <__divmodhi4_exit>:
     f58:	08 95       	ret

00000f5a <__udivmodsi4>:
     f5a:	a1 e2       	ldi	r26, 0x21	; 33
     f5c:	1a 2e       	mov	r1, r26
     f5e:	aa 1b       	sub	r26, r26
     f60:	bb 1b       	sub	r27, r27
     f62:	fd 01       	movw	r30, r26
     f64:	0d c0       	rjmp	.+26     	; 0xf80 <__udivmodsi4_ep>

00000f66 <__udivmodsi4_loop>:
     f66:	aa 1f       	adc	r26, r26
     f68:	bb 1f       	adc	r27, r27
     f6a:	ee 1f       	adc	r30, r30
     f6c:	ff 1f       	adc	r31, r31
     f6e:	a2 17       	cp	r26, r18
     f70:	b3 07       	cpc	r27, r19
     f72:	e4 07       	cpc	r30, r20
     f74:	f5 07       	cpc	r31, r21
     f76:	20 f0       	brcs	.+8      	; 0xf80 <__udivmodsi4_ep>
     f78:	a2 1b       	sub	r26, r18
     f7a:	b3 0b       	sbc	r27, r19
     f7c:	e4 0b       	sbc	r30, r20
     f7e:	f5 0b       	sbc	r31, r21

00000f80 <__udivmodsi4_ep>:
     f80:	66 1f       	adc	r22, r22
     f82:	77 1f       	adc	r23, r23
     f84:	88 1f       	adc	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	1a 94       	dec	r1
     f8a:	69 f7       	brne	.-38     	; 0xf66 <__udivmodsi4_loop>
     f8c:	60 95       	com	r22
     f8e:	70 95       	com	r23
     f90:	80 95       	com	r24
     f92:	90 95       	com	r25
     f94:	9b 01       	movw	r18, r22
     f96:	ac 01       	movw	r20, r24
     f98:	bd 01       	movw	r22, r26
     f9a:	cf 01       	movw	r24, r30
     f9c:	08 95       	ret

00000f9e <__divmodsi4>:
     f9e:	05 2e       	mov	r0, r21
     fa0:	97 fb       	bst	r25, 7
     fa2:	1e f4       	brtc	.+6      	; 0xfaa <__divmodsi4+0xc>
     fa4:	00 94       	com	r0
     fa6:	0e 94 e6 07 	call	0xfcc	; 0xfcc <__negsi2>
     faa:	57 fd       	sbrc	r21, 7
     fac:	07 d0       	rcall	.+14     	; 0xfbc <__divmodsi4_neg2>
     fae:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__udivmodsi4>
     fb2:	07 fc       	sbrc	r0, 7
     fb4:	03 d0       	rcall	.+6      	; 0xfbc <__divmodsi4_neg2>
     fb6:	4e f4       	brtc	.+18     	; 0xfca <__divmodsi4_exit>
     fb8:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__negsi2>

00000fbc <__divmodsi4_neg2>:
     fbc:	50 95       	com	r21
     fbe:	40 95       	com	r20
     fc0:	30 95       	com	r19
     fc2:	21 95       	neg	r18
     fc4:	3f 4f       	sbci	r19, 0xFF	; 255
     fc6:	4f 4f       	sbci	r20, 0xFF	; 255
     fc8:	5f 4f       	sbci	r21, 0xFF	; 255

00000fca <__divmodsi4_exit>:
     fca:	08 95       	ret

00000fcc <__negsi2>:
     fcc:	90 95       	com	r25
     fce:	80 95       	com	r24
     fd0:	70 95       	com	r23
     fd2:	61 95       	neg	r22
     fd4:	7f 4f       	sbci	r23, 0xFF	; 255
     fd6:	8f 4f       	sbci	r24, 0xFF	; 255
     fd8:	9f 4f       	sbci	r25, 0xFF	; 255
     fda:	08 95       	ret

00000fdc <__usmulhisi3>:
     fdc:	0e 94 09 08 	call	0x1012	; 0x1012 <__umulhisi3>

00000fe0 <__usmulhisi3_tail>:
     fe0:	b7 ff       	sbrs	r27, 7
     fe2:	08 95       	ret
     fe4:	82 1b       	sub	r24, r18
     fe6:	93 0b       	sbc	r25, r19
     fe8:	08 95       	ret

00000fea <__udivmodhi4>:
     fea:	aa 1b       	sub	r26, r26
     fec:	bb 1b       	sub	r27, r27
     fee:	51 e1       	ldi	r21, 0x11	; 17
     ff0:	07 c0       	rjmp	.+14     	; 0x1000 <__udivmodhi4_ep>

00000ff2 <__udivmodhi4_loop>:
     ff2:	aa 1f       	adc	r26, r26
     ff4:	bb 1f       	adc	r27, r27
     ff6:	a6 17       	cp	r26, r22
     ff8:	b7 07       	cpc	r27, r23
     ffa:	10 f0       	brcs	.+4      	; 0x1000 <__udivmodhi4_ep>
     ffc:	a6 1b       	sub	r26, r22
     ffe:	b7 0b       	sbc	r27, r23

00001000 <__udivmodhi4_ep>:
    1000:	88 1f       	adc	r24, r24
    1002:	99 1f       	adc	r25, r25
    1004:	5a 95       	dec	r21
    1006:	a9 f7       	brne	.-22     	; 0xff2 <__udivmodhi4_loop>
    1008:	80 95       	com	r24
    100a:	90 95       	com	r25
    100c:	bc 01       	movw	r22, r24
    100e:	cd 01       	movw	r24, r26
    1010:	08 95       	ret

00001012 <__umulhisi3>:
    1012:	a2 9f       	mul	r26, r18
    1014:	b0 01       	movw	r22, r0
    1016:	b3 9f       	mul	r27, r19
    1018:	c0 01       	movw	r24, r0
    101a:	a3 9f       	mul	r26, r19
    101c:	70 0d       	add	r23, r0
    101e:	81 1d       	adc	r24, r1
    1020:	11 24       	eor	r1, r1
    1022:	91 1d       	adc	r25, r1
    1024:	b2 9f       	mul	r27, r18
    1026:	70 0d       	add	r23, r0
    1028:	81 1d       	adc	r24, r1
    102a:	11 24       	eor	r1, r1
    102c:	91 1d       	adc	r25, r1
    102e:	08 95       	ret

00001030 <malloc>:
    1030:	0f 93       	push	r16
    1032:	1f 93       	push	r17
    1034:	cf 93       	push	r28
    1036:	df 93       	push	r29
    1038:	82 30       	cpi	r24, 0x02	; 2
    103a:	91 05       	cpc	r25, r1
    103c:	10 f4       	brcc	.+4      	; 0x1042 <malloc+0x12>
    103e:	82 e0       	ldi	r24, 0x02	; 2
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	e0 91 b6 03 	lds	r30, 0x03B6	; 0x8003b6 <__flp>
    1046:	f0 91 b7 03 	lds	r31, 0x03B7	; 0x8003b7 <__flp+0x1>
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	20 e0       	ldi	r18, 0x00	; 0
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	a0 e0       	ldi	r26, 0x00	; 0
    1052:	30 97       	sbiw	r30, 0x00	; 0
    1054:	99 f4       	brne	.+38     	; 0x107c <malloc+0x4c>
    1056:	21 15       	cp	r18, r1
    1058:	31 05       	cpc	r19, r1
    105a:	09 f4       	brne	.+2      	; 0x105e <malloc+0x2e>
    105c:	47 c0       	rjmp	.+142    	; 0x10ec <malloc+0xbc>
    105e:	28 1b       	sub	r18, r24
    1060:	39 0b       	sbc	r19, r25
    1062:	24 30       	cpi	r18, 0x04	; 4
    1064:	31 05       	cpc	r19, r1
    1066:	c0 f5       	brcc	.+112    	; 0x10d8 <malloc+0xa8>
    1068:	8a 81       	ldd	r24, Y+2	; 0x02
    106a:	9b 81       	ldd	r25, Y+3	; 0x03
    106c:	61 15       	cp	r22, r1
    106e:	71 05       	cpc	r23, r1
    1070:	71 f1       	breq	.+92     	; 0x10ce <malloc+0x9e>
    1072:	fb 01       	movw	r30, r22
    1074:	93 83       	std	Z+3, r25	; 0x03
    1076:	82 83       	std	Z+2, r24	; 0x02
    1078:	fe 01       	movw	r30, r28
    107a:	11 c0       	rjmp	.+34     	; 0x109e <malloc+0x6e>
    107c:	40 81       	ld	r20, Z
    107e:	51 81       	ldd	r21, Z+1	; 0x01
    1080:	02 81       	ldd	r16, Z+2	; 0x02
    1082:	13 81       	ldd	r17, Z+3	; 0x03
    1084:	48 17       	cp	r20, r24
    1086:	59 07       	cpc	r21, r25
    1088:	f8 f0       	brcs	.+62     	; 0x10c8 <malloc+0x98>
    108a:	48 17       	cp	r20, r24
    108c:	59 07       	cpc	r21, r25
    108e:	99 f4       	brne	.+38     	; 0x10b6 <malloc+0x86>
    1090:	10 97       	sbiw	r26, 0x00	; 0
    1092:	61 f0       	breq	.+24     	; 0x10ac <malloc+0x7c>
    1094:	12 96       	adiw	r26, 0x02	; 2
    1096:	0c 93       	st	X, r16
    1098:	12 97       	sbiw	r26, 0x02	; 2
    109a:	13 96       	adiw	r26, 0x03	; 3
    109c:	1c 93       	st	X, r17
    109e:	32 96       	adiw	r30, 0x02	; 2
    10a0:	cf 01       	movw	r24, r30
    10a2:	df 91       	pop	r29
    10a4:	cf 91       	pop	r28
    10a6:	1f 91       	pop	r17
    10a8:	0f 91       	pop	r16
    10aa:	08 95       	ret
    10ac:	00 93 b6 03 	sts	0x03B6, r16	; 0x8003b6 <__flp>
    10b0:	10 93 b7 03 	sts	0x03B7, r17	; 0x8003b7 <__flp+0x1>
    10b4:	f4 cf       	rjmp	.-24     	; 0x109e <malloc+0x6e>
    10b6:	21 15       	cp	r18, r1
    10b8:	31 05       	cpc	r19, r1
    10ba:	19 f0       	breq	.+6      	; 0x10c2 <malloc+0x92>
    10bc:	42 17       	cp	r20, r18
    10be:	53 07       	cpc	r21, r19
    10c0:	18 f4       	brcc	.+6      	; 0x10c8 <malloc+0x98>
    10c2:	9a 01       	movw	r18, r20
    10c4:	bd 01       	movw	r22, r26
    10c6:	ef 01       	movw	r28, r30
    10c8:	df 01       	movw	r26, r30
    10ca:	f8 01       	movw	r30, r16
    10cc:	c2 cf       	rjmp	.-124    	; 0x1052 <malloc+0x22>
    10ce:	90 93 b7 03 	sts	0x03B7, r25	; 0x8003b7 <__flp+0x1>
    10d2:	80 93 b6 03 	sts	0x03B6, r24	; 0x8003b6 <__flp>
    10d6:	d0 cf       	rjmp	.-96     	; 0x1078 <malloc+0x48>
    10d8:	fe 01       	movw	r30, r28
    10da:	e2 0f       	add	r30, r18
    10dc:	f3 1f       	adc	r31, r19
    10de:	81 93       	st	Z+, r24
    10e0:	91 93       	st	Z+, r25
    10e2:	22 50       	subi	r18, 0x02	; 2
    10e4:	31 09       	sbc	r19, r1
    10e6:	39 83       	std	Y+1, r19	; 0x01
    10e8:	28 83       	st	Y, r18
    10ea:	da cf       	rjmp	.-76     	; 0x10a0 <malloc+0x70>
    10ec:	20 91 b4 03 	lds	r18, 0x03B4	; 0x8003b4 <__brkval>
    10f0:	30 91 b5 03 	lds	r19, 0x03B5	; 0x8003b5 <__brkval+0x1>
    10f4:	23 2b       	or	r18, r19
    10f6:	41 f4       	brne	.+16     	; 0x1108 <__stack+0x9>
    10f8:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <__malloc_heap_start>
    10fc:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <__malloc_heap_start+0x1>
    1100:	30 93 b5 03 	sts	0x03B5, r19	; 0x8003b5 <__brkval+0x1>
    1104:	20 93 b4 03 	sts	0x03B4, r18	; 0x8003b4 <__brkval>
    1108:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <__malloc_heap_end>
    110c:	30 91 19 01 	lds	r19, 0x0119	; 0x800119 <__malloc_heap_end+0x1>
    1110:	21 15       	cp	r18, r1
    1112:	31 05       	cpc	r19, r1
    1114:	41 f4       	brne	.+16     	; 0x1126 <__stack+0x27>
    1116:	2d b7       	in	r18, 0x3d	; 61
    1118:	3e b7       	in	r19, 0x3e	; 62
    111a:	40 91 1c 01 	lds	r20, 0x011C	; 0x80011c <__malloc_margin>
    111e:	50 91 1d 01 	lds	r21, 0x011D	; 0x80011d <__malloc_margin+0x1>
    1122:	24 1b       	sub	r18, r20
    1124:	35 0b       	sbc	r19, r21
    1126:	40 91 b4 03 	lds	r20, 0x03B4	; 0x8003b4 <__brkval>
    112a:	50 91 b5 03 	lds	r21, 0x03B5	; 0x8003b5 <__brkval+0x1>
    112e:	42 17       	cp	r20, r18
    1130:	53 07       	cpc	r21, r19
    1132:	08 f0       	brcs	.+2      	; 0x1136 <__stack+0x37>
    1134:	b5 cf       	rjmp	.-150    	; 0x10a0 <malloc+0x70>
    1136:	24 1b       	sub	r18, r20
    1138:	35 0b       	sbc	r19, r21
    113a:	28 17       	cp	r18, r24
    113c:	39 07       	cpc	r19, r25
    113e:	08 f4       	brcc	.+2      	; 0x1142 <__stack+0x43>
    1140:	af cf       	rjmp	.-162    	; 0x10a0 <malloc+0x70>
    1142:	bc 01       	movw	r22, r24
    1144:	6e 5f       	subi	r22, 0xFE	; 254
    1146:	7f 4f       	sbci	r23, 0xFF	; 255
    1148:	26 17       	cp	r18, r22
    114a:	37 07       	cpc	r19, r23
    114c:	08 f4       	brcc	.+2      	; 0x1150 <__stack+0x51>
    114e:	a8 cf       	rjmp	.-176    	; 0x10a0 <malloc+0x70>
    1150:	64 0f       	add	r22, r20
    1152:	75 1f       	adc	r23, r21
    1154:	70 93 b5 03 	sts	0x03B5, r23	; 0x8003b5 <__brkval+0x1>
    1158:	60 93 b4 03 	sts	0x03B4, r22	; 0x8003b4 <__brkval>
    115c:	fa 01       	movw	r30, r20
    115e:	81 93       	st	Z+, r24
    1160:	91 93       	st	Z+, r25
    1162:	9e cf       	rjmp	.-196    	; 0x10a0 <malloc+0x70>

00001164 <free>:
    1164:	cf 93       	push	r28
    1166:	df 93       	push	r29
    1168:	00 97       	sbiw	r24, 0x00	; 0
    116a:	e9 f0       	breq	.+58     	; 0x11a6 <free+0x42>
    116c:	fc 01       	movw	r30, r24
    116e:	32 97       	sbiw	r30, 0x02	; 2
    1170:	13 82       	std	Z+3, r1	; 0x03
    1172:	12 82       	std	Z+2, r1	; 0x02
    1174:	c0 91 b6 03 	lds	r28, 0x03B6	; 0x8003b6 <__flp>
    1178:	d0 91 b7 03 	lds	r29, 0x03B7	; 0x8003b7 <__flp+0x1>
    117c:	de 01       	movw	r26, r28
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	20 e0       	ldi	r18, 0x00	; 0
    1182:	20 97       	sbiw	r28, 0x00	; 0
    1184:	a1 f4       	brne	.+40     	; 0x11ae <free+0x4a>
    1186:	20 81       	ld	r18, Z
    1188:	31 81       	ldd	r19, Z+1	; 0x01
    118a:	82 0f       	add	r24, r18
    118c:	93 1f       	adc	r25, r19
    118e:	20 91 b4 03 	lds	r18, 0x03B4	; 0x8003b4 <__brkval>
    1192:	30 91 b5 03 	lds	r19, 0x03B5	; 0x8003b5 <__brkval+0x1>
    1196:	28 17       	cp	r18, r24
    1198:	39 07       	cpc	r19, r25
    119a:	09 f0       	breq	.+2      	; 0x119e <free+0x3a>
    119c:	67 c0       	rjmp	.+206    	; 0x126c <free+0x108>
    119e:	f0 93 b5 03 	sts	0x03B5, r31	; 0x8003b5 <__brkval+0x1>
    11a2:	e0 93 b4 03 	sts	0x03B4, r30	; 0x8003b4 <__brkval>
    11a6:	df 91       	pop	r29
    11a8:	cf 91       	pop	r28
    11aa:	08 95       	ret
    11ac:	da 01       	movw	r26, r20
    11ae:	ae 17       	cp	r26, r30
    11b0:	bf 07       	cpc	r27, r31
    11b2:	08 f0       	brcs	.+2      	; 0x11b6 <free+0x52>
    11b4:	40 c0       	rjmp	.+128    	; 0x1236 <free+0xd2>
    11b6:	12 96       	adiw	r26, 0x02	; 2
    11b8:	4d 91       	ld	r20, X+
    11ba:	5c 91       	ld	r21, X
    11bc:	13 97       	sbiw	r26, 0x03	; 3
    11be:	9d 01       	movw	r18, r26
    11c0:	41 15       	cp	r20, r1
    11c2:	51 05       	cpc	r21, r1
    11c4:	99 f7       	brne	.-26     	; 0x11ac <free+0x48>
    11c6:	d9 01       	movw	r26, r18
    11c8:	13 96       	adiw	r26, 0x03	; 3
    11ca:	fc 93       	st	X, r31
    11cc:	ee 93       	st	-X, r30
    11ce:	12 97       	sbiw	r26, 0x02	; 2
    11d0:	4d 91       	ld	r20, X+
    11d2:	5d 91       	ld	r21, X+
    11d4:	a4 0f       	add	r26, r20
    11d6:	b5 1f       	adc	r27, r21
    11d8:	ea 17       	cp	r30, r26
    11da:	fb 07       	cpc	r31, r27
    11dc:	79 f4       	brne	.+30     	; 0x11fc <free+0x98>
    11de:	80 81       	ld	r24, Z
    11e0:	91 81       	ldd	r25, Z+1	; 0x01
    11e2:	02 96       	adiw	r24, 0x02	; 2
    11e4:	84 0f       	add	r24, r20
    11e6:	95 1f       	adc	r25, r21
    11e8:	d9 01       	movw	r26, r18
    11ea:	11 96       	adiw	r26, 0x01	; 1
    11ec:	9c 93       	st	X, r25
    11ee:	8e 93       	st	-X, r24
    11f0:	82 81       	ldd	r24, Z+2	; 0x02
    11f2:	93 81       	ldd	r25, Z+3	; 0x03
    11f4:	13 96       	adiw	r26, 0x03	; 3
    11f6:	9c 93       	st	X, r25
    11f8:	8e 93       	st	-X, r24
    11fa:	12 97       	sbiw	r26, 0x02	; 2
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	a0 e0       	ldi	r26, 0x00	; 0
    1200:	8a 81       	ldd	r24, Y+2	; 0x02
    1202:	9b 81       	ldd	r25, Y+3	; 0x03
    1204:	00 97       	sbiw	r24, 0x00	; 0
    1206:	b9 f5       	brne	.+110    	; 0x1276 <free+0x112>
    1208:	fe 01       	movw	r30, r28
    120a:	81 91       	ld	r24, Z+
    120c:	91 91       	ld	r25, Z+
    120e:	e8 0f       	add	r30, r24
    1210:	f9 1f       	adc	r31, r25
    1212:	80 91 b4 03 	lds	r24, 0x03B4	; 0x8003b4 <__brkval>
    1216:	90 91 b5 03 	lds	r25, 0x03B5	; 0x8003b5 <__brkval+0x1>
    121a:	8e 17       	cp	r24, r30
    121c:	9f 07       	cpc	r25, r31
    121e:	19 f6       	brne	.-122    	; 0x11a6 <free+0x42>
    1220:	10 97       	sbiw	r26, 0x00	; 0
    1222:	61 f5       	brne	.+88     	; 0x127c <free+0x118>
    1224:	10 92 b7 03 	sts	0x03B7, r1	; 0x8003b7 <__flp+0x1>
    1228:	10 92 b6 03 	sts	0x03B6, r1	; 0x8003b6 <__flp>
    122c:	d0 93 b5 03 	sts	0x03B5, r29	; 0x8003b5 <__brkval+0x1>
    1230:	c0 93 b4 03 	sts	0x03B4, r28	; 0x8003b4 <__brkval>
    1234:	b8 cf       	rjmp	.-144    	; 0x11a6 <free+0x42>
    1236:	b3 83       	std	Z+3, r27	; 0x03
    1238:	a2 83       	std	Z+2, r26	; 0x02
    123a:	40 81       	ld	r20, Z
    123c:	51 81       	ldd	r21, Z+1	; 0x01
    123e:	84 0f       	add	r24, r20
    1240:	95 1f       	adc	r25, r21
    1242:	a8 17       	cp	r26, r24
    1244:	b9 07       	cpc	r27, r25
    1246:	71 f4       	brne	.+28     	; 0x1264 <free+0x100>
    1248:	4e 5f       	subi	r20, 0xFE	; 254
    124a:	5f 4f       	sbci	r21, 0xFF	; 255
    124c:	8d 91       	ld	r24, X+
    124e:	9c 91       	ld	r25, X
    1250:	11 97       	sbiw	r26, 0x01	; 1
    1252:	48 0f       	add	r20, r24
    1254:	59 1f       	adc	r21, r25
    1256:	51 83       	std	Z+1, r21	; 0x01
    1258:	40 83       	st	Z, r20
    125a:	12 96       	adiw	r26, 0x02	; 2
    125c:	8d 91       	ld	r24, X+
    125e:	9c 91       	ld	r25, X
    1260:	93 83       	std	Z+3, r25	; 0x03
    1262:	82 83       	std	Z+2, r24	; 0x02
    1264:	21 15       	cp	r18, r1
    1266:	31 05       	cpc	r19, r1
    1268:	09 f0       	breq	.+2      	; 0x126c <free+0x108>
    126a:	ad cf       	rjmp	.-166    	; 0x11c6 <free+0x62>
    126c:	f0 93 b7 03 	sts	0x03B7, r31	; 0x8003b7 <__flp+0x1>
    1270:	e0 93 b6 03 	sts	0x03B6, r30	; 0x8003b6 <__flp>
    1274:	98 cf       	rjmp	.-208    	; 0x11a6 <free+0x42>
    1276:	de 01       	movw	r26, r28
    1278:	ec 01       	movw	r28, r24
    127a:	c2 cf       	rjmp	.-124    	; 0x1200 <free+0x9c>
    127c:	13 96       	adiw	r26, 0x03	; 3
    127e:	1c 92       	st	X, r1
    1280:	1e 92       	st	-X, r1
    1282:	12 97       	sbiw	r26, 0x02	; 2
    1284:	d3 cf       	rjmp	.-90     	; 0x122c <free+0xc8>

00001286 <_exit>:
    1286:	f8 94       	cli

00001288 <__stop_program>:
    1288:	ff cf       	rjmp	.-2      	; 0x1288 <__stop_program>
