
sensa_motor_board.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000094  00800100  00001208  0000129c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001208  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000220  00800194  00800194  00001330  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001330  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001344  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  00001388  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002dce  00000000  00000000  000015b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001955  00000000  00000000  0000437e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002b4c  00000000  00000000  00005cd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000040c  00000000  00000000  00008820  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009a2  00000000  00000000  00008c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000173d  00000000  00000000  000095ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  0000ad0b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
       4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      30:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_12>
      34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      48:	0c 94 19 02 	jmp	0x432	; 0x432 <__vector_18>
      4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      80:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      88:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      8c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e8 e0       	ldi	r30, 0x08	; 8
      a8:	f2 e1       	ldi	r31, 0x12	; 18
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	a4 39       	cpi	r26, 0x94	; 148
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	23 e0       	ldi	r18, 0x03	; 3
      bc:	a4 e9       	ldi	r26, 0x94	; 148
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a4 3b       	cpi	r26, 0xB4	; 180
      c6:	b2 07       	cpc	r27, r18
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	0e 94 68 06 	call	0xcd0	; 0xcd0 <main>
      ce:	0c 94 02 09 	jmp	0x1204	; 0x1204 <_exit>

000000d2 <__bad_interrupt>:
      d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <timer_register_callback>:
 * Function:        void timer_register_callback(void (*callback)(void))
 * Description:     assign function to timer callback
 */
void timer_register_callback(void (*callback)(void))
{
    timer_callback = callback;
      d6:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <__data_end+0x1>
      da:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <__data_end>
} // end of timer_register_callback()
      de:	08 95       	ret

000000e0 <__vector_12>:

	SREG |= 0x80;
} // end of timer_init()

ISR(TIMER1_COMPA_vect)
{
      e0:	1f 92       	push	r1
      e2:	0f 92       	push	r0
      e4:	0f b6       	in	r0, 0x3f	; 63
      e6:	0f 92       	push	r0
      e8:	11 24       	eor	r1, r1
      ea:	0b b6       	in	r0, 0x3b	; 59
      ec:	0f 92       	push	r0
      ee:	2f 93       	push	r18
      f0:	3f 93       	push	r19
      f2:	4f 93       	push	r20
      f4:	5f 93       	push	r21
      f6:	6f 93       	push	r22
      f8:	7f 93       	push	r23
      fa:	8f 93       	push	r24
      fc:	9f 93       	push	r25
      fe:	af 93       	push	r26
     100:	bf 93       	push	r27
     102:	ef 93       	push	r30
     104:	ff 93       	push	r31
    // if timer_callback function is set, execute it
    if(timer_callback != NULL)
     106:	e0 91 94 01 	lds	r30, 0x0194	; 0x800194 <__data_end>
     10a:	f0 91 95 01 	lds	r31, 0x0195	; 0x800195 <__data_end+0x1>
     10e:	30 97       	sbiw	r30, 0x00	; 0
     110:	09 f0       	breq	.+2      	; 0x114 <__vector_12+0x34>
        timer_callback();
     112:	09 95       	icall

    // increment sys_time
    sys_time++;
     114:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <sys_time>
     118:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <sys_time+0x1>
     11c:	a0 91 98 01 	lds	r26, 0x0198	; 0x800198 <sys_time+0x2>
     120:	b0 91 99 01 	lds	r27, 0x0199	; 0x800199 <sys_time+0x3>
     124:	01 96       	adiw	r24, 0x01	; 1
     126:	a1 1d       	adc	r26, r1
     128:	b1 1d       	adc	r27, r1
     12a:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <sys_time>
     12e:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <sys_time+0x1>
     132:	a0 93 98 01 	sts	0x0198, r26	; 0x800198 <sys_time+0x2>
     136:	b0 93 99 01 	sts	0x0199, r27	; 0x800199 <sys_time+0x3>

}
     13a:	ff 91       	pop	r31
     13c:	ef 91       	pop	r30
     13e:	bf 91       	pop	r27
     140:	af 91       	pop	r26
     142:	9f 91       	pop	r25
     144:	8f 91       	pop	r24
     146:	7f 91       	pop	r23
     148:	6f 91       	pop	r22
     14a:	5f 91       	pop	r21
     14c:	4f 91       	pop	r20
     14e:	3f 91       	pop	r19
     150:	2f 91       	pop	r18
     152:	0f 90       	pop	r0
     154:	0b be       	out	0x3b, r0	; 59
     156:	0f 90       	pop	r0
     158:	0f be       	out	0x3f, r0	; 63
     15a:	0f 90       	pop	r0
     15c:	1f 90       	pop	r1
     15e:	18 95       	reti

00000160 <system_init>:

/*
 * Function:        void system_init(void)
 * Description:     init everything that is needed
 */
void system_init(void) {
     160:	cf 93       	push	r28
     162:	df 93       	push	r29

    #ifdef DEBUG
        USART0_init(9600);
     164:	60 e8       	ldi	r22, 0x80	; 128
     166:	75 e2       	ldi	r23, 0x25	; 37
     168:	80 e0       	ldi	r24, 0x00	; 0
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	0e 94 b3 01 	call	0x366	; 0x366 <USART0_init>
    #endif
    debug_printf("SENSA - Motor control board - DEBUG \n\n");
     170:	8a e1       	ldi	r24, 0x1A	; 26
     172:	91 e0       	ldi	r25, 0x01	; 1
     174:	0e 94 17 02 	call	0x42e	; 0x42e <debug_printf>
    debug_printf("Starting init... ");
     178:	81 e4       	ldi	r24, 0x41	; 65
     17a:	91 e0       	ldi	r25, 0x01	; 1
     17c:	0e 94 17 02 	call	0x42e	; 0x42e <debug_printf>
 * Function:   void init_led(void)
 * Parameter:  init the pins for the LEDs
 */
static void init_led(void) {

    gpio_register_pin(PIN_LED1, GPIO_DIRECTION_OUTPUT, true);      // set led1 as output
     180:	41 e0       	ldi	r20, 0x01	; 1
     182:	61 e0       	ldi	r22, 0x01	; 1
     184:	80 e3       	ldi	r24, 0x30	; 48
     186:	0e 94 b7 03 	call	0x76e	; 0x76e <gpio_register_pin>
    gpio_register_pin(PIN_LED2, GPIO_DIRECTION_OUTPUT, true);      // set led2 as output
     18a:	41 e0       	ldi	r20, 0x01	; 1
     18c:	61 e0       	ldi	r22, 0x01	; 1
     18e:	81 e3       	ldi	r24, 0x31	; 49
     190:	0e 94 b7 03 	call	0x76e	; 0x76e <gpio_register_pin>

    gpio_write_pin(PIN_LED1, LOW);                                  // set led1 low
     194:	60 e0       	ldi	r22, 0x00	; 0
     196:	80 e3       	ldi	r24, 0x30	; 48
     198:	0e 94 12 04 	call	0x824	; 0x824 <gpio_write_pin>
    gpio_write_pin(PIN_LED2, LOW);                                  // set led2 low
     19c:	60 e0       	ldi	r22, 0x00	; 0
     19e:	81 e3       	ldi	r24, 0x31	; 49
     1a0:	0e 94 12 04 	call	0x824	; 0x824 <gpio_write_pin>
    gpio_write_pin(PIN_LED1, HIGH);                       
     1a4:	61 e0       	ldi	r22, 0x01	; 1
     1a6:	80 e3       	ldi	r24, 0x30	; 48
     1a8:	0e 94 12 04 	call	0x824	; 0x824 <gpio_write_pin>
    CAN_Init();
     1ac:	0e 94 95 02 	call	0x52a	; 0x52a <CAN_Init>
	CAN_InitRxMob(MOTOR_CONTROL_CAN_ID);
     1b0:	84 ed       	ldi	r24, 0xD4	; 212
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	0e 94 da 02 	call	0x5b4	; 0x5b4 <CAN_InitRxMob>
    timer_callback = callback;
     1b8:	8a e6       	ldi	r24, 0x6A	; 106
     1ba:	94 e0       	ldi	r25, 0x04	; 4
     1bc:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <__data_end+0x1>
     1c0:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <__data_end>
    TCCR1A = 0;
     1c4:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR1B = (1 << WGM12) | (1 << CS10);
     1c8:	89 e0       	ldi	r24, 0x09	; 9
     1ca:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	OCR1A = (double)F_CPU / (double)freq + 0.5;
     1ce:	80 e8       	ldi	r24, 0x80	; 128
     1d0:	9e e3       	ldi	r25, 0x3E	; 62
     1d2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     1d6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TIMSK1 = 1 << OCIE1A;
     1da:	82 e0       	ldi	r24, 0x02	; 2
     1dc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	SREG |= 0x80;
     1e0:	8f b7       	in	r24, 0x3f	; 63
     1e2:	80 68       	ori	r24, 0x80	; 128
     1e4:	8f bf       	out	0x3f, r24	; 63
    init_stepper();
     1e6:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <init_stepper>
    init_hbridge();
     1ea:	0e 94 3c 05 	call	0xa78	; 0xa78 <init_hbridge>

/*
 * Function:   static void init_switches()
 * Parameter:  init pins for switches (switches_pin)
 */
static void init_switches(void) {
     1ee:	c0 e0       	ldi	r28, 0x00	; 0
     1f0:	d1 e0       	ldi	r29, 0x01	; 1
    for(int i=0; i < 8; i++) {
        gpio_register_pin(switches_pin[i], GPIO_DIRECTION_INPUT, false);
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	60 e0       	ldi	r22, 0x00	; 0
     1f6:	89 91       	ld	r24, Y+
     1f8:	0e 94 b7 03 	call	0x76e	; 0x76e <gpio_register_pin>
    for(int i=0; i < 8; i++) {
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	c8 30       	cpi	r28, 0x08	; 8
     200:	d8 07       	cpc	r29, r24
     202:	b9 f7       	brne	.-18     	; 0x1f2 <system_init+0x92>
    gpio_write_pin(PIN_LED1, LOW); 
     204:	60 e0       	ldi	r22, 0x00	; 0
     206:	80 e3       	ldi	r24, 0x30	; 48
     208:	0e 94 12 04 	call	0x824	; 0x824 <gpio_write_pin>
    debug_printf("finished... \n\n");
     20c:	83 e5       	ldi	r24, 0x53	; 83
     20e:	91 e0       	ldi	r25, 0x01	; 1
}
     210:	df 91       	pop	r29
     212:	cf 91       	pop	r28
    debug_printf("finished... \n\n");
     214:	0c 94 17 02 	jmp	0x42e	; 0x42e <debug_printf>

00000218 <delay>:
  while (0 < ms)
     218:	18 16       	cp	r1, r24
     21a:	19 06       	cpc	r1, r25
     21c:	0c f0       	brlt	.+2      	; 0x220 <delay+0x8>
} // end of delay(int ms)
     21e:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     220:	ef e9       	ldi	r30, 0x9F	; 159
     222:	ff e0       	ldi	r31, 0x0F	; 15
     224:	31 97       	sbiw	r30, 0x01	; 1
     226:	f1 f7       	brne	.-4      	; 0x224 <delay+0xc>
     228:	00 c0       	rjmp	.+0      	; 0x22a <delay+0x12>
     22a:	00 00       	nop
    --ms;
     22c:	01 97       	sbiw	r24, 0x01	; 1
     22e:	f4 cf       	rjmp	.-24     	; 0x218 <delay>

00000230 <read_switch>:
 * Function:   uint8_t read_switch(uint8_t num)
 * Parameter:  read `num` switch
 */
uint8_t read_switch(uint8_t num) {

    return gpio_read_pin(switches_pin[num] - 1);
     230:	e8 2f       	mov	r30, r24
     232:	f0 e0       	ldi	r31, 0x00	; 0
     234:	e0 50       	subi	r30, 0x00	; 0
     236:	ff 4f       	sbci	r31, 0xFF	; 255
     238:	80 81       	ld	r24, Z
     23a:	81 50       	subi	r24, 0x01	; 1
     23c:	0c 94 41 04 	jmp	0x882	; 0x882 <gpio_read_pin>

00000240 <can_send_done>:
canMsg snd_message;

unsigned char dummy_data[8] = {0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff};
unsigned char first_byte, second_byte;

static void can_send_done(void) {
     240:	0f 93       	push	r16
     242:	1f 93       	push	r17
     244:	cf 93       	push	r28
     246:	df 93       	push	r29
     248:	cd b7       	in	r28, 0x3d	; 61
     24a:	de b7       	in	r29, 0x3e	; 62
     24c:	28 97       	sbiw	r28, 0x08	; 8
     24e:	0f b6       	in	r0, 0x3f	; 63
     250:	f8 94       	cli
     252:	de bf       	out	0x3e, r29	; 62
     254:	0f be       	out	0x3f, r0	; 63
     256:	cd bf       	out	0x3d, r28	; 61
	
	unsigned char ready_data[8];

	ready_data[0] = 1;
			 
	memcpy(snd_message.data, ready_data, 8);
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	89 83       	std	Y+1, r24	; 0x01
     25c:	88 e0       	ldi	r24, 0x08	; 8
     25e:	fe 01       	movw	r30, r28
     260:	31 96       	adiw	r30, 0x01	; 1
     262:	ad e9       	ldi	r26, 0x9D	; 157
     264:	b3 e0       	ldi	r27, 0x03	; 3
     266:	01 90       	ld	r0, Z+
     268:	0d 92       	st	X+, r0
     26a:	8a 95       	dec	r24
     26c:	e1 f7       	brne	.-8      	; 0x266 <can_send_done+0x26>
	snd_message.msgIde = MAIN_BOARD_CAN_ID;
     26e:	84 e0       	ldi	r24, 0x04	; 4
     270:	80 93 a5 03 	sts	0x03A5, r24	; 0x8003a5 <snd_message+0x8>
     274:	10 92 a6 03 	sts	0x03A6, r1	; 0x8003a6 <snd_message+0x9>

	if(CAN_write(snd_message) == 1) {
     278:	00 91 9d 03 	lds	r16, 0x039D	; 0x80039d <snd_message>
     27c:	10 91 9e 03 	lds	r17, 0x039E	; 0x80039e <snd_message+0x1>
     280:	20 91 9f 03 	lds	r18, 0x039F	; 0x80039f <snd_message+0x2>
     284:	30 91 a0 03 	lds	r19, 0x03A0	; 0x8003a0 <snd_message+0x3>
     288:	40 91 a1 03 	lds	r20, 0x03A1	; 0x8003a1 <snd_message+0x4>
     28c:	50 91 a2 03 	lds	r21, 0x03A2	; 0x8003a2 <snd_message+0x5>
     290:	60 91 a3 03 	lds	r22, 0x03A3	; 0x8003a3 <snd_message+0x6>
     294:	70 91 a4 03 	lds	r23, 0x03A4	; 0x8003a4 <snd_message+0x7>
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	0e 94 58 03 	call	0x6b0	; 0x6b0 <CAN_write>
		// success
	}
} 
     29e:	28 96       	adiw	r28, 0x08	; 8
     2a0:	0f b6       	in	r0, 0x3f	; 63
     2a2:	f8 94       	cli
     2a4:	de bf       	out	0x3e, r29	; 62
     2a6:	0f be       	out	0x3f, r0	; 63
     2a8:	cd bf       	out	0x3d, r28	; 61
     2aa:	df 91       	pop	r29
     2ac:	cf 91       	pop	r28
     2ae:	1f 91       	pop	r17
     2b0:	0f 91       	pop	r16
     2b2:	08 95       	ret

000002b4 <init_stepper>:
 * Function:    unsigned char init_stepper()
 * Description: init the stepper pins
 */
unsigned char init_stepper(void) {
    
    gpio_register_pin(PIN_STEPPER1_DIR, GPIO_DIRECTION_OUTPUT, false);
     2b4:	40 e0       	ldi	r20, 0x00	; 0
     2b6:	61 e0       	ldi	r22, 0x01	; 1
     2b8:	80 e1       	ldi	r24, 0x10	; 16
     2ba:	0e 94 b7 03 	call	0x76e	; 0x76e <gpio_register_pin>
    gpio_register_pin(PIN_STEPPER1_STEP, GPIO_DIRECTION_OUTPUT, false);
     2be:	40 e0       	ldi	r20, 0x00	; 0
     2c0:	61 e0       	ldi	r22, 0x01	; 1
     2c2:	81 e1       	ldi	r24, 0x11	; 17
     2c4:	0e 94 b7 03 	call	0x76e	; 0x76e <gpio_register_pin>
 //   gpio_register_pin(PIN_STEPPER1_EN, GPIO_DIRECTION_OUTPUT, false);

    gpio_register_pin(PIN_STEPPER2_DIR, GPIO_DIRECTION_OUTPUT, false);
     2c8:	40 e0       	ldi	r20, 0x00	; 0
     2ca:	61 e0       	ldi	r22, 0x01	; 1
     2cc:	83 e1       	ldi	r24, 0x13	; 19
     2ce:	0e 94 b7 03 	call	0x76e	; 0x76e <gpio_register_pin>
    gpio_register_pin(PIN_STEPPER2_STEP, GPIO_DIRECTION_OUTPUT, false);
     2d2:	40 e0       	ldi	r20, 0x00	; 0
     2d4:	61 e0       	ldi	r22, 0x01	; 1
     2d6:	84 e1       	ldi	r24, 0x14	; 20
     2d8:	0e 94 b7 03 	call	0x76e	; 0x76e <gpio_register_pin>
   // enable_stepper(LOW, 1);
    //enable_stepper(LOW, 2);

    return 1;

} // end of init_stepper()
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	08 95       	ret

000002e0 <enable_stepper>:
 *  Function:       void enable_stepper(uint8_t state, uint8_t num)
 *  Description:    enable or disable the stepper driver
 */
void enable_stepper(uint8_t state, uint8_t num) {

    gpio_write_pin(rtn_en(num), state);
     2e0:	91 e0       	ldi	r25, 0x01	; 1
     2e2:	81 11       	cpse	r24, r1
     2e4:	01 c0       	rjmp	.+2      	; 0x2e8 <enable_stepper+0x8>
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	85 e1       	ldi	r24, 0x15	; 21
     2ea:	61 30       	cpi	r22, 0x01	; 1
     2ec:	09 f4       	brne	.+2      	; 0x2f0 <enable_stepper+0x10>
     2ee:	82 e1       	ldi	r24, 0x12	; 18
     2f0:	69 2f       	mov	r22, r25
     2f2:	0c 94 12 04 	jmp	0x824	; 0x824 <gpio_write_pin>

000002f6 <set_rpm_stepper>:
 */
void set_rpm_stepper(int rpm, uint8_t num) {

    stepper_rpm[num-1] = rpm;

} // end of set_rpm_stepper()
     2f6:	08 95       	ret

000002f8 <move_stepper>:

/*
 * Function:        void move_stepper(unsigned int steps, unsigned char dir, uint8_t num)
 * Description:     move the stepper for steps at a certain direction 
 */
void move_stepper(unsigned int steps, unsigned char dir, uint8_t num) {
     2f8:	ef 92       	push	r14
     2fa:	ff 92       	push	r15
     2fc:	1f 93       	push	r17
     2fe:	cf 93       	push	r28
     300:	df 93       	push	r29
     302:	7c 01       	movw	r14, r24
     304:	c4 2f       	mov	r28, r20
    60000/(RPM*STEP) = x, where x is the time between each step

    */
    //int time_calculate = 60000 / (stepper_rpm[num-1] * steps);

    gpio_write_pin(rtn_dir(num), dir);
     306:	91 e0       	ldi	r25, 0x01	; 1
     308:	61 11       	cpse	r22, r1
     30a:	01 c0       	rjmp	.+2      	; 0x30e <move_stepper+0x16>
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	83 e1       	ldi	r24, 0x13	; 19
     310:	c1 30       	cpi	r28, 0x01	; 1
     312:	09 f4       	brne	.+2      	; 0x316 <move_stepper+0x1e>
     314:	80 e1       	ldi	r24, 0x10	; 16
     316:	69 2f       	mov	r22, r25
     318:	0e 94 12 04 	call	0x824	; 0x824 <gpio_write_pin>

    for(unsigned int i=0; i<steps; i++) {
     31c:	11 e1       	ldi	r17, 0x11	; 17
     31e:	c1 30       	cpi	r28, 0x01	; 1
     320:	09 f0       	breq	.+2      	; 0x324 <move_stepper+0x2c>
     322:	14 e1       	ldi	r17, 0x14	; 20
     324:	d0 e0       	ldi	r29, 0x00	; 0
     326:	c0 e0       	ldi	r28, 0x00	; 0
     328:	ce 15       	cp	r28, r14
     32a:	df 05       	cpc	r29, r15
     32c:	31 f4       	brne	.+12     	; 0x33a <move_stepper+0x42>
        //delay(time_calculate/2);
        gpio_write_pin(rtn_step(num), OFF);
        _delay_ms(1);
        //delay(time_calculate/2);
    }
} // end of move_stepper()
     32e:	df 91       	pop	r29
     330:	cf 91       	pop	r28
     332:	1f 91       	pop	r17
     334:	ff 90       	pop	r15
     336:	ef 90       	pop	r14
     338:	08 95       	ret
        gpio_write_pin(rtn_step(num), ON);
     33a:	61 e0       	ldi	r22, 0x01	; 1
     33c:	81 2f       	mov	r24, r17
     33e:	0e 94 12 04 	call	0x824	; 0x824 <gpio_write_pin>
     342:	8f e9       	ldi	r24, 0x9F	; 159
     344:	9f e0       	ldi	r25, 0x0F	; 15
     346:	01 97       	sbiw	r24, 0x01	; 1
     348:	f1 f7       	brne	.-4      	; 0x346 <move_stepper+0x4e>
     34a:	00 c0       	rjmp	.+0      	; 0x34c <move_stepper+0x54>
     34c:	00 00       	nop
        gpio_write_pin(rtn_step(num), OFF);
     34e:	60 e0       	ldi	r22, 0x00	; 0
     350:	81 2f       	mov	r24, r17
     352:	0e 94 12 04 	call	0x824	; 0x824 <gpio_write_pin>
     356:	8f e9       	ldi	r24, 0x9F	; 159
     358:	9f e0       	ldi	r25, 0x0F	; 15
     35a:	01 97       	sbiw	r24, 0x01	; 1
     35c:	f1 f7       	brne	.-4      	; 0x35a <move_stepper+0x62>
     35e:	00 c0       	rjmp	.+0      	; 0x360 <move_stepper+0x68>
     360:	00 00       	nop
    for(unsigned int i=0; i<steps; i++) {
     362:	21 96       	adiw	r28, 0x01	; 1
     364:	e1 cf       	rjmp	.-62     	; 0x328 <move_stepper+0x30>

00000366 <USART0_init>:
 */
void USART0_init(uint32_t baud)
{
	uint32_t temp_baud = 0;

	temp_baud = (F_CPU / (8 * baud)) - 1;
     366:	9b 01       	movw	r18, r22
     368:	ac 01       	movw	r20, r24
     36a:	83 e0       	ldi	r24, 0x03	; 3
     36c:	22 0f       	add	r18, r18
     36e:	33 1f       	adc	r19, r19
     370:	44 1f       	adc	r20, r20
     372:	55 1f       	adc	r21, r21
     374:	8a 95       	dec	r24
     376:	d1 f7       	brne	.-12     	; 0x36c <USART0_init+0x6>
     378:	60 e0       	ldi	r22, 0x00	; 0
     37a:	74 e2       	ldi	r23, 0x24	; 36
     37c:	84 ef       	ldi	r24, 0xF4	; 244
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	0e 94 6c 07 	call	0xed8	; 0xed8 <__udivmodsi4>
     384:	ba 01       	movw	r22, r20
     386:	a9 01       	movw	r20, r18
     388:	41 50       	subi	r20, 0x01	; 1
     38a:	51 09       	sbc	r21, r1
     38c:	61 09       	sbc	r22, r1
     38e:	71 09       	sbc	r23, r1

	//Set baud rate
	UBRR0H = (unsigned char) (temp_baud >> 8);
     390:	bb 27       	eor	r27, r27
     392:	a7 2f       	mov	r26, r23
     394:	96 2f       	mov	r25, r22
     396:	85 2f       	mov	r24, r21
     398:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char) temp_baud;
     39c:	40 93 c4 00 	sts	0x00C4, r20	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	UCSR0A |= (1 << U2X0);
     3a0:	e0 ec       	ldi	r30, 0xC0	; 192
     3a2:	f0 e0       	ldi	r31, 0x00	; 0
     3a4:	80 81       	ld	r24, Z
     3a6:	82 60       	ori	r24, 0x02	; 2
     3a8:	80 83       	st	Z, r24

	UCSR0B |= (1 << RXEN0);							// Disable RX
     3aa:	e1 ec       	ldi	r30, 0xC1	; 193
     3ac:	f0 e0       	ldi	r31, 0x00	; 0
     3ae:	80 81       	ld	r24, Z
     3b0:	80 61       	ori	r24, 0x10	; 16
     3b2:	80 83       	st	Z, r24

	DDRE |= (1 << PE1);								// Set TX as output
     3b4:	69 9a       	sbi	0x0d, 1	; 13
	DDRE &= ~(1 << PE0);							// Set RX as input
     3b6:	68 98       	cbi	0x0d, 0	; 13

	UCSR0B |= (1 << TXEN0);							//Enable TX
     3b8:	80 81       	ld	r24, Z
     3ba:	88 60       	ori	r24, 0x08	; 8
     3bc:	80 83       	st	Z, r24
	UCSR0B &= ~(1 << UCSZ02);						//Data size
     3be:	80 81       	ld	r24, Z
     3c0:	8b 7f       	andi	r24, 0xFB	; 251
     3c2:	80 83       	st	Z, r24

	// async, no parity, 1 stop bit, 8 bit data size
	UCSR0C &= ~(1 << 7);
     3c4:	e2 ec       	ldi	r30, 0xC2	; 194
     3c6:	f0 e0       	ldi	r31, 0x00	; 0
     3c8:	80 81       	ld	r24, Z
     3ca:	8f 77       	andi	r24, 0x7F	; 127
     3cc:	80 83       	st	Z, r24
	UCSR0C &= ~(1 << UMSEL0);
     3ce:	80 81       	ld	r24, Z
     3d0:	8f 7b       	andi	r24, 0xBF	; 191
     3d2:	80 83       	st	Z, r24
	UCSR0C &= ~(1 << UPM01) ;
     3d4:	80 81       	ld	r24, Z
     3d6:	8f 7d       	andi	r24, 0xDF	; 223
     3d8:	80 83       	st	Z, r24
	UCSR0C &= ~(1 << UPM00);
     3da:	80 81       	ld	r24, Z
     3dc:	8f 7e       	andi	r24, 0xEF	; 239
     3de:	80 83       	st	Z, r24
	UCSR0C &= ~(1 << USBS0);
     3e0:	80 81       	ld	r24, Z
     3e2:	87 7f       	andi	r24, 0xF7	; 247
     3e4:	80 83       	st	Z, r24
	UCSR0C &= ~(1 << USBS0);
     3e6:	80 81       	ld	r24, Z
     3e8:	87 7f       	andi	r24, 0xF7	; 247
     3ea:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ01);
     3ec:	80 81       	ld	r24, Z
     3ee:	84 60       	ori	r24, 0x04	; 4
     3f0:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ00);
     3f2:	80 81       	ld	r24, Z
     3f4:	82 60       	ori	r24, 0x02	; 2
     3f6:	80 83       	st	Z, r24

} // end of USART0_init()
     3f8:	08 95       	ret

000003fa <USART0_transmit>:
 *	Function: 		void USART0_transmit(unsigned char data)
 *  Description: 	transmit unsigned char through USART0
 */
void USART0_transmit(unsigned char data)
{
	while ( ! ( UCSR0A & (1<<UDRE0))); 				// Wait for empty transmit buffer
     3fa:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     3fe:	95 ff       	sbrs	r25, 5
     400:	fc cf       	rjmp	.-8      	; 0x3fa <USART0_transmit>

	UDR0 = data; 									// Put data into buffer, sends the data
     402:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

} // end of USART0_transmit()
     406:	08 95       	ret

00000408 <USART0_receive>:
 *	Function: 		unsigned char USART0_receive(void)
 *  Description: 	receive data through USART0
 */
unsigned char USART0_receive(void)
{
	while ( ! (UCSR0A & (1<<RXC0)));				// Wait for data to be received
     408:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     40c:	87 ff       	sbrs	r24, 7
     40e:	fc cf       	rjmp	.-8      	; 0x408 <USART0_receive>

	return UDR0;									// return it
     410:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
} // end of USART0_receive()
     414:	08 95       	ret

00000416 <USART0_string>:
/*
 *	Function: 		void USART0_string(char *s)
 *  Description: 	transmit a string through USART0
 */
void USART0_string(char *s)
{
     416:	cf 93       	push	r28
     418:	df 93       	push	r29
     41a:	ec 01       	movw	r28, r24
   	while (*s != 0x00)
     41c:	89 91       	ld	r24, Y+
     41e:	81 11       	cpse	r24, r1
     420:	03 c0       	rjmp	.+6      	; 0x428 <USART0_string+0x12>
   	{
		USART0_transmit(*s);
      	s++;
   	}
} // end of USART0_string()
     422:	df 91       	pop	r29
     424:	cf 91       	pop	r28
     426:	08 95       	ret
		USART0_transmit(*s);
     428:	0e 94 fd 01 	call	0x3fa	; 0x3fa <USART0_transmit>
      	s++;
     42c:	f7 cf       	rjmp	.-18     	; 0x41c <USART0_string+0x6>

0000042e <debug_printf>:
 */
void debug_printf(char *s) {
	#ifdef DEBUG
		USART0_string(*s);
	#endif
} // end of debug_printf()
     42e:	08 95       	ret

00000430 <debug_printf_num>:
	#ifdef DEBUG
		char converted[30];
		itoa(num, msg, 10);
		USART0_string(converted);
	#endif
     430:	08 95       	ret

00000432 <__vector_18>:
static volatile unsigned char rxWrIndex = 0;
static volatile unsigned char rxCounter = 0;

// Interrupt Service Routine
ISR(CANIT_vect)
{
     432:	0f 92       	push	r0
     434:	0f b6       	in	r0, 0x3f	; 63
     436:	0f 92       	push	r0
     438:	1f 92       	push	r1
     43a:	11 24       	eor	r1, r1
     43c:	2f 93       	push	r18
     43e:	2b b7       	in	r18, 0x3b	; 59
     440:	2f 93       	push	r18
     442:	3f 93       	push	r19
     444:	4f 93       	push	r20
     446:	5f 93       	push	r21
     448:	8f 93       	push	r24
     44a:	9f 93       	push	r25
     44c:	af 93       	push	r26
     44e:	bf 93       	push	r27
     450:	ef 93       	push	r30
     452:	ff 93       	push	r31
	unsigned char tempPage = CANPAGE;
     454:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     458:	80 e0       	ldi	r24, 0x00	; 0
	unsigned char ch;

	// prolazim redom kroz MOb- ove i gledam da li se nesto dogadja
	for(ch = 0; ch < 15; ch++)
	{
		CANPAGE = ch << 4;
     45a:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

		// proveravam da li je uspesno primljen podatak (ako je MOb bio podesen kao prijemnik)
		// PRIJEMNI MOb- ovi uvek ostaju prijemni!
		if( (CANSTMOB >> RXOK) & 0x01)	//receive interrupt
     45e:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     462:	95 ff       	sbrs	r25, 5
     464:	51 c0       	rjmp	.+162    	; 0x508 <__vector_18+0xd6>
		{
			// PRIJEMNI MOb- ovi uvek ostaju prijemni!
			CANCDMOB = (1 << CONMOB1); // podesavam MOb kao receiver
     466:	80 e8       	ldi	r24, 0x80	; 128
     468:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
			CANSTMOB &= ~(1 << RXOK); // resetujem flag
     46c:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     470:	8f 7d       	andi	r24, 0xDF	; 223
     472:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	80 e0       	ldi	r24, 0x00	; 0

			for(unsigned char i = 0; i < 8; i++)
				rxBuffer[rxWrIndex].data[i] = CANMSG;
     47a:	ea e0       	ldi	r30, 0x0A	; 10
     47c:	40 91 9b 01 	lds	r20, 0x019B	; 0x80019b <rxWrIndex>
     480:	20 91 fa 00 	lds	r18, 0x00FA	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
     484:	dc 01       	movw	r26, r24
     486:	e4 9f       	mul	r30, r20
     488:	a0 0d       	add	r26, r0
     48a:	b1 1d       	adc	r27, r1
     48c:	11 24       	eor	r1, r1
     48e:	a3 56       	subi	r26, 0x63	; 99
     490:	be 4f       	sbci	r27, 0xFE	; 254
     492:	2c 93       	st	X, r18
     494:	01 96       	adiw	r24, 0x01	; 1
			for(unsigned char i = 0; i < 8; i++)
     496:	88 30       	cpi	r24, 0x08	; 8
     498:	91 05       	cpc	r25, r1
     49a:	81 f7       	brne	.-32     	; 0x47c <__vector_18+0x4a>
			//altUart1Write(rxBuffer[rxWrIndex].data[0]);

			rxBuffer[rxWrIndex].msgIde = (CANIDT2 >> 5) | (CANIDT1 << 3);
     49c:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     4a0:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     4a4:	40 91 9b 01 	lds	r20, 0x019B	; 0x80019b <rxWrIndex>
     4a8:	22 95       	swap	r18
     4aa:	26 95       	lsr	r18
     4ac:	27 70       	andi	r18, 0x07	; 7
     4ae:	58 e0       	ldi	r21, 0x08	; 8
     4b0:	85 9f       	mul	r24, r21
     4b2:	c0 01       	movw	r24, r0
     4b4:	11 24       	eor	r1, r1
     4b6:	82 2b       	or	r24, r18
     4b8:	e4 9f       	mul	r30, r20
     4ba:	f0 01       	movw	r30, r0
     4bc:	11 24       	eor	r1, r1
     4be:	e3 56       	subi	r30, 0x63	; 99
     4c0:	fe 4f       	sbci	r31, 0xFE	; 254
     4c2:	91 87       	std	Z+9, r25	; 0x09
     4c4:	80 87       	std	Z+8, r24	; 0x08

			if(++rxWrIndex == RX_BUFFER_SIZE)
     4c6:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <rxWrIndex>
     4ca:	8f 5f       	subi	r24, 0xFF	; 255
     4cc:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <rxWrIndex>
     4d0:	82 33       	cpi	r24, 0x32	; 50
     4d2:	11 f4       	brne	.+4      	; 0x4d8 <__vector_18+0xa6>
				rxWrIndex = 0;
     4d4:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <rxWrIndex>

			rxCounter++;
     4d8:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <rxCounter>
     4dc:	8f 5f       	subi	r24, 0xFF	; 255
     4de:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <rxCounter>

			break;
		}
	}

	CANPAGE = tempPage;
     4e2:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	//CANGIT = CANGIT; // jako retardirano
}
     4e6:	ff 91       	pop	r31
     4e8:	ef 91       	pop	r30
     4ea:	bf 91       	pop	r27
     4ec:	af 91       	pop	r26
     4ee:	9f 91       	pop	r25
     4f0:	8f 91       	pop	r24
     4f2:	5f 91       	pop	r21
     4f4:	4f 91       	pop	r20
     4f6:	3f 91       	pop	r19
     4f8:	2f 91       	pop	r18
     4fa:	2b bf       	out	0x3b, r18	; 59
     4fc:	2f 91       	pop	r18
     4fe:	1f 90       	pop	r1
     500:	0f 90       	pop	r0
     502:	0f be       	out	0x3f, r0	; 63
     504:	0f 90       	pop	r0
     506:	18 95       	reti
		if( (CANSTMOB >> TXOK) & 0x01)	//transmit interrupt
     508:	90 91 ee 00 	lds	r25, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     50c:	96 ff       	sbrs	r25, 6
     50e:	08 c0       	rjmp	.+16     	; 0x520 <__vector_18+0xee>
			CANCDMOB = 0; // disable mob
     510:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
			CANSTMOB &= ~(1 << TXOK); // resetujem flag
     514:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
     518:	8f 7b       	andi	r24, 0xBF	; 191
     51a:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
			break;
     51e:	e1 cf       	rjmp	.-62     	; 0x4e2 <__vector_18+0xb0>
     520:	80 5f       	subi	r24, 0xF0	; 240
	for(ch = 0; ch < 15; ch++)
     522:	80 3f       	cpi	r24, 0xF0	; 240
     524:	09 f0       	breq	.+2      	; 0x528 <__vector_18+0xf6>
     526:	99 cf       	rjmp	.-206    	; 0x45a <__vector_18+0x28>
     528:	dc cf       	rjmp	.-72     	; 0x4e2 <__vector_18+0xb0>

0000052a <CAN_Init>:
{
	unsigned char ch;
	unsigned char data;

	// Reset the CAN controller
	CANGCON = 0x01;
     52a:	81 e0       	ldi	r24, 0x01	; 1
     52c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     530:	80 e0       	ldi	r24, 0x00	; 0

	// idem od 0 do 14 MOba i resetujem ih, zato sto posle reseta MObovi imaju nedefinisano stanje
	for(ch = 0; ch < 15; ch++)
	{
		CANPAGE = ch << 4;
     532:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

		CANSTMOB = 0;
     536:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
		CANCDMOB = 0;
     53a:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

		CANIDT1 = 0;
     53e:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		CANIDT2 = 0;
     542:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT3 = 0;
     546:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		CANIDT4 = 0;
     54a:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		CANIDM1 = 0;
     54e:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
		CANIDM2 = 0;
     552:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
		CANIDM3 = 0;
     556:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
		CANIDM4 = 0;
     55a:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>

		// CANMSG je organizovan kao 8- bajtni FIFO red
		// koristi se auto-increment pa ce proci kroz svih 8 bajtova poruke-> organizovan kao FIFO
		for (data = 0; data < 8; data++)
			CANMSG = 0;
     55e:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
     562:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
     566:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
     56a:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
     56e:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
     572:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
     576:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
     57a:	10 92 fa 00 	sts	0x00FA, r1	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
     57e:	80 5f       	subi	r24, 0xF0	; 240
	for(ch = 0; ch < 15; ch++)
     580:	80 3f       	cpi	r24, 0xF0	; 240
     582:	b9 f6       	brne	.-82     	; 0x532 <CAN_Init+0x8>
	}


	// Enable the CAN controller
	CANGCON = 0x02;
     584:	82 e0       	ldi	r24, 0x02	; 2
     586:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
        {0x06, 0x0C, 0x37},                //< -- 250Kb/s, 16x Tscl, sampling at 75%
        {0x06, 0x04, 0x13},                //< -- 500Kb/s,  8x Tscl, sampling at 75%
        {0x02, 0x04, 0x13}                 //< --  1 Mb/s,  8x Tscl, sampling at 75% 
	*/

	CANBT1 = 0x12;
     58a:	82 e1       	ldi	r24, 0x12	; 18
     58c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2 = 0x0C;
     590:	8c e0       	ldi	r24, 0x0C	; 12
     592:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3 = 0x37;
     596:	87 e3       	ldi	r24, 0x37	; 55
     598:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>

	/// Sjw je podesen na 1... 1 + 5 + 6 + 8 = 20
	/************ BIT TAJMING PODESAVANJA -> BAUD RATE = 100kbps  **********************************/

	CANTCON = 0; // preskaler za CAN timer-> ne koristimo ga pa ova vrednost nije vazna
     59c:	10 92 e5 00 	sts	0x00E5, r1	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>

	// ukljucujem interrupte- ENIT-> Enable All Interrupts
	// ENRX-> Enable RX interrupt
	// ENTX-> Enable TX interrupt
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);
     5a0:	80 eb       	ldi	r24, 0xB0	; 176
     5a2:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>
	// interrupti svih MOb- ova su ukljuceni
	CANIE1 = 0xFF >> 1; // glupo govno trazi da MSB mora biti nula prilikom upisivanja u registar
     5a6:	8f e7       	ldi	r24, 0x7F	; 127
     5a8:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <__TEXT_REGION_LENGTH__+0x7e00df>
	CANIE2 = 0xFF;
     5ac:	8f ef       	ldi	r24, 0xFF	; 255
     5ae:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <__TEXT_REGION_LENGTH__+0x7e00de>

	//sei();
}
     5b2:	08 95       	ret

000005b4 <CAN_InitRxMob>:
* Return Value      : char info da li je inicijalizacija uspela
*********************************************************************************/
char CAN_InitRxMob(unsigned int ide)
{
	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     5b4:	50 91 ed 00 	lds	r21, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     5b8:	20 91 d9 00 	lds	r18, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
     5bc:	24 fd       	sbrc	r18, 4
     5be:	fc cf       	rjmp	.-8      	; 0x5b8 <CAN_InitRxMob+0x4>
     5c0:	20 91 d9 00 	lds	r18, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
     5c4:	42 2f       	mov	r20, r18
     5c6:	48 70       	andi	r20, 0x08	; 8
     5c8:	23 fd       	sbrc	r18, 3
     5ca:	f6 cf       	rjmp	.-20     	; 0x5b8 <CAN_InitRxMob+0x4>
     5cc:	20 e0       	ldi	r18, 0x00	; 0

	// prolazim redom kroz MOb- ove, cim naidjem na slobodan MOb
	// uzimam ga
	for(ch = 0; ch < 15; ch++)
	{
		CANPAGE = ch << 4;
     5ce:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

		// ako je MOb vec zauzet nastavi dalje
		if((CANCDMOB >> 6))
     5d2:	30 91 ef 00 	lds	r19, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     5d6:	32 95       	swap	r19
     5d8:	36 95       	lsr	r19
     5da:	36 95       	lsr	r19
     5dc:	33 70       	andi	r19, 0x03	; 3
     5de:	31 f0       	breq	.+12     	; 0x5ec <CAN_InitRxMob+0x38>
			continue;
     5e0:	20 5f       	subi	r18, 0xF0	; 240
	for(ch = 0; ch < 15; ch++)
     5e2:	20 3f       	cpi	r18, 0xF0	; 240
     5e4:	a1 f7       	brne	.-24     	; 0x5ce <CAN_InitRxMob+0x1a>
		CANPAGE = tempPage;

		return 1;
	}

	CANPAGE = tempPage;
     5e6:	50 93 ed 00 	sts	0x00ED, r21	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

	return 0;
     5ea:	20 c0       	rjmp	.+64     	; 0x62c <CAN_InitRxMob+0x78>
		CANCDMOB = (1 << DLC0) | (1 << DLC1) | (1 << DLC2) | (1 << DLC3);
     5ec:	2f e0       	ldi	r18, 0x0F	; 15
     5ee:	20 93 ef 00 	sts	0x00EF, r18	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		CANIDT1 = (0x00FF & ide) >> 3;
     5f2:	9c 01       	movw	r18, r24
     5f4:	93 e0       	ldi	r25, 0x03	; 3
     5f6:	36 95       	lsr	r19
     5f8:	27 95       	ror	r18
     5fa:	9a 95       	dec	r25
     5fc:	e1 f7       	brne	.-8      	; 0x5f6 <CAN_InitRxMob+0x42>
     5fe:	2f 71       	andi	r18, 0x1F	; 31
     600:	20 93 f3 00 	sts	0x00F3, r18	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		CANIDT2 = (ide & 0x00FF) << 5;
     604:	82 95       	swap	r24
     606:	88 0f       	add	r24, r24
     608:	80 7e       	andi	r24, 0xE0	; 224
     60a:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDM2 = 0x07 << 5;
     60e:	80 ee       	ldi	r24, 0xE0	; 224
     610:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
		CANIDM1 = 0xFF;
     614:	8f ef       	ldi	r24, 0xFF	; 255
     616:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
		CANCDMOB |= (1 << CONMOB1);
     61a:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     61e:	80 68       	ori	r24, 0x80	; 128
     620:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		sei();
     624:	78 94       	sei
		CANPAGE = tempPage;
     626:	50 93 ed 00 	sts	0x00ED, r21	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		return 1;
     62a:	41 e0       	ldi	r20, 0x01	; 1
}
     62c:	84 2f       	mov	r24, r20
     62e:	08 95       	ret

00000630 <CAN_checkRX>:
* Parameters        : None
* Return Value      : char info da li ima primljenih podataka
*********************************************************************************/
char CAN_checkRX(void)
{
	if(rxCounter)
     630:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <rxCounter>
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	91 11       	cpse	r25, r1
     638:	01 c0       	rjmp	.+2      	; 0x63c <CAN_checkRX+0xc>
     63a:	80 e0       	ldi	r24, 0x00	; 0
		return 1;

	return 0;
}
     63c:	08 95       	ret

0000063e <CAN_read>:
					  na podatak.
* Parameters        : canMsg *rxData
* Return Value      : void
*********************************************************************************/
void CAN_read(canMsg *rxData)
{
     63e:	cf 93       	push	r28
     640:	df 93       	push	r29
	// sve dok ne stigne neki podatak ostajem u funkciji

	// kako je task realizovan ovo je nepotrebno ali neka stoji
	while(rxCounter == 0);
     642:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <rxCounter>
     646:	22 23       	and	r18, r18
     648:	e1 f3       	breq	.-8      	; 0x642 <CAN_read+0x4>
	cli();
     64a:	f8 94       	cli
	//nema potrebe da iskljucujemo multitasking zato sto nema opasnosti da cu primiti pogresan podatak-> organizovano je kao FIFO

	// upisujem osam bajtova u prosledjeni bafer( argument funkcije, prenos po adresi)
	for(unsigned char i = 0; i < 8; i++)
     64c:	ec 01       	movw	r28, r24
	cli();
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	20 e0       	ldi	r18, 0x00	; 0
		rxData->data[i] = rxBuffer[rxRdIndex].data[i];
     652:	ea e0       	ldi	r30, 0x0A	; 10
     654:	40 91 9c 01 	lds	r20, 0x019C	; 0x80019c <rxRdIndex>
     658:	d9 01       	movw	r26, r18
     65a:	e4 9f       	mul	r30, r20
     65c:	a0 0d       	add	r26, r0
     65e:	b1 1d       	adc	r27, r1
     660:	11 24       	eor	r1, r1
     662:	a3 56       	subi	r26, 0x63	; 99
     664:	be 4f       	sbci	r27, 0xFE	; 254
     666:	4c 91       	ld	r20, X
     668:	49 93       	st	Y+, r20
     66a:	2f 5f       	subi	r18, 0xFF	; 255
     66c:	3f 4f       	sbci	r19, 0xFF	; 255
	for(unsigned char i = 0; i < 8; i++)
     66e:	28 30       	cpi	r18, 0x08	; 8
     670:	31 05       	cpc	r19, r1
     672:	81 f7       	brne	.-32     	; 0x654 <CAN_read+0x16>

	rxData->msgIde = rxBuffer[rxRdIndex].msgIde;
     674:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <rxRdIndex>
     678:	e2 9f       	mul	r30, r18
     67a:	f0 01       	movw	r30, r0
     67c:	11 24       	eor	r1, r1
     67e:	e3 56       	subi	r30, 0x63	; 99
     680:	fe 4f       	sbci	r31, 0xFE	; 254
     682:	20 85       	ldd	r18, Z+8	; 0x08
     684:	31 85       	ldd	r19, Z+9	; 0x09
     686:	fc 01       	movw	r30, r24
     688:	31 87       	std	Z+9, r19	; 0x09
     68a:	20 87       	std	Z+8, r18	; 0x08

	if(++rxRdIndex == RX_BUFFER_SIZE)
     68c:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <rxRdIndex>
     690:	8f 5f       	subi	r24, 0xFF	; 255
     692:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <rxRdIndex>
     696:	82 33       	cpi	r24, 0x32	; 50
     698:	11 f4       	brne	.+4      	; 0x69e <CAN_read+0x60>
		rxRdIndex = 0;
     69a:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <rxRdIndex>


	rxCounter--;
     69e:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <rxCounter>
     6a2:	81 50       	subi	r24, 0x01	; 1
     6a4:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <rxCounter>
	sei();
     6a8:	78 94       	sei
}
     6aa:	df 91       	pop	r29
     6ac:	cf 91       	pop	r28
     6ae:	08 95       	ret

000006b0 <CAN_write>:
					  identifikator messIdentificator.
* Parameters        : canMgs txData
* Return Value      : void
*********************************************************************************/
char CAN_write(canMsg txData)
{
     6b0:	0f 93       	push	r16
     6b2:	1f 93       	push	r17
     6b4:	cf 93       	push	r28
     6b6:	df 93       	push	r29
     6b8:	cd b7       	in	r28, 0x3d	; 61
     6ba:	de b7       	in	r29, 0x3e	; 62
     6bc:	2a 97       	sbiw	r28, 0x0a	; 10
     6be:	0f b6       	in	r0, 0x3f	; 63
     6c0:	f8 94       	cli
     6c2:	de bf       	out	0x3e, r29	; 62
     6c4:	0f be       	out	0x3f, r0	; 63
     6c6:	cd bf       	out	0x3d, r28	; 61
     6c8:	09 83       	std	Y+1, r16	; 0x01
     6ca:	1a 83       	std	Y+2, r17	; 0x02
     6cc:	2b 83       	std	Y+3, r18	; 0x03
     6ce:	3c 83       	std	Y+4, r19	; 0x04
     6d0:	4d 83       	std	Y+5, r20	; 0x05
     6d2:	5e 83       	std	Y+6, r21	; 0x06
     6d4:	6f 83       	std	Y+7, r22	; 0x07
     6d6:	78 87       	std	Y+8, r23	; 0x08
     6d8:	89 87       	std	Y+9, r24	; 0x09
     6da:	9a 87       	std	Y+10, r25	; 0x0a
     6dc:	29 85       	ldd	r18, Y+9	; 0x09
     6de:	3a 85       	ldd	r19, Y+10	; 0x0a
	// Cekam sve dok je magistrala zauzeta-> da li je neophodno?
	while(((CANGSTA >> TXBSY) & 0x01) || ((CANGSTA >> RXBSY) & 0x01));
     6e0:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
     6e4:	84 fd       	sbrc	r24, 4
     6e6:	fc cf       	rjmp	.-8      	; 0x6e0 <CAN_write+0x30>
     6e8:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>
     6ec:	89 2f       	mov	r24, r25
     6ee:	88 70       	andi	r24, 0x08	; 8
     6f0:	93 fd       	sbrc	r25, 3
     6f2:	f6 cf       	rjmp	.-20     	; 0x6e0 <CAN_write+0x30>
	//taskENTER_CRITICAL();
	unsigned char ch;
	unsigned char tempPage = CANPAGE;
     6f4:	50 91 ed 00 	lds	r21, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     6f8:	90 e0       	ldi	r25, 0x00	; 0
	//taskENTER_CRITICAL();

	// trazim slobodan MOb
	for(ch = 0; ch < 15; ch++)
	{
		CANPAGE = ch << 4;
     6fa:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>

		if(!(CANCDMOB >> 6))
     6fe:	40 91 ef 00 	lds	r20, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     702:	42 95       	swap	r20
     704:	46 95       	lsr	r20
     706:	46 95       	lsr	r20
     708:	43 70       	andi	r20, 0x03	; 3
     70a:	71 f0       	breq	.+28     	; 0x728 <CAN_write+0x78>
     70c:	90 5f       	subi	r25, 0xF0	; 240
	for(ch = 0; ch < 15; ch++)
     70e:	90 3f       	cpi	r25, 0xF0	; 240
     710:	a1 f7       	brne	.-24     	; 0x6fa <CAN_write+0x4a>
	CANPAGE = tempPage;

	//taskEXIT_CRITICAL();

	return 1;
     712:	2a 96       	adiw	r28, 0x0a	; 10
     714:	0f b6       	in	r0, 0x3f	; 63
     716:	f8 94       	cli
     718:	de bf       	out	0x3e, r29	; 62
     71a:	0f be       	out	0x3f, r0	; 63
     71c:	cd bf       	out	0x3d, r28	; 61
     71e:	df 91       	pop	r29
     720:	cf 91       	pop	r28
     722:	1f 91       	pop	r17
     724:	0f 91       	pop	r16
     726:	08 95       	ret
	CANIDT2 = (txData.msgIde & 0x0F) << 5;
     728:	82 2f       	mov	r24, r18
     72a:	82 95       	swap	r24
     72c:	88 0f       	add	r24, r24
     72e:	80 7e       	andi	r24, 0xE0	; 224
     730:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	CANIDT1 = (txData.msgIde) >> 3;
     734:	83 e0       	ldi	r24, 0x03	; 3
     736:	36 95       	lsr	r19
     738:	27 95       	ror	r18
     73a:	8a 95       	dec	r24
     73c:	e1 f7       	brne	.-8      	; 0x736 <CAN_write+0x86>
     73e:	20 93 f3 00 	sts	0x00F3, r18	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
	CANCDMOB = 8;
     742:	88 e0       	ldi	r24, 0x08	; 8
     744:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
	for(unsigned char i = 0; i < 8; i++)
     748:	fe 01       	movw	r30, r28
     74a:	31 96       	adiw	r30, 0x01	; 1
     74c:	ce 01       	movw	r24, r28
     74e:	09 96       	adiw	r24, 0x09	; 9
		CANMSG = txData.data[i];
     750:	21 91       	ld	r18, Z+
     752:	20 93 fa 00 	sts	0x00FA, r18	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7e00fa>
	for(unsigned char i = 0; i < 8; i++)
     756:	e8 17       	cp	r30, r24
     758:	f9 07       	cpc	r31, r25
     75a:	d1 f7       	brne	.-12     	; 0x750 <CAN_write+0xa0>
	CANCDMOB |= (1 << CONMOB0);
     75c:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
     760:	80 64       	ori	r24, 0x40	; 64
     762:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
	CANPAGE = tempPage;
     766:	50 93 ed 00 	sts	0x00ED, r21	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	return 1;
     76a:	81 e0       	ldi	r24, 0x01	; 1
     76c:	d2 cf       	rjmp	.-92     	; 0x712 <CAN_write+0x62>

0000076e <gpio_register_pin>:

/*
 * 	Function:    uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up)
 * 	Description: register the pin
 */
uint8_t gpio_register_pin(uint8_t pin, uint8_t direction, bool pulled_up) {
     76e:	0f 93       	push	r16
     770:	1f 93       	push	r17
     772:	cf 93       	push	r28
     774:	df 93       	push	r29
     776:	18 2f       	mov	r17, r24
     778:	04 2f       	mov	r16, r20
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     77a:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <gpio_inputs+0x2>
     77e:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <gpio_inputs+0x3>
     782:	3d 97       	sbiw	r30, 0x0d	; 13
     784:	ef 01       	movw	r28, r30
     786:	2d 96       	adiw	r28, 0x0d	; 13
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	c0 31       	cpi	r28, 0x10	; 16
     78c:	d8 07       	cpc	r29, r24
     78e:	01 f5       	brne	.+64     	; 0x7d0 <gpio_register_pin+0x62>
    {
        if(input->pin == pin)
            return 1;
    }

	uint8_t port	= 1 + pin / 8;
     790:	e1 2f       	mov	r30, r17
     792:	e6 95       	lsr	r30
     794:	e6 95       	lsr	r30
     796:	e6 95       	lsr	r30
     798:	ef 5f       	subi	r30, 0xFF	; 255
     79a:	e1 50       	subi	r30, 0x01	; 1
     79c:	ff 0b       	sbc	r31, r31
     79e:	cf 01       	movw	r24, r30
     7a0:	88 0f       	add	r24, r24
     7a2:	99 1f       	adc	r25, r25
     7a4:	e8 0f       	add	r30, r24
     7a6:	f9 1f       	adc	r31, r25
	uint8_t pin_reg = pin % 8;
     7a8:	21 2f       	mov	r18, r17
     7aa:	27 70       	andi	r18, 0x07	; 7
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	01 c0       	rjmp	.+2      	; 0x7b4 <gpio_register_pin+0x46>
     7b2:	88 0f       	add	r24, r24
     7b4:	2a 95       	dec	r18
     7b6:	ea f7       	brpl	.-6      	; 0x7b2 <gpio_register_pin+0x44>
     7b8:	28 2f       	mov	r18, r24
     7ba:	20 95       	com	r18
	if(direction == GPIO_DIRECTION_OUTPUT)
     7bc:	61 30       	cpi	r22, 0x01	; 1
     7be:	a9 f4       	brne	.+42     	; 0x7ea <gpio_register_pin+0x7c>
	{
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) |= (1 << pin_reg);
     7c0:	91 a1       	ldd	r25, Z+33	; 0x21
     7c2:	89 2b       	or	r24, r25
     7c4:	81 a3       	std	Z+33, r24	; 0x21
		*(volatile uint8_t*)(0x22 + 3 *  (port - 1)) &= ~(1 << pin_reg);
     7c6:	82 a1       	ldd	r24, Z+34	; 0x22
     7c8:	82 23       	and	r24, r18
     7ca:	82 a3       	std	Z+34, r24	; 0x22

    input->pin       = pin;
    input->pulled_up = pulled_up;
    list_add(&input->list, &gpio_inputs);

    return 0;
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	04 c0       	rjmp	.+8      	; 0x7d8 <gpio_register_pin+0x6a>
        if(input->pin == pin)
     7d0:	80 81       	ld	r24, Z
     7d2:	81 13       	cpse	r24, r17
     7d4:	06 c0       	rjmp	.+12     	; 0x7e2 <gpio_register_pin+0x74>
            return 1;
     7d6:	81 e0       	ldi	r24, 0x01	; 1
}
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	1f 91       	pop	r17
     7de:	0f 91       	pop	r16
     7e0:	08 95       	ret
    list_for_each_entry(input, &gpio_inputs, list)
     7e2:	07 84       	ldd	r0, Z+15	; 0x0f
     7e4:	f0 89       	ldd	r31, Z+16	; 0x10
     7e6:	e0 2d       	mov	r30, r0
     7e8:	cc cf       	rjmp	.-104    	; 0x782 <gpio_register_pin+0x14>
		*(volatile uint8_t*)(0x21 + 3 *  (port - 1)) &= ~(1 << pin_reg);
     7ea:	81 a1       	ldd	r24, Z+33	; 0x21
     7ec:	82 23       	and	r24, r18
     7ee:	81 a3       	std	Z+33, r24	; 0x21
    input = (struct gpio_input*)malloc(sizeof(struct gpio_input));
     7f0:	81 e1       	ldi	r24, 0x11	; 17
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	0e 94 d7 07 	call	0xfae	; 0xfae <malloc>
     7f8:	fc 01       	movw	r30, r24
    if(input == NULL)
     7fa:	00 97       	sbiw	r24, 0x00	; 0
     7fc:	61 f3       	breq	.-40     	; 0x7d6 <gpio_register_pin+0x68>
    input->pin       = pin;
     7fe:	10 83       	st	Z, r17
    input->pulled_up = pulled_up;
     800:	01 83       	std	Z+1, r16	; 0x01
    list_add(&input->list, &gpio_inputs);
     802:	0d 96       	adiw	r24, 0x0d	; 13
    prev->next = new;
}

static inline void list_add(struct list_head* new, struct list_head* head)
{
    __list_add(new, head, head->next);
     804:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <gpio_inputs+0x2>
     808:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <gpio_inputs+0x3>
    next->prev = new;
     80c:	11 96       	adiw	r26, 0x01	; 1
     80e:	9c 93       	st	X, r25
     810:	8e 93       	st	-X, r24
    new->next = next;
     812:	b0 8b       	std	Z+16, r27	; 0x10
     814:	a7 87       	std	Z+15, r26	; 0x0f
    new->prev = prev;
     816:	d6 87       	std	Z+14, r29	; 0x0e
     818:	c5 87       	std	Z+13, r28	; 0x0d
    prev->next = new;
     81a:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <gpio_inputs+0x3>
     81e:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <gpio_inputs+0x2>
     822:	d4 cf       	rjmp	.-88     	; 0x7cc <gpio_register_pin+0x5e>

00000824 <gpio_write_pin>:

/*
 * 	Function:    uint8_t gpio_write_pin(uint8_t pin, bool value)
 * 	Description: Write to a specific pin and the value of it
 */
uint8_t gpio_write_pin(uint8_t pin, bool value) {
     824:	96 2f       	mov	r25, r22
	uint8_t port = 1 + pin / 8;
     826:	e8 2f       	mov	r30, r24
     828:	e6 95       	lsr	r30
     82a:	e6 95       	lsr	r30
     82c:	e6 95       	lsr	r30
     82e:	ef 5f       	subi	r30, 0xFF	; 255
	pin = pin % 8;

	uint8_t temp = *(volatile uint32_t*)(0x22 + 3 * (port - 1));
     830:	e1 50       	subi	r30, 0x01	; 1
     832:	ff 0b       	sbc	r31, r31
     834:	9f 01       	movw	r18, r30
     836:	22 0f       	add	r18, r18
     838:	33 1f       	adc	r19, r19
     83a:	e2 0f       	add	r30, r18
     83c:	f3 1f       	adc	r31, r19
     83e:	42 a1       	ldd	r20, Z+34	; 0x22
     840:	53 a1       	ldd	r21, Z+35	; 0x23
     842:	64 a1       	ldd	r22, Z+36	; 0x24
     844:	75 a1       	ldd	r23, Z+37	; 0x25
	if(value != 0)
     846:	50 e0       	ldi	r21, 0x00	; 0
	pin = pin % 8;
     848:	87 70       	andi	r24, 0x07	; 7
     84a:	21 e0       	ldi	r18, 0x01	; 1
     84c:	30 e0       	ldi	r19, 0x00	; 0
     84e:	02 c0       	rjmp	.+4      	; 0x854 <gpio_write_pin+0x30>
     850:	22 0f       	add	r18, r18
     852:	33 1f       	adc	r19, r19
     854:	8a 95       	dec	r24
     856:	e2 f7       	brpl	.-8      	; 0x850 <gpio_write_pin+0x2c>
	if(value != 0)
     858:	99 23       	and	r25, r25
     85a:	69 f0       	breq	.+26     	; 0x876 <gpio_write_pin+0x52>
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp | (1 << pin);
     85c:	ca 01       	movw	r24, r20
     85e:	82 2b       	or	r24, r18
     860:	93 2b       	or	r25, r19
	else
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp & ~(1 << pin);
     862:	09 2e       	mov	r0, r25
     864:	00 0c       	add	r0, r0
     866:	aa 0b       	sbc	r26, r26
     868:	bb 0b       	sbc	r27, r27
     86a:	82 a3       	std	Z+34, r24	; 0x22
     86c:	93 a3       	std	Z+35, r25	; 0x23
     86e:	a4 a3       	std	Z+36, r26	; 0x24
     870:	b5 a3       	std	Z+37, r27	; 0x25
	return 0;
}
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	08 95       	ret
		*(volatile uint32_t*)(0x22 + 3 * (port - 1)) = temp & ~(1 << pin);
     876:	c9 01       	movw	r24, r18
     878:	80 95       	com	r24
     87a:	90 95       	com	r25
     87c:	84 23       	and	r24, r20
     87e:	95 23       	and	r25, r21
     880:	f0 cf       	rjmp	.-32     	; 0x862 <gpio_write_pin+0x3e>

00000882 <gpio_read_pin>:
 * 	Function:    uint8_t gpio_read_pin(uint8_t pin)
 * 	Description: reading the state of a pin
 */
uint8_t gpio_read_pin(uint8_t pin) {
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     882:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <gpio_inputs+0x2>
     886:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <gpio_inputs+0x3>
     88a:	3d 97       	sbiw	r30, 0x0d	; 13
     88c:	91 e0       	ldi	r25, 0x01	; 1
     88e:	e3 30       	cpi	r30, 0x03	; 3
     890:	f9 07       	cpc	r31, r25
     892:	11 f4       	brne	.+4      	; 0x898 <gpio_read_pin+0x16>

            return state;
        }
    }

    return 1;
     894:	81 e0       	ldi	r24, 0x01	; 1
}
     896:	08 95       	ret
        if(pin == input->pin)
     898:	90 81       	ld	r25, Z
     89a:	98 13       	cpse	r25, r24
     89c:	17 c0       	rjmp	.+46     	; 0x8cc <gpio_read_pin+0x4a>
     89e:	df 01       	movw	r26, r30
     8a0:	12 96       	adiw	r26, 0x02	; 2
     8a2:	cf 01       	movw	r24, r30
     8a4:	0b 96       	adiw	r24, 0x0b	; 11
                if(input->values[i] != input->values[i + 1])
     8a6:	3d 91       	ld	r19, X+
     8a8:	2c 91       	ld	r18, X
     8aa:	32 17       	cp	r19, r18
     8ac:	11 f0       	breq	.+4      	; 0x8b2 <gpio_read_pin+0x30>
                    return input->previous_state;
     8ae:	84 85       	ldd	r24, Z+12	; 0x0c
     8b0:	08 95       	ret
            while(i < GPIO_DEBOUNCE_COUNT - 1)
     8b2:	a8 17       	cp	r26, r24
     8b4:	b9 07       	cpc	r27, r25
     8b6:	b9 f7       	brne	.-18     	; 0x8a6 <gpio_read_pin+0x24>
            uint8_t state = input->pulled_up == false ? (input->values[0]) : !(input->values[0]);
     8b8:	82 81       	ldd	r24, Z+2	; 0x02
     8ba:	91 81       	ldd	r25, Z+1	; 0x01
     8bc:	99 23       	and	r25, r25
     8be:	21 f0       	breq	.+8      	; 0x8c8 <gpio_read_pin+0x46>
     8c0:	91 e0       	ldi	r25, 0x01	; 1
     8c2:	81 11       	cpse	r24, r1
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	89 2f       	mov	r24, r25
            input->previous_state = state;
     8c8:	84 87       	std	Z+12, r24	; 0x0c
            return state;
     8ca:	08 95       	ret
    list_for_each_entry(input, &gpio_inputs, list)
     8cc:	07 84       	ldd	r0, Z+15	; 0x0f
     8ce:	f0 89       	ldd	r31, Z+16	; 0x10
     8d0:	e0 2d       	mov	r30, r0
     8d2:	db cf       	rjmp	.-74     	; 0x88a <gpio_read_pin+0x8>

000008d4 <gpio_debouncer>:

/*
 * 	Function:    void gpio_debouncer(void)
 * 	Description: debouncer function, used for triggering inputs smoothly
 */
void gpio_debouncer(void) {
     8d4:	cf 93       	push	r28
     8d6:	df 93       	push	r29
    static volatile uint8_t count = 0;
    struct gpio_input* input;
    list_for_each_entry(input, &gpio_inputs, list)
     8d8:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <gpio_inputs+0x2>
     8dc:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <gpio_inputs+0x3>
     8e0:	3d 97       	sbiw	r30, 0x0d	; 13
     8e2:	d1 e0       	ldi	r29, 0x01	; 1
     8e4:	e3 30       	cpi	r30, 0x03	; 3
     8e6:	fd 07       	cpc	r31, r29
     8e8:	61 f4       	brne	.+24     	; 0x902 <gpio_debouncer+0x2e>
    {
        input->values[count] = __gpio_read_pin(input->pin);
    }

    if(++count == GPIO_DEBOUNCE_COUNT)
     8ea:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <count.1994>
     8ee:	8f 5f       	subi	r24, 0xFF	; 255
     8f0:	80 93 91 03 	sts	0x0391, r24	; 0x800391 <count.1994>
     8f4:	8a 30       	cpi	r24, 0x0A	; 10
     8f6:	11 f4       	brne	.+4      	; 0x8fc <gpio_debouncer+0x28>
        count = 0;
     8f8:	10 92 91 03 	sts	0x0391, r1	; 0x800391 <count.1994>

     8fc:	df 91       	pop	r29
     8fe:	cf 91       	pop	r28
     900:	08 95       	ret
        input->values[count] = __gpio_read_pin(input->pin);
     902:	20 81       	ld	r18, Z
     904:	a0 91 91 03 	lds	r26, 0x0391	; 0x800391 <count.1994>
    uint8_t port = 1 + pin / 8;
     908:	82 2f       	mov	r24, r18
     90a:	86 95       	lsr	r24
     90c:	86 95       	lsr	r24
     90e:	86 95       	lsr	r24
     910:	8f 5f       	subi	r24, 0xFF	; 255
	uint8_t temp = (*((volatile uint8_t*)(0x20 + 3 * (port - 1))));
     912:	81 50       	subi	r24, 0x01	; 1
     914:	99 0b       	sbc	r25, r25
     916:	ac 01       	movw	r20, r24
     918:	44 0f       	add	r20, r20
     91a:	55 1f       	adc	r21, r21
     91c:	84 0f       	add	r24, r20
     91e:	95 1f       	adc	r25, r21
     920:	ec 01       	movw	r28, r24
     922:	88 a1       	ldd	r24, Y+32	; 0x20
        input->values[count] = __gpio_read_pin(input->pin);
     924:	ae 0f       	add	r26, r30
     926:	bf 2f       	mov	r27, r31
     928:	b1 1d       	adc	r27, r1
    return ((temp >> pin) & 0x01);
     92a:	90 e0       	ldi	r25, 0x00	; 0
    pin = pin % 8;
     92c:	27 70       	andi	r18, 0x07	; 7
    return ((temp >> pin) & 0x01);
     92e:	02 c0       	rjmp	.+4      	; 0x934 <gpio_debouncer+0x60>
     930:	95 95       	asr	r25
     932:	87 95       	ror	r24
     934:	2a 95       	dec	r18
     936:	e2 f7       	brpl	.-8      	; 0x930 <gpio_debouncer+0x5c>
     938:	81 70       	andi	r24, 0x01	; 1
        input->values[count] = __gpio_read_pin(input->pin);
     93a:	12 96       	adiw	r26, 0x02	; 2
     93c:	8c 93       	st	X, r24
    list_for_each_entry(input, &gpio_inputs, list)
     93e:	07 84       	ldd	r0, Z+15	; 0x0f
     940:	f0 89       	ldd	r31, Z+16	; 0x10
     942:	e0 2d       	mov	r30, r0
     944:	cd cf       	rjmp	.-102    	; 0x8e0 <gpio_debouncer+0xc>

00000946 <hbridge_move>:

/*
 * Function: void hbridge_move(int A_value, int B_value, uint8_t num);
 * Description: move the hbridge by A_value and B_value. The ID is num
 */
void hbridge_move(int A_value, int B_value, uint8_t num) {
     946:	cf 92       	push	r12
     948:	df 92       	push	r13
     94a:	ef 92       	push	r14
     94c:	ff 92       	push	r15
     94e:	0f 93       	push	r16
     950:	1f 93       	push	r17
     952:	cf 93       	push	r28
     954:	df 93       	push	r29
     956:	8c 01       	movw	r16, r24
     958:	eb 01       	movw	r28, r22
     95a:	f4 2e       	mov	r15, r20
    
   debug_printf("INFO! hbridge_move - [A_value, B_value, num] - ");
     95c:	82 e6       	ldi	r24, 0x62	; 98
     95e:	91 e0       	ldi	r25, 0x01	; 1
     960:	0e 94 17 02 	call	0x42e	; 0x42e <debug_printf>
   debug_printf_num(A_value);
     964:	c8 01       	movw	r24, r16
     966:	0e 94 18 02 	call	0x430	; 0x430 <debug_printf_num>
   debug_printf(",");
     96a:	82 e9       	ldi	r24, 0x92	; 146
     96c:	91 e0       	ldi	r25, 0x01	; 1
     96e:	0e 94 17 02 	call	0x42e	; 0x42e <debug_printf>
   debug_printf_num(B_value);
     972:	ce 01       	movw	r24, r28
     974:	0e 94 18 02 	call	0x430	; 0x430 <debug_printf_num>
   debug_printf(",");
     978:	82 e9       	ldi	r24, 0x92	; 146
     97a:	91 e0       	ldi	r25, 0x01	; 1
     97c:	0e 94 17 02 	call	0x42e	; 0x42e <debug_printf>
   debug_printf_num(num);
     980:	8f 2d       	mov	r24, r15
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	0e 94 18 02 	call	0x430	; 0x430 <debug_printf_num>
   debug_printf("\n");
     988:	80 e6       	ldi	r24, 0x60	; 96
     98a:	91 e0       	ldi	r25, 0x01	; 1
     98c:	0e 94 17 02 	call	0x42e	; 0x42e <debug_printf>

    switch(num) {
     990:	81 e0       	ldi	r24, 0x01	; 1
     992:	f8 16       	cp	r15, r24
     994:	61 f0       	breq	.+24     	; 0x9ae <hbridge_move+0x68>
     996:	82 e0       	ldi	r24, 0x02	; 2
     998:	f8 16       	cp	r15, r24
     99a:	c9 f1       	breq	.+114    	; 0xa0e <hbridge_move+0xc8>
            current_A_1 = A_value;
            current_B_1 = B_value;

            break;
    }
} // end of hbridge_move()
     99c:	df 91       	pop	r29
     99e:	cf 91       	pop	r28
     9a0:	1f 91       	pop	r17
     9a2:	0f 91       	pop	r16
     9a4:	ff 90       	pop	r15
     9a6:	ef 90       	pop	r14
     9a8:	df 90       	pop	r13
     9aa:	cf 90       	pop	r12
     9ac:	08 95       	ret
            OCR3C = (uint16_t)(conv_to_16(A_value));    // PE5
     9ae:	2f ef       	ldi	r18, 0xFF	; 255
     9b0:	3f ef       	ldi	r19, 0xFF	; 255
     9b2:	d8 01       	movw	r26, r16
     9b4:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__usmulhisi3>
     9b8:	24 e6       	ldi	r18, 0x64	; 100
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	40 e0       	ldi	r20, 0x00	; 0
     9be:	50 e0       	ldi	r21, 0x00	; 0
     9c0:	0e 94 8e 07 	call	0xf1c	; 0xf1c <__divmodsi4>
     9c4:	30 93 9d 00 	sts	0x009D, r19	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
     9c8:	20 93 9c 00 	sts	0x009C, r18	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
            OCR0A = (uint8_t)(conv_to_8(B_value));      // PB7
     9cc:	2f ef       	ldi	r18, 0xFF	; 255
     9ce:	2c 9f       	mul	r18, r28
     9d0:	c0 01       	movw	r24, r0
     9d2:	2d 9f       	mul	r18, r29
     9d4:	90 0d       	add	r25, r0
     9d6:	11 24       	eor	r1, r1
     9d8:	64 e6       	ldi	r22, 0x64	; 100
     9da:	70 e0       	ldi	r23, 0x00	; 0
     9dc:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__divmodhi4>
     9e0:	67 bd       	out	0x27, r22	; 39
            if(A_value == 0) {
     9e2:	01 15       	cp	r16, r1
     9e4:	11 05       	cpc	r17, r1
     9e6:	21 f4       	brne	.+8      	; 0x9f0 <hbridge_move+0xaa>
                gpio_write_pin(PIN_MOTOR2_A, LOW);
     9e8:	60 e0       	ldi	r22, 0x00	; 0
     9ea:	85 e2       	ldi	r24, 0x25	; 37
     9ec:	0e 94 12 04 	call	0x824	; 0x824 <gpio_write_pin>
            if(B_value == 0) {
     9f0:	20 97       	sbiw	r28, 0x00	; 0
     9f2:	21 f4       	brne	.+8      	; 0x9fc <hbridge_move+0xb6>
                gpio_write_pin(PIN_MOTOR2_B, LOW);
     9f4:	60 e0       	ldi	r22, 0x00	; 0
     9f6:	8f e0       	ldi	r24, 0x0F	; 15
     9f8:	0e 94 12 04 	call	0x824	; 0x824 <gpio_write_pin>
            current_A_2 = A_value;
     9fc:	10 93 ad 03 	sts	0x03AD, r17	; 0x8003ad <current_A_2+0x1>
     a00:	00 93 ac 03 	sts	0x03AC, r16	; 0x8003ac <current_A_2>
            current_B_2 = B_value;
     a04:	d0 93 ab 03 	sts	0x03AB, r29	; 0x8003ab <current_B_2+0x1>
     a08:	c0 93 aa 03 	sts	0x03AA, r28	; 0x8003aa <current_B_2>
            break;
     a0c:	c7 cf       	rjmp	.-114    	; 0x99c <hbridge_move+0x56>
            OCR3A = (uint16_t)(conv_to_16(A_value));    // PE3
     a0e:	2f ef       	ldi	r18, 0xFF	; 255
     a10:	3f ef       	ldi	r19, 0xFF	; 255
     a12:	d8 01       	movw	r26, r16
     a14:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__usmulhisi3>
     a18:	24 e6       	ldi	r18, 0x64	; 100
     a1a:	c2 2e       	mov	r12, r18
     a1c:	d1 2c       	mov	r13, r1
     a1e:	e1 2c       	mov	r14, r1
     a20:	f1 2c       	mov	r15, r1
     a22:	a7 01       	movw	r20, r14
     a24:	96 01       	movw	r18, r12
     a26:	0e 94 8e 07 	call	0xf1c	; 0xf1c <__divmodsi4>
     a2a:	30 93 99 00 	sts	0x0099, r19	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     a2e:	20 93 98 00 	sts	0x0098, r18	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
            OCR3B = (uint16_t)(conv_to_16(B_value));    // PE4
     a32:	2f ef       	ldi	r18, 0xFF	; 255
     a34:	3f ef       	ldi	r19, 0xFF	; 255
     a36:	de 01       	movw	r26, r28
     a38:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__usmulhisi3>
     a3c:	a7 01       	movw	r20, r14
     a3e:	96 01       	movw	r18, r12
     a40:	0e 94 8e 07 	call	0xf1c	; 0xf1c <__divmodsi4>
     a44:	30 93 9b 00 	sts	0x009B, r19	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     a48:	20 93 9a 00 	sts	0x009A, r18	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
            if(A_value == 0) {
     a4c:	01 15       	cp	r16, r1
     a4e:	11 05       	cpc	r17, r1
     a50:	21 f4       	brne	.+8      	; 0xa5a <hbridge_move+0x114>
                gpio_write_pin(PIN_MOTOR1_A, LOW);
     a52:	60 e0       	ldi	r22, 0x00	; 0
     a54:	83 e2       	ldi	r24, 0x23	; 35
     a56:	0e 94 12 04 	call	0x824	; 0x824 <gpio_write_pin>
            if(B_value == 0) {
     a5a:	20 97       	sbiw	r28, 0x00	; 0
     a5c:	21 f4       	brne	.+8      	; 0xa66 <hbridge_move+0x120>
                gpio_write_pin(PIN_MOTOR1_B, LOW);
     a5e:	60 e0       	ldi	r22, 0x00	; 0
     a60:	84 e2       	ldi	r24, 0x24	; 36
     a62:	0e 94 12 04 	call	0x824	; 0x824 <gpio_write_pin>
            current_A_1 = A_value;
     a66:	10 93 a9 03 	sts	0x03A9, r17	; 0x8003a9 <current_A_1+0x1>
     a6a:	00 93 a8 03 	sts	0x03A8, r16	; 0x8003a8 <current_A_1>
            current_B_1 = B_value;
     a6e:	d0 93 af 03 	sts	0x03AF, r29	; 0x8003af <current_B_1+0x1>
     a72:	c0 93 ae 03 	sts	0x03AE, r28	; 0x8003ae <current_B_1>
} // end of hbridge_move()
     a76:	92 cf       	rjmp	.-220    	; 0x99c <hbridge_move+0x56>

00000a78 <init_hbridge>:
    gpio_register_pin(PIN_MOTOR1_A, GPIO_DIRECTION_OUTPUT, false);
     a78:	40 e0       	ldi	r20, 0x00	; 0
     a7a:	61 e0       	ldi	r22, 0x01	; 1
     a7c:	83 e2       	ldi	r24, 0x23	; 35
     a7e:	0e 94 b7 03 	call	0x76e	; 0x76e <gpio_register_pin>
    gpio_register_pin(PIN_MOTOR1_B, GPIO_DIRECTION_OUTPUT, false);
     a82:	40 e0       	ldi	r20, 0x00	; 0
     a84:	61 e0       	ldi	r22, 0x01	; 1
     a86:	84 e2       	ldi	r24, 0x24	; 36
     a88:	0e 94 b7 03 	call	0x76e	; 0x76e <gpio_register_pin>
    gpio_register_pin(PIN_MOTOR2_A, GPIO_DIRECTION_OUTPUT, false);
     a8c:	40 e0       	ldi	r20, 0x00	; 0
     a8e:	61 e0       	ldi	r22, 0x01	; 1
     a90:	85 e2       	ldi	r24, 0x25	; 37
     a92:	0e 94 b7 03 	call	0x76e	; 0x76e <gpio_register_pin>
    gpio_register_pin(PIN_MOTOR2_B, GPIO_DIRECTION_OUTPUT, false);			
     a96:	40 e0       	ldi	r20, 0x00	; 0
     a98:	61 e0       	ldi	r22, 0x01	; 1
     a9a:	8f e0       	ldi	r24, 0x0F	; 15
     a9c:	0e 94 b7 03 	call	0x76e	; 0x76e <gpio_register_pin>
    ICR3 = 5000;
     aa0:	88 e8       	ldi	r24, 0x88	; 136
     aa2:	93 e1       	ldi	r25, 0x13	; 19
     aa4:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x7e0097>
     aa8:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x7e0096>
	TCNT3 = 0;
     aac:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     ab0:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
	TCNT0 = 0;
     ab4:	16 bc       	out	0x26, r1	; 38
	OCR3A = 0;
     ab6:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     aba:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	OCR3B = 0;
     abe:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
     ac2:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	OCR3C = 0;
     ac6:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
     aca:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
	TCCR3A = (1 << COM3A1)  | (1 << COM3B1) | (1 << COM3C1) | (1 << WGM31);
     ace:	8a ea       	ldi	r24, 0xAA	; 170
     ad0:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	TCCR3B = (1<< CS31) | (1 << WGM32) | (1 << WGM33); 		// PRESKALER = 8
     ad4:	8a e1       	ldi	r24, 0x1A	; 26
     ad6:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
    TCCR0A |= (1<<WGM00) | (1<<WGM01) | (1<<COM0A1) | (1<<CS00);
     ada:	84 b5       	in	r24, 0x24	; 36
     adc:	89 66       	ori	r24, 0x69	; 105
     ade:	84 bd       	out	0x24, r24	; 36
    hbridge_move(0,0,1);
     ae0:	41 e0       	ldi	r20, 0x01	; 1
     ae2:	70 e0       	ldi	r23, 0x00	; 0
     ae4:	60 e0       	ldi	r22, 0x00	; 0
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	0e 94 a3 04 	call	0x946	; 0x946 <hbridge_move>
    hbridge_move(0,0,2);
     aee:	42 e0       	ldi	r20, 0x02	; 2
     af0:	70 e0       	ldi	r23, 0x00	; 0
     af2:	60 e0       	ldi	r22, 0x00	; 0
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	80 e0       	ldi	r24, 0x00	; 0
     af8:	0e 94 a3 04 	call	0x946	; 0x946 <hbridge_move>
} // end of init_hbridge()
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	08 95       	ret

00000b00 <hbridge_break>:
/*
 * Function:    void hbridge_break(uint8_t num)
 * Description: break the `num` hbridge
 */
void hbridge_break(uint8_t num) {
    hbridge_move(100, 100, num);
     b00:	48 2f       	mov	r20, r24
     b02:	64 e6       	ldi	r22, 0x64	; 100
     b04:	70 e0       	ldi	r23, 0x00	; 0
     b06:	84 e6       	ldi	r24, 0x64	; 100
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	0c 94 a3 04 	jmp	0x946	; 0x946 <hbridge_move>

00000b0e <hbridge_time>:

/*
 * Function:    void hbridge_break(uint8_t num)
 * Description: break the `num` hbridge
 */
void hbridge_time(int num, int dir, int achieve, int time) {
     b0e:	ef 92       	push	r14
     b10:	ff 92       	push	r15
     b12:	0f 93       	push	r16
     b14:	1f 93       	push	r17
     b16:	cf 93       	push	r28
     b18:	df 93       	push	r29
     b1a:	fc 01       	movw	r30, r24
     b1c:	8b 01       	movw	r16, r22
     b1e:	ea 01       	movw	r28, r20
     b20:	c9 01       	movw	r24, r18
    
    // calculate the difference from the current and achieve speed
    int dif = 0;

    // switch between 1 and 2 motor
    switch(num) {
     b22:	e1 30       	cpi	r30, 0x01	; 1
     b24:	f1 05       	cpc	r31, r1
     b26:	51 f0       	breq	.+20     	; 0xb3c <hbridge_time+0x2e>
     b28:	32 97       	sbiw	r30, 0x02	; 2
     b2a:	09 f4       	brne	.+2      	; 0xb2e <hbridge_time+0x20>
     b2c:	6b c0       	rjmp	.+214    	; 0xc04 <hbridge_time+0xf6>
                    delay(100);
                }
            }
            break;
    }
     b2e:	df 91       	pop	r29
     b30:	cf 91       	pop	r28
     b32:	1f 91       	pop	r17
     b34:	0f 91       	pop	r16
     b36:	ff 90       	pop	r15
     b38:	ef 90       	pop	r14
     b3a:	08 95       	ret
            if(dir == CW) {
     b3c:	61 30       	cpi	r22, 0x01	; 1
     b3e:	71 05       	cpc	r23, r1
     b40:	81 f5       	brne	.+96     	; 0xba2 <hbridge_time+0x94>
                current_A_1 = 0;                                        
     b42:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <current_A_1+0x1>
     b46:	10 92 a8 03 	sts	0x03A8, r1	; 0x8003a8 <current_A_1>
                dif = achieve - current_B_1;
     b4a:	20 91 ae 03 	lds	r18, 0x03AE	; 0x8003ae <current_B_1>
     b4e:	30 91 af 03 	lds	r19, 0x03AF	; 0x8003af <current_B_1+0x1>
     b52:	c2 1b       	sub	r28, r18
     b54:	d3 0b       	sbc	r29, r19
                for(int i=0; i < time/100;i++) {
     b56:	64 e6       	ldi	r22, 0x64	; 100
     b58:	70 e0       	ldi	r23, 0x00	; 0
     b5a:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__divmodhi4>
     b5e:	7b 01       	movw	r14, r22
     b60:	10 e0       	ldi	r17, 0x00	; 0
     b62:	00 e0       	ldi	r16, 0x00	; 0
     b64:	0e 15       	cp	r16, r14
     b66:	1f 05       	cpc	r17, r15
     b68:	14 f7       	brge	.-60     	; 0xb2e <hbridge_time+0x20>
                    current_B_1 += dif/(time/100);
     b6a:	ce 01       	movw	r24, r28
     b6c:	b7 01       	movw	r22, r14
     b6e:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__divmodhi4>
     b72:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <current_B_1>
     b76:	90 91 af 03 	lds	r25, 0x03AF	; 0x8003af <current_B_1+0x1>
     b7a:	68 0f       	add	r22, r24
     b7c:	79 1f       	adc	r23, r25
     b7e:	70 93 af 03 	sts	0x03AF, r23	; 0x8003af <current_B_1+0x1>
     b82:	60 93 ae 03 	sts	0x03AE, r22	; 0x8003ae <current_B_1>
                    hbridge_move(current_A_1, current_B_1, num);
     b86:	41 e0       	ldi	r20, 0x01	; 1
     b88:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <current_A_1>
     b8c:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <current_A_1+0x1>
     b90:	0e 94 a3 04 	call	0x946	; 0x946 <hbridge_move>
                    delay(100);
     b94:	84 e6       	ldi	r24, 0x64	; 100
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	0e 94 0c 01 	call	0x218	; 0x218 <delay>
                for(int i=0; i < time/100;i++) {
     b9c:	0f 5f       	subi	r16, 0xFF	; 255
     b9e:	1f 4f       	sbci	r17, 0xFF	; 255
     ba0:	e1 cf       	rjmp	.-62     	; 0xb64 <hbridge_time+0x56>
            else if(dir == CCW) {
     ba2:	67 2b       	or	r22, r23
     ba4:	21 f6       	brne	.-120    	; 0xb2e <hbridge_time+0x20>
                current_B_1 = 0;
     ba6:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <current_B_1+0x1>
     baa:	10 92 ae 03 	sts	0x03AE, r1	; 0x8003ae <current_B_1>
                dif = achieve - current_A_1;
     bae:	20 91 a8 03 	lds	r18, 0x03A8	; 0x8003a8 <current_A_1>
     bb2:	30 91 a9 03 	lds	r19, 0x03A9	; 0x8003a9 <current_A_1+0x1>
     bb6:	c2 1b       	sub	r28, r18
     bb8:	d3 0b       	sbc	r29, r19
                for(int i=0; i < time/100;i++) {
     bba:	64 e6       	ldi	r22, 0x64	; 100
     bbc:	70 e0       	ldi	r23, 0x00	; 0
     bbe:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__divmodhi4>
     bc2:	7b 01       	movw	r14, r22
     bc4:	0e 15       	cp	r16, r14
     bc6:	1f 05       	cpc	r17, r15
     bc8:	0c f0       	brlt	.+2      	; 0xbcc <hbridge_time+0xbe>
     bca:	b1 cf       	rjmp	.-158    	; 0xb2e <hbridge_time+0x20>
                    current_A_1 += dif/(time/100);
     bcc:	ce 01       	movw	r24, r28
     bce:	b7 01       	movw	r22, r14
     bd0:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__divmodhi4>
     bd4:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <current_A_1>
     bd8:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <current_A_1+0x1>
     bdc:	86 0f       	add	r24, r22
     bde:	97 1f       	adc	r25, r23
     be0:	90 93 a9 03 	sts	0x03A9, r25	; 0x8003a9 <current_A_1+0x1>
     be4:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <current_A_1>
                    hbridge_move(current_A_1, current_B_1, num);
     be8:	60 91 ae 03 	lds	r22, 0x03AE	; 0x8003ae <current_B_1>
     bec:	70 91 af 03 	lds	r23, 0x03AF	; 0x8003af <current_B_1+0x1>
     bf0:	41 e0       	ldi	r20, 0x01	; 1
     bf2:	0e 94 a3 04 	call	0x946	; 0x946 <hbridge_move>
                    delay(100);
     bf6:	84 e6       	ldi	r24, 0x64	; 100
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	0e 94 0c 01 	call	0x218	; 0x218 <delay>
                for(int i=0; i < time/100;i++) {
     bfe:	0f 5f       	subi	r16, 0xFF	; 255
     c00:	1f 4f       	sbci	r17, 0xFF	; 255
     c02:	e0 cf       	rjmp	.-64     	; 0xbc4 <hbridge_time+0xb6>
            if(dir == CW) {
     c04:	61 30       	cpi	r22, 0x01	; 1
     c06:	71 05       	cpc	r23, r1
     c08:	89 f5       	brne	.+98     	; 0xc6c <hbridge_time+0x15e>
                current_A_2 = 0;
     c0a:	10 92 ad 03 	sts	0x03AD, r1	; 0x8003ad <current_A_2+0x1>
     c0e:	10 92 ac 03 	sts	0x03AC, r1	; 0x8003ac <current_A_2>
                dif = achieve - current_B_2;
     c12:	20 91 aa 03 	lds	r18, 0x03AA	; 0x8003aa <current_B_2>
     c16:	30 91 ab 03 	lds	r19, 0x03AB	; 0x8003ab <current_B_2+0x1>
     c1a:	c2 1b       	sub	r28, r18
     c1c:	d3 0b       	sbc	r29, r19
                for(int i=0; i < time/100;i++) {
     c1e:	64 e6       	ldi	r22, 0x64	; 100
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__divmodhi4>
     c26:	7b 01       	movw	r14, r22
     c28:	10 e0       	ldi	r17, 0x00	; 0
     c2a:	00 e0       	ldi	r16, 0x00	; 0
     c2c:	0e 15       	cp	r16, r14
     c2e:	1f 05       	cpc	r17, r15
     c30:	0c f0       	brlt	.+2      	; 0xc34 <hbridge_time+0x126>
     c32:	7d cf       	rjmp	.-262    	; 0xb2e <hbridge_time+0x20>
                    current_B_2 += dif/(time/100);
     c34:	ce 01       	movw	r24, r28
     c36:	b7 01       	movw	r22, r14
     c38:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__divmodhi4>
     c3c:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <current_B_2>
     c40:	90 91 ab 03 	lds	r25, 0x03AB	; 0x8003ab <current_B_2+0x1>
     c44:	68 0f       	add	r22, r24
     c46:	79 1f       	adc	r23, r25
     c48:	70 93 ab 03 	sts	0x03AB, r23	; 0x8003ab <current_B_2+0x1>
     c4c:	60 93 aa 03 	sts	0x03AA, r22	; 0x8003aa <current_B_2>
                    hbridge_move(current_A_2, current_B_2, num);
     c50:	42 e0       	ldi	r20, 0x02	; 2
     c52:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <current_A_2>
     c56:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <current_A_2+0x1>
     c5a:	0e 94 a3 04 	call	0x946	; 0x946 <hbridge_move>
                    delay(100);
     c5e:	84 e6       	ldi	r24, 0x64	; 100
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	0e 94 0c 01 	call	0x218	; 0x218 <delay>
                for(int i=0; i < time/100;i++) {
     c66:	0f 5f       	subi	r16, 0xFF	; 255
     c68:	1f 4f       	sbci	r17, 0xFF	; 255
     c6a:	e0 cf       	rjmp	.-64     	; 0xc2c <hbridge_time+0x11e>
            else if(dir == CCW) {
     c6c:	67 2b       	or	r22, r23
     c6e:	09 f0       	breq	.+2      	; 0xc72 <hbridge_time+0x164>
     c70:	5e cf       	rjmp	.-324    	; 0xb2e <hbridge_time+0x20>
                current_B_2 = 0;
     c72:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <current_B_2+0x1>
     c76:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <current_B_2>
                dif = achieve - current_A_2;
     c7a:	20 91 ac 03 	lds	r18, 0x03AC	; 0x8003ac <current_A_2>
     c7e:	30 91 ad 03 	lds	r19, 0x03AD	; 0x8003ad <current_A_2+0x1>
     c82:	c2 1b       	sub	r28, r18
     c84:	d3 0b       	sbc	r29, r19
                for(int i=0; i < time/100;i++) {
     c86:	64 e6       	ldi	r22, 0x64	; 100
     c88:	70 e0       	ldi	r23, 0x00	; 0
     c8a:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__divmodhi4>
     c8e:	7b 01       	movw	r14, r22
     c90:	0e 15       	cp	r16, r14
     c92:	1f 05       	cpc	r17, r15
     c94:	0c f0       	brlt	.+2      	; 0xc98 <hbridge_time+0x18a>
     c96:	4b cf       	rjmp	.-362    	; 0xb2e <hbridge_time+0x20>
                    current_A_2 += dif/(time/100);
     c98:	ce 01       	movw	r24, r28
     c9a:	b7 01       	movw	r22, r14
     c9c:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__divmodhi4>
     ca0:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <current_A_2>
     ca4:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <current_A_2+0x1>
     ca8:	86 0f       	add	r24, r22
     caa:	97 1f       	adc	r25, r23
     cac:	90 93 ad 03 	sts	0x03AD, r25	; 0x8003ad <current_A_2+0x1>
     cb0:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <current_A_2>
                    hbridge_move(current_A_2, current_B_2, num);
     cb4:	60 91 aa 03 	lds	r22, 0x03AA	; 0x8003aa <current_B_2>
     cb8:	70 91 ab 03 	lds	r23, 0x03AB	; 0x8003ab <current_B_2+0x1>
     cbc:	42 e0       	ldi	r20, 0x02	; 2
     cbe:	0e 94 a3 04 	call	0x946	; 0x946 <hbridge_move>
                    delay(100);
     cc2:	84 e6       	ldi	r24, 0x64	; 100
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	0e 94 0c 01 	call	0x218	; 0x218 <delay>
                for(int i=0; i < time/100;i++) {
     cca:	0f 5f       	subi	r16, 0xFF	; 255
     ccc:	1f 4f       	sbci	r17, 0xFF	; 255
     cce:	e0 cf       	rjmp	.-64     	; 0xc90 <hbridge_time+0x182>

00000cd0 <main>:

int main(void) {
     cd0:	cd b7       	in	r28, 0x3d	; 61
     cd2:	de b7       	in	r29, 0x3e	; 62
     cd4:	28 97       	sbiw	r28, 0x08	; 8
     cd6:	0f b6       	in	r0, 0x3f	; 63
     cd8:	f8 94       	cli
     cda:	de bf       	out	0x3e, r29	; 62
     cdc:	0f be       	out	0x3f, r0	; 63
     cde:	cd bf       	out	0x3d, r28	; 61

	system_init();
     ce0:	0e 94 b0 00 	call	0x160	; 0x160 <system_init>
				unsigned char switch_data[8];

				switch_data[0] = read_switch((uint8_t)(second_byte));
				
				memcpy(snd_message.data, switch_data, 8);
				snd_message.msgIde = MAIN_BOARD_CAN_ID;
     ce4:	84 e0       	ldi	r24, 0x04	; 4
     ce6:	f8 2e       	mov	r15, r24
     ce8:	e1 2c       	mov	r14, r1
		if(CAN_checkRX() == 1) {
     cea:	0e 94 18 03 	call	0x630	; 0x630 <CAN_checkRX>
     cee:	81 30       	cpi	r24, 0x01	; 1
     cf0:	e1 f7       	brne	.-8      	; 0xcea <main+0x1a>
			CAN_read(&message);
     cf2:	83 e9       	ldi	r24, 0x93	; 147
     cf4:	93 e0       	ldi	r25, 0x03	; 3
     cf6:	0e 94 1f 03 	call	0x63e	; 0x63e <CAN_read>
			first_byte 		= message.data[0];
     cfa:	90 91 93 03 	lds	r25, 0x0393	; 0x800393 <message>
     cfe:	90 93 a7 03 	sts	0x03A7, r25	; 0x8003a7 <first_byte>
			second_byte 	= message.data[1];
     d02:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <message+0x1>
     d06:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <second_byte>
			if(first_byte == 'P') {
     d0a:	90 35       	cpi	r25, 0x50	; 80
     d0c:	d1 f5       	brne	.+116    	; 0xd82 <main+0xb2>
				if(second_byte == 0) {
     d0e:	81 11       	cpse	r24, r1
     d10:	0d c0       	rjmp	.+26     	; 0xd2c <main+0x5c>
					gpio_write_pin(PIN_LED2, true);
     d12:	61 e0       	ldi	r22, 0x01	; 1
     d14:	81 e3       	ldi	r24, 0x31	; 49
     d16:	0e 94 12 04 	call	0x824	; 0x824 <gpio_write_pin>
					delay(500);
     d1a:	84 ef       	ldi	r24, 0xF4	; 244
     d1c:	91 e0       	ldi	r25, 0x01	; 1
     d1e:	0e 94 0c 01 	call	0x218	; 0x218 <delay>
						gpio_write_pin(PIN_LED2, false);
     d22:	60 e0       	ldi	r22, 0x00	; 0
     d24:	81 e3       	ldi	r24, 0x31	; 49
     d26:	0e 94 12 04 	call	0x824	; 0x824 <gpio_write_pin>
     d2a:	df cf       	rjmp	.-66     	; 0xcea <main+0x1a>
				else if(second_byte == 1) {
     d2c:	81 30       	cpi	r24, 0x01	; 1
     d2e:	e9 f6       	brne	.-70     	; 0xcea <main+0x1a>
					gpio_write_pin(PIN_LED2, true);
     d30:	61 e0       	ldi	r22, 0x01	; 1
     d32:	81 e3       	ldi	r24, 0x31	; 49
     d34:	0e 94 12 04 	call	0x824	; 0x824 <gpio_write_pin>
					memcpy(snd_message.data, dummy_data, 8);
     d38:	88 e0       	ldi	r24, 0x08	; 8
     d3a:	e8 e0       	ldi	r30, 0x08	; 8
     d3c:	f1 e0       	ldi	r31, 0x01	; 1
     d3e:	ad e9       	ldi	r26, 0x9D	; 157
     d40:	b3 e0       	ldi	r27, 0x03	; 3
     d42:	01 90       	ld	r0, Z+
     d44:	0d 92       	st	X+, r0
     d46:	8a 95       	dec	r24
     d48:	e1 f7       	brne	.-8      	; 0xd42 <main+0x72>
					snd_message.msgIde = MAIN_BOARD_CAN_ID;
     d4a:	f0 92 a5 03 	sts	0x03A5, r15	; 0x8003a5 <snd_message+0x8>
     d4e:	e0 92 a6 03 	sts	0x03A6, r14	; 0x8003a6 <snd_message+0x9>
					if(CAN_write(snd_message) == 1) {
     d52:	00 91 9d 03 	lds	r16, 0x039D	; 0x80039d <snd_message>
     d56:	10 91 9e 03 	lds	r17, 0x039E	; 0x80039e <snd_message+0x1>
     d5a:	20 91 9f 03 	lds	r18, 0x039F	; 0x80039f <snd_message+0x2>
     d5e:	30 91 a0 03 	lds	r19, 0x03A0	; 0x8003a0 <snd_message+0x3>
     d62:	40 91 a1 03 	lds	r20, 0x03A1	; 0x8003a1 <snd_message+0x4>
     d66:	50 91 a2 03 	lds	r21, 0x03A2	; 0x8003a2 <snd_message+0x5>
     d6a:	60 91 a3 03 	lds	r22, 0x03A3	; 0x8003a3 <snd_message+0x6>
     d6e:	70 91 a4 03 	lds	r23, 0x03A4	; 0x8003a4 <snd_message+0x7>
     d72:	8f 2d       	mov	r24, r15
     d74:	9e 2d       	mov	r25, r14
     d76:	0e 94 58 03 	call	0x6b0	; 0x6b0 <CAN_write>
     d7a:	81 30       	cpi	r24, 0x01	; 1
     d7c:	09 f0       	breq	.+2      	; 0xd80 <main+0xb0>
     d7e:	b5 cf       	rjmp	.-150    	; 0xcea <main+0x1a>
     d80:	d0 cf       	rjmp	.-96     	; 0xd22 <main+0x52>
			else if(first_byte == 'S') {
     d82:	93 35       	cpi	r25, 0x53	; 83
     d84:	29 f5       	brne	.+74     	; 0xdd0 <main+0x100>
				switch_data[0] = read_switch((uint8_t)(second_byte));
     d86:	0e 94 18 01 	call	0x230	; 0x230 <read_switch>
				memcpy(snd_message.data, switch_data, 8);
     d8a:	89 83       	std	Y+1, r24	; 0x01
     d8c:	88 e0       	ldi	r24, 0x08	; 8
     d8e:	fe 01       	movw	r30, r28
     d90:	31 96       	adiw	r30, 0x01	; 1
     d92:	ad e9       	ldi	r26, 0x9D	; 157
     d94:	b3 e0       	ldi	r27, 0x03	; 3
     d96:	01 90       	ld	r0, Z+
     d98:	0d 92       	st	X+, r0
     d9a:	8a 95       	dec	r24
     d9c:	e1 f7       	brne	.-8      	; 0xd96 <main+0xc6>
				snd_message.msgIde = MAIN_BOARD_CAN_ID;
     d9e:	f0 92 a5 03 	sts	0x03A5, r15	; 0x8003a5 <snd_message+0x8>
     da2:	e0 92 a6 03 	sts	0x03A6, r14	; 0x8003a6 <snd_message+0x9>

				if(CAN_write(snd_message) == 1) {
     da6:	00 91 9d 03 	lds	r16, 0x039D	; 0x80039d <snd_message>
     daa:	10 91 9e 03 	lds	r17, 0x039E	; 0x80039e <snd_message+0x1>
     dae:	20 91 9f 03 	lds	r18, 0x039F	; 0x80039f <snd_message+0x2>
     db2:	30 91 a0 03 	lds	r19, 0x03A0	; 0x8003a0 <snd_message+0x3>
     db6:	40 91 a1 03 	lds	r20, 0x03A1	; 0x8003a1 <snd_message+0x4>
     dba:	50 91 a2 03 	lds	r21, 0x03A2	; 0x8003a2 <snd_message+0x5>
     dbe:	60 91 a3 03 	lds	r22, 0x03A3	; 0x8003a3 <snd_message+0x6>
     dc2:	70 91 a4 03 	lds	r23, 0x03A4	; 0x8003a4 <snd_message+0x7>
     dc6:	8f 2d       	mov	r24, r15
     dc8:	9e 2d       	mov	r25, r14
     dca:	0e 94 58 03 	call	0x6b0	; 0x6b0 <CAN_write>
					// success
				}
     dce:	8d cf       	rjmp	.-230    	; 0xcea <main+0x1a>

			} // end of switches

			// ACTION: h-bridge
			else if(first_byte == 'H') {
     dd0:	98 34       	cpi	r25, 0x48	; 72
     dd2:	09 f0       	breq	.+2      	; 0xdd6 <main+0x106>
     dd4:	42 c0       	rjmp	.+132    	; 0xe5a <main+0x18a>

				// SUB-ACTION: move {'H', 'M', a >> 8, a & 0xFF, b >> 8, b & 0xFF, num}
				if(second_byte == 'M') {
     dd6:	8d 34       	cpi	r24, 0x4D	; 77
     dd8:	a9 f4       	brne	.+42     	; 0xe04 <main+0x134>

					_a 	= (message.data[2] << 8) | message.data[3];
					_b 	= (message.data[4] << 8) | message.data[5];
					num = message.data[6];

					hbridge_move(_a, _b, (uint8_t)(num));
     dda:	60 91 97 03 	lds	r22, 0x0397	; 0x800397 <message+0x4>
     dde:	70 91 98 03 	lds	r23, 0x0398	; 0x800398 <message+0x5>
     de2:	76 27       	eor	r23, r22
     de4:	67 27       	eor	r22, r23
     de6:	76 27       	eor	r23, r22
     de8:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <message+0x2>
     dec:	90 91 96 03 	lds	r25, 0x0396	; 0x800396 <message+0x3>
     df0:	40 91 99 03 	lds	r20, 0x0399	; 0x800399 <message+0x6>
     df4:	98 27       	eor	r25, r24
     df6:	89 27       	eor	r24, r25
     df8:	98 27       	eor	r25, r24
     dfa:	0e 94 a3 04 	call	0x946	; 0x946 <hbridge_move>
					dir 	= message.data[4];
					num 	= (uint8_t)(message.data[5]);

					move_stepper(steps, dir, num);

					can_send_done();
     dfe:	0e 94 20 01 	call	0x240	; 0x240 <can_send_done>
     e02:	73 cf       	rjmp	.-282    	; 0xcea <main+0x1a>
				else if(second_byte == 'B') {
     e04:	82 34       	cpi	r24, 0x42	; 66
     e06:	29 f4       	brne	.+10     	; 0xe12 <main+0x142>
					hbridge_break((uint8_t)(message.data[2]));
     e08:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <message+0x2>
     e0c:	0e 94 80 05 	call	0xb00	; 0xb00 <hbridge_break>
					can_send_done();
     e10:	f6 cf       	rjmp	.-20     	; 0xdfe <main+0x12e>
				else if(second_byte == 'T' || second_byte == 't') {
     e12:	98 2f       	mov	r25, r24
     e14:	9f 7d       	andi	r25, 0xDF	; 223
     e16:	94 35       	cpi	r25, 0x54	; 84
     e18:	09 f0       	breq	.+2      	; 0xe1c <main+0x14c>
     e1a:	67 cf       	rjmp	.-306    	; 0xcea <main+0x1a>
					hbridge_time((int)(_num), _dir, _achieve, _time);
     e1c:	20 91 99 03 	lds	r18, 0x0399	; 0x800399 <message+0x6>
     e20:	30 91 9a 03 	lds	r19, 0x039A	; 0x80039a <message+0x7>
     e24:	32 27       	eor	r19, r18
     e26:	23 27       	eor	r18, r19
     e28:	32 27       	eor	r19, r18
     e2a:	40 91 97 03 	lds	r20, 0x0397	; 0x800397 <message+0x4>
     e2e:	50 91 98 03 	lds	r21, 0x0398	; 0x800398 <message+0x5>
     e32:	54 27       	eor	r21, r20
     e34:	45 27       	eor	r20, r21
     e36:	54 27       	eor	r21, r20
     e38:	60 91 95 03 	lds	r22, 0x0395	; 0x800395 <message+0x2>
     e3c:	70 91 96 03 	lds	r23, 0x0396	; 0x800396 <message+0x3>
     e40:	76 27       	eor	r23, r22
     e42:	67 27       	eor	r22, r23
     e44:	76 27       	eor	r23, r22
					if(second_byte == 'T') {
     e46:	e1 e0       	ldi	r30, 0x01	; 1
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	84 35       	cpi	r24, 0x54	; 84
     e4c:	11 f4       	brne	.+4      	; 0xe52 <main+0x182>
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	e0 e0       	ldi	r30, 0x00	; 0
					hbridge_time((int)(_num), _dir, _achieve, _time);
     e52:	cf 01       	movw	r24, r30
     e54:	0e 94 87 05 	call	0xb0e	; 0xb0e <hbridge_time>
					can_send_done();
     e58:	d2 cf       	rjmp	.-92     	; 0xdfe <main+0x12e>
			else if(first_byte == 's') {
     e5a:	93 37       	cpi	r25, 0x73	; 115
     e5c:	09 f0       	breq	.+2      	; 0xe60 <main+0x190>
     e5e:	45 cf       	rjmp	.-374    	; 0xcea <main+0x1a>
				if(second_byte == 'E') {
     e60:	85 34       	cpi	r24, 0x45	; 69
     e62:	39 f4       	brne	.+14     	; 0xe72 <main+0x1a2>
					enable_stepper(state, num);
     e64:	60 91 96 03 	lds	r22, 0x0396	; 0x800396 <message+0x3>
     e68:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <message+0x2>
     e6c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <enable_stepper>
					can_send_done();
     e70:	c6 cf       	rjmp	.-116    	; 0xdfe <main+0x12e>
				else if(second_byte == 'R') {
     e72:	82 35       	cpi	r24, 0x52	; 82
     e74:	61 f4       	brne	.+24     	; 0xe8e <main+0x1be>
					set_rpm_stepper(_rpm, num);
     e76:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <message+0x2>
     e7a:	90 91 96 03 	lds	r25, 0x0396	; 0x800396 <message+0x3>
     e7e:	60 91 97 03 	lds	r22, 0x0397	; 0x800397 <message+0x4>
     e82:	98 27       	eor	r25, r24
     e84:	89 27       	eor	r24, r25
     e86:	98 27       	eor	r25, r24
     e88:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <set_rpm_stepper>
					can_send_done();
     e8c:	b8 cf       	rjmp	.-144    	; 0xdfe <main+0x12e>
				else if(second_byte == 'M') {
     e8e:	8d 34       	cpi	r24, 0x4D	; 77
     e90:	09 f0       	breq	.+2      	; 0xe94 <main+0x1c4>
     e92:	2b cf       	rjmp	.-426    	; 0xcea <main+0x1a>
					move_stepper(steps, dir, num);
     e94:	80 91 95 03 	lds	r24, 0x0395	; 0x800395 <message+0x2>
     e98:	90 91 96 03 	lds	r25, 0x0396	; 0x800396 <message+0x3>
     e9c:	40 91 98 03 	lds	r20, 0x0398	; 0x800398 <message+0x5>
     ea0:	60 91 97 03 	lds	r22, 0x0397	; 0x800397 <message+0x4>
     ea4:	98 27       	eor	r25, r24
     ea6:	89 27       	eor	r24, r25
     ea8:	98 27       	eor	r25, r24
     eaa:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <move_stepper>
     eae:	a7 cf       	rjmp	.-178    	; 0xdfe <main+0x12e>

00000eb0 <__divmodhi4>:
     eb0:	97 fb       	bst	r25, 7
     eb2:	07 2e       	mov	r0, r23
     eb4:	16 f4       	brtc	.+4      	; 0xeba <__divmodhi4+0xa>
     eb6:	00 94       	com	r0
     eb8:	07 d0       	rcall	.+14     	; 0xec8 <__divmodhi4_neg1>
     eba:	77 fd       	sbrc	r23, 7
     ebc:	09 d0       	rcall	.+18     	; 0xed0 <__divmodhi4_neg2>
     ebe:	0e 94 b4 07 	call	0xf68	; 0xf68 <__udivmodhi4>
     ec2:	07 fc       	sbrc	r0, 7
     ec4:	05 d0       	rcall	.+10     	; 0xed0 <__divmodhi4_neg2>
     ec6:	3e f4       	brtc	.+14     	; 0xed6 <__divmodhi4_exit>

00000ec8 <__divmodhi4_neg1>:
     ec8:	90 95       	com	r25
     eca:	81 95       	neg	r24
     ecc:	9f 4f       	sbci	r25, 0xFF	; 255
     ece:	08 95       	ret

00000ed0 <__divmodhi4_neg2>:
     ed0:	70 95       	com	r23
     ed2:	61 95       	neg	r22
     ed4:	7f 4f       	sbci	r23, 0xFF	; 255

00000ed6 <__divmodhi4_exit>:
     ed6:	08 95       	ret

00000ed8 <__udivmodsi4>:
     ed8:	a1 e2       	ldi	r26, 0x21	; 33
     eda:	1a 2e       	mov	r1, r26
     edc:	aa 1b       	sub	r26, r26
     ede:	bb 1b       	sub	r27, r27
     ee0:	fd 01       	movw	r30, r26
     ee2:	0d c0       	rjmp	.+26     	; 0xefe <__udivmodsi4_ep>

00000ee4 <__udivmodsi4_loop>:
     ee4:	aa 1f       	adc	r26, r26
     ee6:	bb 1f       	adc	r27, r27
     ee8:	ee 1f       	adc	r30, r30
     eea:	ff 1f       	adc	r31, r31
     eec:	a2 17       	cp	r26, r18
     eee:	b3 07       	cpc	r27, r19
     ef0:	e4 07       	cpc	r30, r20
     ef2:	f5 07       	cpc	r31, r21
     ef4:	20 f0       	brcs	.+8      	; 0xefe <__udivmodsi4_ep>
     ef6:	a2 1b       	sub	r26, r18
     ef8:	b3 0b       	sbc	r27, r19
     efa:	e4 0b       	sbc	r30, r20
     efc:	f5 0b       	sbc	r31, r21

00000efe <__udivmodsi4_ep>:
     efe:	66 1f       	adc	r22, r22
     f00:	77 1f       	adc	r23, r23
     f02:	88 1f       	adc	r24, r24
     f04:	99 1f       	adc	r25, r25
     f06:	1a 94       	dec	r1
     f08:	69 f7       	brne	.-38     	; 0xee4 <__udivmodsi4_loop>
     f0a:	60 95       	com	r22
     f0c:	70 95       	com	r23
     f0e:	80 95       	com	r24
     f10:	90 95       	com	r25
     f12:	9b 01       	movw	r18, r22
     f14:	ac 01       	movw	r20, r24
     f16:	bd 01       	movw	r22, r26
     f18:	cf 01       	movw	r24, r30
     f1a:	08 95       	ret

00000f1c <__divmodsi4>:
     f1c:	05 2e       	mov	r0, r21
     f1e:	97 fb       	bst	r25, 7
     f20:	1e f4       	brtc	.+6      	; 0xf28 <__divmodsi4+0xc>
     f22:	00 94       	com	r0
     f24:	0e 94 a5 07 	call	0xf4a	; 0xf4a <__negsi2>
     f28:	57 fd       	sbrc	r21, 7
     f2a:	07 d0       	rcall	.+14     	; 0xf3a <__divmodsi4_neg2>
     f2c:	0e 94 6c 07 	call	0xed8	; 0xed8 <__udivmodsi4>
     f30:	07 fc       	sbrc	r0, 7
     f32:	03 d0       	rcall	.+6      	; 0xf3a <__divmodsi4_neg2>
     f34:	4e f4       	brtc	.+18     	; 0xf48 <__divmodsi4_exit>
     f36:	0c 94 a5 07 	jmp	0xf4a	; 0xf4a <__negsi2>

00000f3a <__divmodsi4_neg2>:
     f3a:	50 95       	com	r21
     f3c:	40 95       	com	r20
     f3e:	30 95       	com	r19
     f40:	21 95       	neg	r18
     f42:	3f 4f       	sbci	r19, 0xFF	; 255
     f44:	4f 4f       	sbci	r20, 0xFF	; 255
     f46:	5f 4f       	sbci	r21, 0xFF	; 255

00000f48 <__divmodsi4_exit>:
     f48:	08 95       	ret

00000f4a <__negsi2>:
     f4a:	90 95       	com	r25
     f4c:	80 95       	com	r24
     f4e:	70 95       	com	r23
     f50:	61 95       	neg	r22
     f52:	7f 4f       	sbci	r23, 0xFF	; 255
     f54:	8f 4f       	sbci	r24, 0xFF	; 255
     f56:	9f 4f       	sbci	r25, 0xFF	; 255
     f58:	08 95       	ret

00000f5a <__usmulhisi3>:
     f5a:	0e 94 c8 07 	call	0xf90	; 0xf90 <__umulhisi3>

00000f5e <__usmulhisi3_tail>:
     f5e:	b7 ff       	sbrs	r27, 7
     f60:	08 95       	ret
     f62:	82 1b       	sub	r24, r18
     f64:	93 0b       	sbc	r25, r19
     f66:	08 95       	ret

00000f68 <__udivmodhi4>:
     f68:	aa 1b       	sub	r26, r26
     f6a:	bb 1b       	sub	r27, r27
     f6c:	51 e1       	ldi	r21, 0x11	; 17
     f6e:	07 c0       	rjmp	.+14     	; 0xf7e <__udivmodhi4_ep>

00000f70 <__udivmodhi4_loop>:
     f70:	aa 1f       	adc	r26, r26
     f72:	bb 1f       	adc	r27, r27
     f74:	a6 17       	cp	r26, r22
     f76:	b7 07       	cpc	r27, r23
     f78:	10 f0       	brcs	.+4      	; 0xf7e <__udivmodhi4_ep>
     f7a:	a6 1b       	sub	r26, r22
     f7c:	b7 0b       	sbc	r27, r23

00000f7e <__udivmodhi4_ep>:
     f7e:	88 1f       	adc	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	5a 95       	dec	r21
     f84:	a9 f7       	brne	.-22     	; 0xf70 <__udivmodhi4_loop>
     f86:	80 95       	com	r24
     f88:	90 95       	com	r25
     f8a:	bc 01       	movw	r22, r24
     f8c:	cd 01       	movw	r24, r26
     f8e:	08 95       	ret

00000f90 <__umulhisi3>:
     f90:	a2 9f       	mul	r26, r18
     f92:	b0 01       	movw	r22, r0
     f94:	b3 9f       	mul	r27, r19
     f96:	c0 01       	movw	r24, r0
     f98:	a3 9f       	mul	r26, r19
     f9a:	70 0d       	add	r23, r0
     f9c:	81 1d       	adc	r24, r1
     f9e:	11 24       	eor	r1, r1
     fa0:	91 1d       	adc	r25, r1
     fa2:	b2 9f       	mul	r27, r18
     fa4:	70 0d       	add	r23, r0
     fa6:	81 1d       	adc	r24, r1
     fa8:	11 24       	eor	r1, r1
     faa:	91 1d       	adc	r25, r1
     fac:	08 95       	ret

00000fae <malloc>:
     fae:	0f 93       	push	r16
     fb0:	1f 93       	push	r17
     fb2:	cf 93       	push	r28
     fb4:	df 93       	push	r29
     fb6:	82 30       	cpi	r24, 0x02	; 2
     fb8:	91 05       	cpc	r25, r1
     fba:	10 f4       	brcc	.+4      	; 0xfc0 <malloc+0x12>
     fbc:	82 e0       	ldi	r24, 0x02	; 2
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	e0 91 b2 03 	lds	r30, 0x03B2	; 0x8003b2 <__flp>
     fc4:	f0 91 b3 03 	lds	r31, 0x03B3	; 0x8003b3 <__flp+0x1>
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	20 e0       	ldi	r18, 0x00	; 0
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	a0 e0       	ldi	r26, 0x00	; 0
     fd0:	30 97       	sbiw	r30, 0x00	; 0
     fd2:	99 f4       	brne	.+38     	; 0xffa <malloc+0x4c>
     fd4:	21 15       	cp	r18, r1
     fd6:	31 05       	cpc	r19, r1
     fd8:	09 f4       	brne	.+2      	; 0xfdc <malloc+0x2e>
     fda:	47 c0       	rjmp	.+142    	; 0x106a <malloc+0xbc>
     fdc:	28 1b       	sub	r18, r24
     fde:	39 0b       	sbc	r19, r25
     fe0:	24 30       	cpi	r18, 0x04	; 4
     fe2:	31 05       	cpc	r19, r1
     fe4:	c0 f5       	brcc	.+112    	; 0x1056 <malloc+0xa8>
     fe6:	8a 81       	ldd	r24, Y+2	; 0x02
     fe8:	9b 81       	ldd	r25, Y+3	; 0x03
     fea:	61 15       	cp	r22, r1
     fec:	71 05       	cpc	r23, r1
     fee:	71 f1       	breq	.+92     	; 0x104c <malloc+0x9e>
     ff0:	fb 01       	movw	r30, r22
     ff2:	93 83       	std	Z+3, r25	; 0x03
     ff4:	82 83       	std	Z+2, r24	; 0x02
     ff6:	fe 01       	movw	r30, r28
     ff8:	11 c0       	rjmp	.+34     	; 0x101c <malloc+0x6e>
     ffa:	40 81       	ld	r20, Z
     ffc:	51 81       	ldd	r21, Z+1	; 0x01
     ffe:	02 81       	ldd	r16, Z+2	; 0x02
    1000:	13 81       	ldd	r17, Z+3	; 0x03
    1002:	48 17       	cp	r20, r24
    1004:	59 07       	cpc	r21, r25
    1006:	f8 f0       	brcs	.+62     	; 0x1046 <malloc+0x98>
    1008:	48 17       	cp	r20, r24
    100a:	59 07       	cpc	r21, r25
    100c:	99 f4       	brne	.+38     	; 0x1034 <malloc+0x86>
    100e:	10 97       	sbiw	r26, 0x00	; 0
    1010:	61 f0       	breq	.+24     	; 0x102a <malloc+0x7c>
    1012:	12 96       	adiw	r26, 0x02	; 2
    1014:	0c 93       	st	X, r16
    1016:	12 97       	sbiw	r26, 0x02	; 2
    1018:	13 96       	adiw	r26, 0x03	; 3
    101a:	1c 93       	st	X, r17
    101c:	32 96       	adiw	r30, 0x02	; 2
    101e:	cf 01       	movw	r24, r30
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	1f 91       	pop	r17
    1026:	0f 91       	pop	r16
    1028:	08 95       	ret
    102a:	00 93 b2 03 	sts	0x03B2, r16	; 0x8003b2 <__flp>
    102e:	10 93 b3 03 	sts	0x03B3, r17	; 0x8003b3 <__flp+0x1>
    1032:	f4 cf       	rjmp	.-24     	; 0x101c <malloc+0x6e>
    1034:	21 15       	cp	r18, r1
    1036:	31 05       	cpc	r19, r1
    1038:	19 f0       	breq	.+6      	; 0x1040 <malloc+0x92>
    103a:	42 17       	cp	r20, r18
    103c:	53 07       	cpc	r21, r19
    103e:	18 f4       	brcc	.+6      	; 0x1046 <malloc+0x98>
    1040:	9a 01       	movw	r18, r20
    1042:	bd 01       	movw	r22, r26
    1044:	ef 01       	movw	r28, r30
    1046:	df 01       	movw	r26, r30
    1048:	f8 01       	movw	r30, r16
    104a:	c2 cf       	rjmp	.-124    	; 0xfd0 <malloc+0x22>
    104c:	90 93 b3 03 	sts	0x03B3, r25	; 0x8003b3 <__flp+0x1>
    1050:	80 93 b2 03 	sts	0x03B2, r24	; 0x8003b2 <__flp>
    1054:	d0 cf       	rjmp	.-96     	; 0xff6 <malloc+0x48>
    1056:	fe 01       	movw	r30, r28
    1058:	e2 0f       	add	r30, r18
    105a:	f3 1f       	adc	r31, r19
    105c:	81 93       	st	Z+, r24
    105e:	91 93       	st	Z+, r25
    1060:	22 50       	subi	r18, 0x02	; 2
    1062:	31 09       	sbc	r19, r1
    1064:	39 83       	std	Y+1, r19	; 0x01
    1066:	28 83       	st	Y, r18
    1068:	da cf       	rjmp	.-76     	; 0x101e <malloc+0x70>
    106a:	20 91 b0 03 	lds	r18, 0x03B0	; 0x8003b0 <__brkval>
    106e:	30 91 b1 03 	lds	r19, 0x03B1	; 0x8003b1 <__brkval+0x1>
    1072:	23 2b       	or	r18, r19
    1074:	41 f4       	brne	.+16     	; 0x1086 <malloc+0xd8>
    1076:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <__malloc_heap_start>
    107a:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <__malloc_heap_start+0x1>
    107e:	30 93 b1 03 	sts	0x03B1, r19	; 0x8003b1 <__brkval+0x1>
    1082:	20 93 b0 03 	sts	0x03B0, r18	; 0x8003b0 <__brkval>
    1086:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <__malloc_heap_end>
    108a:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <__malloc_heap_end+0x1>
    108e:	21 15       	cp	r18, r1
    1090:	31 05       	cpc	r19, r1
    1092:	41 f4       	brne	.+16     	; 0x10a4 <malloc+0xf6>
    1094:	2d b7       	in	r18, 0x3d	; 61
    1096:	3e b7       	in	r19, 0x3e	; 62
    1098:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <__malloc_margin>
    109c:	50 91 19 01 	lds	r21, 0x0119	; 0x800119 <__malloc_margin+0x1>
    10a0:	24 1b       	sub	r18, r20
    10a2:	35 0b       	sbc	r19, r21
    10a4:	40 91 b0 03 	lds	r20, 0x03B0	; 0x8003b0 <__brkval>
    10a8:	50 91 b1 03 	lds	r21, 0x03B1	; 0x8003b1 <__brkval+0x1>
    10ac:	42 17       	cp	r20, r18
    10ae:	53 07       	cpc	r21, r19
    10b0:	08 f0       	brcs	.+2      	; 0x10b4 <malloc+0x106>
    10b2:	b5 cf       	rjmp	.-150    	; 0x101e <malloc+0x70>
    10b4:	24 1b       	sub	r18, r20
    10b6:	35 0b       	sbc	r19, r21
    10b8:	28 17       	cp	r18, r24
    10ba:	39 07       	cpc	r19, r25
    10bc:	08 f4       	brcc	.+2      	; 0x10c0 <malloc+0x112>
    10be:	af cf       	rjmp	.-162    	; 0x101e <malloc+0x70>
    10c0:	bc 01       	movw	r22, r24
    10c2:	6e 5f       	subi	r22, 0xFE	; 254
    10c4:	7f 4f       	sbci	r23, 0xFF	; 255
    10c6:	26 17       	cp	r18, r22
    10c8:	37 07       	cpc	r19, r23
    10ca:	08 f4       	brcc	.+2      	; 0x10ce <malloc+0x120>
    10cc:	a8 cf       	rjmp	.-176    	; 0x101e <malloc+0x70>
    10ce:	64 0f       	add	r22, r20
    10d0:	75 1f       	adc	r23, r21
    10d2:	70 93 b1 03 	sts	0x03B1, r23	; 0x8003b1 <__brkval+0x1>
    10d6:	60 93 b0 03 	sts	0x03B0, r22	; 0x8003b0 <__brkval>
    10da:	fa 01       	movw	r30, r20
    10dc:	81 93       	st	Z+, r24
    10de:	91 93       	st	Z+, r25
    10e0:	9e cf       	rjmp	.-196    	; 0x101e <malloc+0x70>

000010e2 <free>:
    10e2:	cf 93       	push	r28
    10e4:	df 93       	push	r29
    10e6:	00 97       	sbiw	r24, 0x00	; 0
    10e8:	e9 f0       	breq	.+58     	; 0x1124 <__stack+0x25>
    10ea:	fc 01       	movw	r30, r24
    10ec:	32 97       	sbiw	r30, 0x02	; 2
    10ee:	13 82       	std	Z+3, r1	; 0x03
    10f0:	12 82       	std	Z+2, r1	; 0x02
    10f2:	c0 91 b2 03 	lds	r28, 0x03B2	; 0x8003b2 <__flp>
    10f6:	d0 91 b3 03 	lds	r29, 0x03B3	; 0x8003b3 <__flp+0x1>
    10fa:	de 01       	movw	r26, r28
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	20 e0       	ldi	r18, 0x00	; 0
    1100:	20 97       	sbiw	r28, 0x00	; 0
    1102:	a1 f4       	brne	.+40     	; 0x112c <__stack+0x2d>
    1104:	20 81       	ld	r18, Z
    1106:	31 81       	ldd	r19, Z+1	; 0x01
    1108:	82 0f       	add	r24, r18
    110a:	93 1f       	adc	r25, r19
    110c:	20 91 b0 03 	lds	r18, 0x03B0	; 0x8003b0 <__brkval>
    1110:	30 91 b1 03 	lds	r19, 0x03B1	; 0x8003b1 <__brkval+0x1>
    1114:	28 17       	cp	r18, r24
    1116:	39 07       	cpc	r19, r25
    1118:	09 f0       	breq	.+2      	; 0x111c <__stack+0x1d>
    111a:	67 c0       	rjmp	.+206    	; 0x11ea <__stack+0xeb>
    111c:	f0 93 b1 03 	sts	0x03B1, r31	; 0x8003b1 <__brkval+0x1>
    1120:	e0 93 b0 03 	sts	0x03B0, r30	; 0x8003b0 <__brkval>
    1124:	df 91       	pop	r29
    1126:	cf 91       	pop	r28
    1128:	08 95       	ret
    112a:	da 01       	movw	r26, r20
    112c:	ae 17       	cp	r26, r30
    112e:	bf 07       	cpc	r27, r31
    1130:	08 f0       	brcs	.+2      	; 0x1134 <__stack+0x35>
    1132:	40 c0       	rjmp	.+128    	; 0x11b4 <__stack+0xb5>
    1134:	12 96       	adiw	r26, 0x02	; 2
    1136:	4d 91       	ld	r20, X+
    1138:	5c 91       	ld	r21, X
    113a:	13 97       	sbiw	r26, 0x03	; 3
    113c:	9d 01       	movw	r18, r26
    113e:	41 15       	cp	r20, r1
    1140:	51 05       	cpc	r21, r1
    1142:	99 f7       	brne	.-26     	; 0x112a <__stack+0x2b>
    1144:	d9 01       	movw	r26, r18
    1146:	13 96       	adiw	r26, 0x03	; 3
    1148:	fc 93       	st	X, r31
    114a:	ee 93       	st	-X, r30
    114c:	12 97       	sbiw	r26, 0x02	; 2
    114e:	4d 91       	ld	r20, X+
    1150:	5d 91       	ld	r21, X+
    1152:	a4 0f       	add	r26, r20
    1154:	b5 1f       	adc	r27, r21
    1156:	ea 17       	cp	r30, r26
    1158:	fb 07       	cpc	r31, r27
    115a:	79 f4       	brne	.+30     	; 0x117a <__stack+0x7b>
    115c:	80 81       	ld	r24, Z
    115e:	91 81       	ldd	r25, Z+1	; 0x01
    1160:	02 96       	adiw	r24, 0x02	; 2
    1162:	84 0f       	add	r24, r20
    1164:	95 1f       	adc	r25, r21
    1166:	d9 01       	movw	r26, r18
    1168:	11 96       	adiw	r26, 0x01	; 1
    116a:	9c 93       	st	X, r25
    116c:	8e 93       	st	-X, r24
    116e:	82 81       	ldd	r24, Z+2	; 0x02
    1170:	93 81       	ldd	r25, Z+3	; 0x03
    1172:	13 96       	adiw	r26, 0x03	; 3
    1174:	9c 93       	st	X, r25
    1176:	8e 93       	st	-X, r24
    1178:	12 97       	sbiw	r26, 0x02	; 2
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	a0 e0       	ldi	r26, 0x00	; 0
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	9b 81       	ldd	r25, Y+3	; 0x03
    1182:	00 97       	sbiw	r24, 0x00	; 0
    1184:	b9 f5       	brne	.+110    	; 0x11f4 <__stack+0xf5>
    1186:	fe 01       	movw	r30, r28
    1188:	81 91       	ld	r24, Z+
    118a:	91 91       	ld	r25, Z+
    118c:	e8 0f       	add	r30, r24
    118e:	f9 1f       	adc	r31, r25
    1190:	80 91 b0 03 	lds	r24, 0x03B0	; 0x8003b0 <__brkval>
    1194:	90 91 b1 03 	lds	r25, 0x03B1	; 0x8003b1 <__brkval+0x1>
    1198:	8e 17       	cp	r24, r30
    119a:	9f 07       	cpc	r25, r31
    119c:	19 f6       	brne	.-122    	; 0x1124 <__stack+0x25>
    119e:	10 97       	sbiw	r26, 0x00	; 0
    11a0:	61 f5       	brne	.+88     	; 0x11fa <__stack+0xfb>
    11a2:	10 92 b3 03 	sts	0x03B3, r1	; 0x8003b3 <__flp+0x1>
    11a6:	10 92 b2 03 	sts	0x03B2, r1	; 0x8003b2 <__flp>
    11aa:	d0 93 b1 03 	sts	0x03B1, r29	; 0x8003b1 <__brkval+0x1>
    11ae:	c0 93 b0 03 	sts	0x03B0, r28	; 0x8003b0 <__brkval>
    11b2:	b8 cf       	rjmp	.-144    	; 0x1124 <__stack+0x25>
    11b4:	b3 83       	std	Z+3, r27	; 0x03
    11b6:	a2 83       	std	Z+2, r26	; 0x02
    11b8:	40 81       	ld	r20, Z
    11ba:	51 81       	ldd	r21, Z+1	; 0x01
    11bc:	84 0f       	add	r24, r20
    11be:	95 1f       	adc	r25, r21
    11c0:	a8 17       	cp	r26, r24
    11c2:	b9 07       	cpc	r27, r25
    11c4:	71 f4       	brne	.+28     	; 0x11e2 <__stack+0xe3>
    11c6:	4e 5f       	subi	r20, 0xFE	; 254
    11c8:	5f 4f       	sbci	r21, 0xFF	; 255
    11ca:	8d 91       	ld	r24, X+
    11cc:	9c 91       	ld	r25, X
    11ce:	11 97       	sbiw	r26, 0x01	; 1
    11d0:	48 0f       	add	r20, r24
    11d2:	59 1f       	adc	r21, r25
    11d4:	51 83       	std	Z+1, r21	; 0x01
    11d6:	40 83       	st	Z, r20
    11d8:	12 96       	adiw	r26, 0x02	; 2
    11da:	8d 91       	ld	r24, X+
    11dc:	9c 91       	ld	r25, X
    11de:	93 83       	std	Z+3, r25	; 0x03
    11e0:	82 83       	std	Z+2, r24	; 0x02
    11e2:	21 15       	cp	r18, r1
    11e4:	31 05       	cpc	r19, r1
    11e6:	09 f0       	breq	.+2      	; 0x11ea <__stack+0xeb>
    11e8:	ad cf       	rjmp	.-166    	; 0x1144 <__stack+0x45>
    11ea:	f0 93 b3 03 	sts	0x03B3, r31	; 0x8003b3 <__flp+0x1>
    11ee:	e0 93 b2 03 	sts	0x03B2, r30	; 0x8003b2 <__flp>
    11f2:	98 cf       	rjmp	.-208    	; 0x1124 <__stack+0x25>
    11f4:	de 01       	movw	r26, r28
    11f6:	ec 01       	movw	r28, r24
    11f8:	c2 cf       	rjmp	.-124    	; 0x117e <__stack+0x7f>
    11fa:	13 96       	adiw	r26, 0x03	; 3
    11fc:	1c 92       	st	X, r1
    11fe:	1e 92       	st	-X, r1
    1200:	12 97       	sbiw	r26, 0x02	; 2
    1202:	d3 cf       	rjmp	.-90     	; 0x11aa <__stack+0xab>

00001204 <_exit>:
    1204:	f8 94       	cli

00001206 <__stop_program>:
    1206:	ff cf       	rjmp	.-2      	; 0x1206 <__stop_program>
