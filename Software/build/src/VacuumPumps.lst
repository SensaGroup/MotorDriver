   1               		.file	"VacuumPumps.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               	.global	VacuumPump_Add
  13               	VacuumPump_Add:
  14               	.LFB11:
  15               		.file 1 "src/VacuumPumps.c"
   1:src/VacuumPumps.c **** #include "VacuumPumps.h"
   2:src/VacuumPumps.c **** 
   3:src/VacuumPumps.c **** static uint16_t timer = 0;
   4:src/VacuumPumps.c **** static VacuumPump instances[VACUUM_PUMP_CONFIG_COUNT_MAX];
   5:src/VacuumPumps.c **** static uint8_t count = 0;
   6:src/VacuumPumps.c **** //
   7:src/VacuumPumps.c **** // ISR(TIMER0_COMP){
   8:src/VacuumPumps.c **** //
   9:src/VacuumPumps.c **** //   if(timer >= 0) {
  10:src/VacuumPumps.c **** //     timer --;
  11:src/VacuumPumps.c **** //   }
  12:src/VacuumPumps.c **** //
  13:src/VacuumPumps.c **** // }
  14:src/VacuumPumps.c **** 
  15:src/VacuumPumps.c **** void VacuumPump_Add(Pin* pumpPin, Pin* switchPin, uint8_t number) {
  16               		.loc 1 15 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 FF92      		push r15
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 15, -2
  23 0002 0F93      		push r16
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 16, -3
  27 0004 1F93      		push r17
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 5
  30               		.cfi_offset 17, -4
  31 0006 CF93      		push r28
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 6
  34               		.cfi_offset 28, -5
  35 0008 DF93      		push r29
  36               	.LCFI4:
  37               		.cfi_def_cfa_offset 7
  38               		.cfi_offset 29, -6
  39               	/* prologue: function */
  40               	/* frame size = 0 */
  41               	/* stack size = 5 */
  42               	.L__stack_usage = 5
  43 000a 8C01      		movw r16,r24
  44 000c EB01      		movw r28,r22
  45 000e F42E      		mov r15,r20
  16:src/VacuumPumps.c **** 
  17:src/VacuumPumps.c **** 	// Set mode
  18:src/VacuumPumps.c ****   Pin_SetMode(pumpPin, PIN_OUTPUT);
  46               		.loc 1 18 0
  47 0010 61E0      		ldi r22,lo8(1)
  48               	.LVL1:
  49 0012 0E94 0000 		call Pin_SetMode
  50               	.LVL2:
  19:src/VacuumPumps.c **** 	Pin_SetMode(switchPin, PIN_OUTPUT);
  51               		.loc 1 19 0
  52 0016 61E0      		ldi r22,lo8(1)
  53 0018 CE01      		movw r24,r28
  54 001a 0E94 0000 		call Pin_SetMode
  55               	.LVL3:
  20:src/VacuumPumps.c **** 
  21:src/VacuumPumps.c **** 	Pin_WriteDigital(pumpPin, PIN_LOW);
  56               		.loc 1 21 0
  57 001e 60E0      		ldi r22,0
  58 0020 C801      		movw r24,r16
  59 0022 0E94 0000 		call Pin_WriteDigital
  60               	.LVL4:
  22:src/VacuumPumps.c **** 	Pin_WriteDigital(switchPin, PIN_LOW);
  61               		.loc 1 22 0
  62 0026 60E0      		ldi r22,0
  63 0028 CE01      		movw r24,r28
  64 002a 0E94 0000 		call Pin_WriteDigital
  65               	.LVL5:
  23:src/VacuumPumps.c **** 
  24:src/VacuumPumps.c ****   // Initialize values
  25:src/VacuumPumps.c ****   instances[count].canId = VACUUM_PUMP_CANID + number;
  66               		.loc 1 25 0
  67 002e 8091 0000 		lds r24,count
  68 0032 96E0      		ldi r25,lo8(6)
  69 0034 899F      		mul r24,r25
  70 0036 F001      		movw r30,r0
  71 0038 1124      		clr __zero_reg__
  72 003a E050      		subi r30,lo8(-(instances))
  73 003c F040      		sbci r31,hi8(-(instances))
  74 003e 4F2D      		mov r20,r15
  75 0040 50E0      		ldi r21,0
  76 0042 405F      		subi r20,-16
  77 0044 5349      		sbci r21,-109
  78 0046 5583      		std Z+5,r21
  79 0048 4483      		std Z+4,r20
  26:src/VacuumPumps.c ****   instances[count].pumpPin = pumpPin;
  80               		.loc 1 26 0
  81 004a 1183      		std Z+1,r17
  82 004c 0083      		st Z,r16
  27:src/VacuumPumps.c **** 	instances[count].switchPin = switchPin;
  83               		.loc 1 27 0
  84 004e D383      		std Z+3,r29
  85 0050 C283      		std Z+2,r28
  28:src/VacuumPumps.c **** 
  29:src/VacuumPumps.c ****   // Return index
  30:src/VacuumPumps.c ****   count++;
  86               		.loc 1 30 0
  87 0052 8F5F      		subi r24,lo8(-(1))
  88 0054 8093 0000 		sts count,r24
  89               	/* epilogue start */
  31:src/VacuumPumps.c **** 
  32:src/VacuumPumps.c **** }
  90               		.loc 1 32 0
  91 0058 DF91      		pop r29
  92 005a CF91      		pop r28
  93               	.LVL6:
  94 005c 1F91      		pop r17
  95 005e 0F91      		pop r16
  96               	.LVL7:
  97 0060 FF90      		pop r15
  98               	.LVL8:
  99 0062 0895      		ret
 100               		.cfi_endproc
 101               	.LFE11:
 103               	.global	VacuumPump_OnMessage
 105               	VacuumPump_OnMessage:
 106               	.LFB12:
  33:src/VacuumPumps.c **** 
  34:src/VacuumPumps.c **** bool VacuumPump_OnMessage(can_t* canMsg) {
 107               		.loc 1 34 0
 108               		.cfi_startproc
 109               	.LVL9:
 110 0064 BF92      		push r11
 111               	.LCFI5:
 112               		.cfi_def_cfa_offset 3
 113               		.cfi_offset 11, -2
 114 0066 CF92      		push r12
 115               	.LCFI6:
 116               		.cfi_def_cfa_offset 4
 117               		.cfi_offset 12, -3
 118 0068 DF92      		push r13
 119               	.LCFI7:
 120               		.cfi_def_cfa_offset 5
 121               		.cfi_offset 13, -4
 122 006a EF92      		push r14
 123               	.LCFI8:
 124               		.cfi_def_cfa_offset 6
 125               		.cfi_offset 14, -5
 126 006c FF92      		push r15
 127               	.LCFI9:
 128               		.cfi_def_cfa_offset 7
 129               		.cfi_offset 15, -6
 130 006e 0F93      		push r16
 131               	.LCFI10:
 132               		.cfi_def_cfa_offset 8
 133               		.cfi_offset 16, -7
 134 0070 1F93      		push r17
 135               	.LCFI11:
 136               		.cfi_def_cfa_offset 9
 137               		.cfi_offset 17, -8
 138 0072 CF93      		push r28
 139               	.LCFI12:
 140               		.cfi_def_cfa_offset 10
 141               		.cfi_offset 28, -9
 142 0074 DF93      		push r29
 143               	.LCFI13:
 144               		.cfi_def_cfa_offset 11
 145               		.cfi_offset 29, -10
 146               	/* prologue: function */
 147               	/* frame size = 0 */
 148               	/* stack size = 9 */
 149               	.L__stack_usage = 9
 150               	.LVL10:
  35:src/VacuumPumps.c **** 	size_t i;
  36:src/VacuumPumps.c **** 	bool tmpCheck = false;
  37:src/VacuumPumps.c **** 
  38:src/VacuumPumps.c **** 	if(unlikely(canMsg->id == VACUUM_PUMP_CANID)) {
 151               		.loc 1 38 0
 152 0076 FC01      		movw r30,r24
 153 0078 4081      		ld r20,Z
 154 007a 5181      		ldd r21,Z+1
 155 007c 6281      		ldd r22,Z+2
 156 007e 7381      		ldd r23,Z+3
 157 0080 4031      		cpi r20,16
 158 0082 5C46      		sbci r21,108
 159 0084 6105      		cpc r22,__zero_reg__
 160 0086 7105      		cpc r23,__zero_reg__
 161 0088 01F0      		breq .+2
 162 008a 00C0      		rjmp .L13
 163 008c EC01      		movw r28,r24
 164 008e 2696      		adiw r28,6
 165 0090 80E0      		ldi r24,lo8(instances)
 166 0092 E82E      		mov r14,r24
 167 0094 80E0      		ldi r24,hi8(instances)
 168 0096 F82E      		mov r15,r24
 169               	.LVL11:
 170 0098 8701      		movw r16,r14
 171 009a B12C      		mov r11,__zero_reg__
 172 009c C12C      		mov r12,__zero_reg__
 173 009e D12C      		mov r13,__zero_reg__
 174               	.LVL12:
 175               	.L4:
  39:src/VacuumPumps.c **** 		for(i = 0; i < count; i++) {
 176               		.loc 1 39 0 discriminator 1
 177 00a0 8091 0000 		lds r24,count
 178 00a4 90E0      		ldi r25,0
 179 00a6 C816      		cp r12,r24
 180 00a8 D906      		cpc r13,r25
 181 00aa 00F4      		brsh .L15
  40:src/VacuumPumps.c **** 
  41:src/VacuumPumps.c **** 			switch(canMsg->data[i]) {
 182               		.loc 1 41 0
 183 00ac 8991      		ld r24,Y+
 184 00ae 8823      		tst r24
 185 00b0 01F0      		breq .L6
 186 00b2 8130      		cpi r24,lo8(1)
 187 00b4 01F4      		brne .L5
  42:src/VacuumPumps.c **** 				case 0:
  43:src/VacuumPumps.c **** 					Pin_WriteDigital(instances[i].pumpPin, PIN_LOW);
  44:src/VacuumPumps.c **** 					Pin_WriteDigital(instances[i].switchPin, PIN_HIGH);
  45:src/VacuumPumps.c **** 					tmpCheck = true;
  46:src/VacuumPumps.c **** 					break;
  47:src/VacuumPumps.c **** 
  48:src/VacuumPumps.c **** 				case 1:
  49:src/VacuumPumps.c **** 					Pin_WriteDigital(instances[i].pumpPin, PIN_HIGH);
 188               		.loc 1 49 0
 189 00b6 61E0      		ldi r22,lo8(1)
 190 00b8 F801      		movw r30,r16
 191 00ba 8081      		ld r24,Z
 192 00bc 9181      		ldd r25,Z+1
 193 00be 0E94 0000 		call Pin_WriteDigital
 194               	.LVL13:
  50:src/VacuumPumps.c ****           Pin_WriteDigital(instances[i].switchPin, PIN_LOW);
 195               		.loc 1 50 0
 196 00c2 60E0      		ldi r22,0
 197 00c4 F801      		movw r30,r16
 198 00c6 8281      		ldd r24,Z+2
 199 00c8 9381      		ldd r25,Z+3
 200 00ca 0E94 0000 		call Pin_WriteDigital
 201               	.LVL14:
  51:src/VacuumPumps.c **** 					break;
 202               		.loc 1 51 0
 203 00ce 00C0      		rjmp .L5
 204               	.L6:
  43:src/VacuumPumps.c **** 					Pin_WriteDigital(instances[i].switchPin, PIN_HIGH);
 205               		.loc 1 43 0
 206 00d0 60E0      		ldi r22,0
 207 00d2 F801      		movw r30,r16
 208 00d4 8081      		ld r24,Z
 209 00d6 9181      		ldd r25,Z+1
 210 00d8 0E94 0000 		call Pin_WriteDigital
 211               	.LVL15:
  44:src/VacuumPumps.c **** 					tmpCheck = true;
 212               		.loc 1 44 0
 213 00dc 61E0      		ldi r22,lo8(1)
 214 00de F801      		movw r30,r16
 215 00e0 8281      		ldd r24,Z+2
 216 00e2 9381      		ldd r25,Z+3
 217 00e4 0E94 0000 		call Pin_WriteDigital
 218               	.LVL16:
  45:src/VacuumPumps.c **** 					break;
 219               		.loc 1 45 0
 220 00e8 BB24      		clr r11
 221 00ea B394      		inc r11
 222               	.LVL17:
 223               	.L5:
  39:src/VacuumPumps.c **** 
 224               		.loc 1 39 0 discriminator 2
 225 00ec FFEF      		ldi r31,-1
 226 00ee CF1A      		sub r12,r31
 227 00f0 DF0A      		sbc r13,r31
 228               	.LVL18:
 229 00f2 0A5F      		subi r16,-6
 230 00f4 1F4F      		sbci r17,-1
 231 00f6 00C0      		rjmp .L4
 232               	.L15:
  52:src/VacuumPumps.c **** 
  53:src/VacuumPumps.c **** 			}
  54:src/VacuumPumps.c **** 
  55:src/VacuumPumps.c **** 
  56:src/VacuumPumps.c **** 		}
  57:src/VacuumPumps.c **** 		if(tmpCheck == true) {
 233               		.loc 1 57 0
 234 00f8 B110      		cpse r11,__zero_reg__
 235 00fa 00C0      		rjmp .L9
 236               	.LVL19:
 237               	.L12:
  58:src/VacuumPumps.c **** 			_delay_ms(VACUUM_SWITCH_RELASE_TIME);
  59:src/VacuumPumps.c **** 
  60:src/VacuumPumps.c **** 			for(i = 0; i < count; i++) {
  61:src/VacuumPumps.c **** 				Pin_WriteDigital(instances[i].switchPin, PIN_LOW);
  62:src/VacuumPumps.c **** 			}
  63:src/VacuumPumps.c **** 		}
  64:src/VacuumPumps.c **** 
  65:src/VacuumPumps.c **** 		return true;
 238               		.loc 1 65 0
 239 00fc 81E0      		ldi r24,lo8(1)
 240 00fe 00C0      		rjmp .L3
 241               	.LVL20:
 242               	.L9:
 243               	.LBB6:
 244               	.LBB7:
 245               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 246               		.loc 2 187 0
 247 0100 2FEF      		ldi r18,lo8(319999)
 248 0102 81EE      		ldi r24,hi8(319999)
 249 0104 94E0      		ldi r25,hlo8(319999)
 250 0106 2150      	1:	subi r18,1
 251 0108 8040      		sbci r24,0
 252 010a 9040      		sbci r25,0
 253 010c 01F4      		brne 1b
 254 010e 00C0      		rjmp .
 255 0110 0000      		nop
 256               	.LVL21:
 257               	.LBE7:
 258               	.LBE6:
  60:src/VacuumPumps.c **** 				Pin_WriteDigital(instances[i].switchPin, PIN_LOW);
 259               		.loc 1 60 0
 260 0112 C0E0      		ldi r28,0
 261 0114 D0E0      		ldi r29,0
 262               	.LVL22:
 263               	.L10:
  60:src/VacuumPumps.c **** 				Pin_WriteDigital(instances[i].switchPin, PIN_LOW);
 264               		.loc 1 60 0 is_stmt 0 discriminator 1
 265 0116 8091 0000 		lds r24,count
 266 011a 90E0      		ldi r25,0
 267 011c C817      		cp r28,r24
 268 011e D907      		cpc r29,r25
 269 0120 00F4      		brsh .L12
  61:src/VacuumPumps.c **** 			}
 270               		.loc 1 61 0 is_stmt 1 discriminator 3
 271 0122 60E0      		ldi r22,0
 272 0124 F701      		movw r30,r14
 273 0126 8281      		ldd r24,Z+2
 274 0128 9381      		ldd r25,Z+3
 275 012a 0E94 0000 		call Pin_WriteDigital
 276               	.LVL23:
  60:src/VacuumPumps.c **** 				Pin_WriteDigital(instances[i].switchPin, PIN_LOW);
 277               		.loc 1 60 0 discriminator 3
 278 012e 2196      		adiw r28,1
 279               	.LVL24:
 280 0130 F6E0      		ldi r31,6
 281 0132 EF0E      		add r14,r31
 282 0134 F11C      		adc r15,__zero_reg__
 283 0136 00C0      		rjmp .L10
 284               	.LVL25:
 285               	.L13:
  66:src/VacuumPumps.c **** 	}
  67:src/VacuumPumps.c **** 
  68:src/VacuumPumps.c **** 	return false;
 286               		.loc 1 68 0
 287 0138 80E0      		ldi r24,0
 288               	.LVL26:
 289               	.L3:
 290               	/* epilogue start */
  69:src/VacuumPumps.c **** 
  70:src/VacuumPumps.c **** }
 291               		.loc 1 70 0
 292 013a DF91      		pop r29
 293 013c CF91      		pop r28
 294 013e 1F91      		pop r17
 295 0140 0F91      		pop r16
 296 0142 FF90      		pop r15
 297 0144 EF90      		pop r14
 298 0146 DF90      		pop r13
 299 0148 CF90      		pop r12
 300 014a BF90      		pop r11
 301 014c 0895      		ret
 302               		.cfi_endproc
 303               	.LFE12:
 305               	.global	SingleVacuumPump_OnMessage
 307               	SingleVacuumPump_OnMessage:
 308               	.LFB13:
  71:src/VacuumPumps.c **** 
  72:src/VacuumPumps.c **** bool SingleVacuumPump_OnMessage(can_t* canMsg) {
 309               		.loc 1 72 0
 310               		.cfi_startproc
 311               	.LVL27:
 312 014e 8F92      		push r8
 313               	.LCFI14:
 314               		.cfi_def_cfa_offset 3
 315               		.cfi_offset 8, -2
 316 0150 9F92      		push r9
 317               	.LCFI15:
 318               		.cfi_def_cfa_offset 4
 319               		.cfi_offset 9, -3
 320 0152 AF92      		push r10
 321               	.LCFI16:
 322               		.cfi_def_cfa_offset 5
 323               		.cfi_offset 10, -4
 324 0154 BF92      		push r11
 325               	.LCFI17:
 326               		.cfi_def_cfa_offset 6
 327               		.cfi_offset 11, -5
 328 0156 CF92      		push r12
 329               	.LCFI18:
 330               		.cfi_def_cfa_offset 7
 331               		.cfi_offset 12, -6
 332 0158 DF92      		push r13
 333               	.LCFI19:
 334               		.cfi_def_cfa_offset 8
 335               		.cfi_offset 13, -7
 336 015a EF92      		push r14
 337               	.LCFI20:
 338               		.cfi_def_cfa_offset 9
 339               		.cfi_offset 14, -8
 340 015c FF92      		push r15
 341               	.LCFI21:
 342               		.cfi_def_cfa_offset 10
 343               		.cfi_offset 15, -9
 344 015e CF93      		push r28
 345               	.LCFI22:
 346               		.cfi_def_cfa_offset 11
 347               		.cfi_offset 28, -10
 348 0160 DF93      		push r29
 349               	.LCFI23:
 350               		.cfi_def_cfa_offset 12
 351               		.cfi_offset 29, -11
 352               	/* prologue: function */
 353               	/* frame size = 0 */
 354               	/* stack size = 10 */
 355               	.L__stack_usage = 10
 356               	.LVL28:
  73:src/VacuumPumps.c **** 	size_t i;
  74:src/VacuumPumps.c **** 	bool tmpCheck = false;
  75:src/VacuumPumps.c **** 
  76:src/VacuumPumps.c **** 	for(i = 0; i < count; i++) {
 357               		.loc 1 76 0
 358 0162 4091 0000 		lds r20,count
 359 0166 50E0      		ldi r21,0
 360 0168 E0E0      		ldi r30,lo8(instances)
 361 016a F0E0      		ldi r31,hi8(instances)
 362 016c 20E0      		ldi r18,0
 363 016e 30E0      		ldi r19,0
 364               	.LVL29:
 365               	.L17:
 366               		.loc 1 76 0 is_stmt 0 discriminator 1
 367 0170 2417      		cp r18,r20
 368 0172 3507      		cpc r19,r21
 369 0174 00F0      		brlo .+2
 370 0176 00C0      		rjmp .L26
  77:src/VacuumPumps.c **** 		if(unlikely(canMsg->id == instances[i].canId)) {
 371               		.loc 1 77 0 is_stmt 1
 372 0178 C480      		ldd r12,Z+4
 373 017a D580      		ldd r13,Z+5
 374 017c E12C      		mov r14,__zero_reg__
 375 017e F12C      		mov r15,__zero_reg__
 376 0180 3696      		adiw r30,6
 377 0182 DC01      		movw r26,r24
 378 0184 8D90      		ld r8,X+
 379 0186 9D90      		ld r9,X+
 380 0188 AD90      		ld r10,X+
 381 018a BC90      		ld r11,X
 382 018c 8C14      		cp r8,r12
 383 018e 9D04      		cpc r9,r13
 384 0190 AE04      		cpc r10,r14
 385 0192 BF04      		cpc r11,r15
 386 0194 01F4      		brne .L18
 387 0196 FC01      		movw r30,r24
  78:src/VacuumPumps.c **** 
  79:src/VacuumPumps.c **** 			switch(canMsg->data[0]) {
 388               		.loc 1 79 0
 389 0198 8681      		ldd r24,Z+6
 390               	.LVL30:
 391 019a 8823      		tst r24
 392 019c 01F0      		breq .L20
 393 019e 8130      		cpi r24,lo8(1)
 394 01a0 01F4      		brne .L19
  80:src/VacuumPumps.c **** 				case 0:
  81:src/VacuumPumps.c **** 					Pin_WriteDigital(instances[i].pumpPin, PIN_LOW);
  82:src/VacuumPumps.c **** 					Pin_WriteDigital(instances[i].switchPin, PIN_HIGH);
  83:src/VacuumPumps.c **** 					tmpCheck = true;
  84:src/VacuumPumps.c **** 					break;
  85:src/VacuumPumps.c **** 
  86:src/VacuumPumps.c **** 				case 1:
  87:src/VacuumPumps.c **** 					Pin_WriteDigital(instances[i].pumpPin, PIN_HIGH);
 395               		.loc 1 87 0
 396 01a2 86E0      		ldi r24,lo8(6)
 397 01a4 829F      		mul r24,r18
 398 01a6 E001      		movw r28,r0
 399 01a8 839F      		mul r24,r19
 400 01aa D00D      		add r29,r0
 401 01ac 1124      		clr __zero_reg__
 402 01ae C050      		subi r28,lo8(-(instances))
 403 01b0 D040      		sbci r29,hi8(-(instances))
 404 01b2 61E0      		ldi r22,lo8(1)
 405 01b4 8881      		ld r24,Y
 406 01b6 9981      		ldd r25,Y+1
 407 01b8 0E94 0000 		call Pin_WriteDigital
 408               	.LVL31:
 409 01bc 00C0      		rjmp .L25
 410               	.LVL32:
 411               	.L20:
  81:src/VacuumPumps.c **** 					Pin_WriteDigital(instances[i].switchPin, PIN_HIGH);
 412               		.loc 1 81 0
 413 01be 86E0      		ldi r24,lo8(6)
 414 01c0 829F      		mul r24,r18
 415 01c2 E001      		movw r28,r0
 416 01c4 839F      		mul r24,r19
 417 01c6 D00D      		add r29,r0
 418 01c8 1124      		clr __zero_reg__
 419 01ca C050      		subi r28,lo8(-(instances))
 420 01cc D040      		sbci r29,hi8(-(instances))
 421 01ce 60E0      		ldi r22,0
 422 01d0 8881      		ld r24,Y
 423 01d2 9981      		ldd r25,Y+1
 424 01d4 0E94 0000 		call Pin_WriteDigital
 425               	.LVL33:
  82:src/VacuumPumps.c **** 					tmpCheck = true;
 426               		.loc 1 82 0
 427 01d8 61E0      		ldi r22,lo8(1)
 428 01da 8A81      		ldd r24,Y+2
 429 01dc 9B81      		ldd r25,Y+3
 430 01de 0E94 0000 		call Pin_WriteDigital
 431               	.LVL34:
 432               	.LBB8:
 433               	.LBB9:
 434               		.loc 2 187 0
 435 01e2 BFEF      		ldi r27,lo8(319999)
 436 01e4 21EE      		ldi r18,hi8(319999)
 437 01e6 84E0      		ldi r24,hlo8(319999)
 438 01e8 B150      	1:	subi r27,1
 439 01ea 2040      		sbci r18,0
 440 01ec 8040      		sbci r24,0
 441 01ee 01F4      		brne 1b
 442 01f0 00C0      		rjmp .
 443 01f2 0000      		nop
 444               	.LVL35:
 445               	.L25:
 446               	.LBE9:
 447               	.LBE8:
  88:src/VacuumPumps.c **** 					Pin_WriteDigital(instances[i].switchPin, PIN_LOW);
 448               		.loc 1 88 0
 449 01f4 60E0      		ldi r22,0
 450 01f6 8A81      		ldd r24,Y+2
 451 01f8 9B81      		ldd r25,Y+3
 452 01fa 0E94 0000 		call Pin_WriteDigital
 453               	.LVL36:
  89:src/VacuumPumps.c **** 					break;
 454               		.loc 1 89 0
 455 01fe 00C0      		rjmp .L19
 456               	.LVL37:
 457               	.L18:
  76:src/VacuumPumps.c **** 		if(unlikely(canMsg->id == instances[i].canId)) {
 458               		.loc 1 76 0 discriminator 2
 459 0200 2F5F      		subi r18,-1
 460 0202 3F4F      		sbci r19,-1
 461               	.LVL38:
 462 0204 00C0      		rjmp .L17
 463               	.L26:
  90:src/VacuumPumps.c **** 			}
  91:src/VacuumPumps.c **** 
  92:src/VacuumPumps.c **** 			if(tmpCheck == true) {
  93:src/VacuumPumps.c **** 				_delay_ms(VACUUM_SWITCH_RELASE_TIME);
  94:src/VacuumPumps.c **** 				Pin_WriteDigital(instances[i].switchPin, PIN_LOW);
  95:src/VacuumPumps.c **** 			}
  96:src/VacuumPumps.c **** 
  97:src/VacuumPumps.c **** 			return true;
  98:src/VacuumPumps.c **** 		}
  99:src/VacuumPumps.c **** 	}
 100:src/VacuumPumps.c **** 
 101:src/VacuumPumps.c **** 	return false;
 464               		.loc 1 101 0
 465 0206 80E0      		ldi r24,0
 466               	.LVL39:
 467 0208 00C0      		rjmp .L24
 468               	.LVL40:
 469               	.L19:
  97:src/VacuumPumps.c **** 		}
 470               		.loc 1 97 0
 471 020a 81E0      		ldi r24,lo8(1)
 472               	.L24:
 473               	/* epilogue start */
 102:src/VacuumPumps.c **** }
 474               		.loc 1 102 0
 475 020c DF91      		pop r29
 476 020e CF91      		pop r28
 477 0210 FF90      		pop r15
 478 0212 EF90      		pop r14
 479 0214 DF90      		pop r13
 480 0216 CF90      		pop r12
 481 0218 BF90      		pop r11
 482 021a AF90      		pop r10
 483 021c 9F90      		pop r9
 484 021e 8F90      		pop r8
 485 0220 0895      		ret
 486               		.cfi_endproc
 487               	.LFE13:
 489               		.local	count
 490               		.comm	count,1,1
 491               		.local	instances
 492               		.comm	instances,30,1
 493               	.Letext0:
 494               		.file 3 "/usr/lib/avr/include/stdint.h"
 495               		.file 4 "/usr/lib/gcc/avr/5.4.0/include/stddef.h"
 496               		.file 5 "./libs/can/can.h"
 497               		.file 6 "src/Pin.h"
 498               		.file 7 "src/VacuumPumps.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 VacuumPumps.c
     /tmp/ccfognxt.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccfognxt.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccfognxt.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccfognxt.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/ccfognxt.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccfognxt.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccfognxt.s:13     .text:0000000000000000 VacuumPump_Add
                             .bss:0000000000000000 count
     /tmp/ccfognxt.s:490    .bss:0000000000000001 instances
     /tmp/ccfognxt.s:105    .text:0000000000000064 VacuumPump_OnMessage
     /tmp/ccfognxt.s:307    .text:000000000000014e SingleVacuumPump_OnMessage

UNDEFINED SYMBOLS
Pin_SetMode
Pin_WriteDigital
__do_clear_bss
